Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ANDASSIGN
    AUTO
    BREAK
    CASE
    CHAR
    CONST
    CONTINUE
    DEFAULT
    DIVIDEASSIGN
    DO
    DOUBLE
    ENUM
    EXTERN
    FOR
    GOTO
    LONG
    LSHIFT
    LSHIFTASSIGN
    MODASSIGN
    MULASSIGN
    ORASSIGN
    PLUSASSIGN
    REGISTER
    RSHIFT
    RSHIFTASSIGN
    SHORT
    SIGNED
    SIZEOF
    STATIC
    SUBASSIGN
    SWITCH
    TYPEDEF
    UNION
    UNSIGNED
    VOID
    VOLATILE
    XORASSIGN

Grammar

Rule 0     S' -> Program
Rule 1     EMPTY -> <empty>
Rule 2     RELOP -> >
Rule 3     RELOP -> <
Rule 4     RELOP -> GRTREQL
Rule 5     RELOP -> LESSEQL
Rule 6     RELOP -> EQUAL
Rule 7     RELOP -> NEQUAL
Rule 8     TYPE -> INT
Rule 9     TYPE -> FLOAT
Rule 10    Program -> ExtDefList
Rule 11    ExtDefList -> ExtDef ExtDefList
Rule 12    ExtDefList -> EMPTY
Rule 13    FunHead -> Specifier FunDec
Rule 14    ExtDecHead -> Specifier VarDec
Rule 15    ExtDecHead -> Specifier FunDec
Rule 16    ExtDecList -> ExtDecList , VarDec
Rule 17    ExtDecList -> ExtDecHead
Rule 18    ExtDecList -> ExtDecList , FunDec
Rule 19    ExtDef -> ExtDecList ;
Rule 20    ExtDef -> Specifier ;
Rule 21    ExtDef -> FunHead CompSt
Rule 22    Specifier -> TYPE
Rule 23    Specifier -> StructSpecifier
Rule 24    StructSpecifier -> STRUCT OptTag { DefList }
Rule 25    StructSpecifier -> STRUCT Tag
Rule 26    OptTag -> ID
Rule 27    OptTag -> EMPTY
Rule 28    Tag -> ID
Rule 29    VarDec -> ID
Rule 30    VarDec -> VarDec [ NUMBER ]
Rule 31    FunDec -> ID ( VarList )
Rule 32    FunDec -> ID ( )
Rule 33    VarList -> ParamDec , VarList
Rule 34    VarList -> ParamDec
Rule 35    ParamDec -> Specifier VarDec
Rule 36    CompSt -> { DefList StmtList }
Rule 37    StmtList -> Stmt StmtList
Rule 38    StmtList -> EMPTY
Rule 39    Stmt -> RETURN Exp ;
Rule 40    Stmt -> PRINT Exp ;
Rule 41    FlowCtrl -> IF ( Exp ) Stmt
Rule 42    FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt
Rule 43    FlowCtrl -> WHILE ( Exp ) Stmt
Rule 44    Stmt -> Exp ;
Rule 45    Stmt -> CompSt
Rule 46    Stmt -> ;
Rule 47    Stmt -> FlowCtrl
Rule 48    DefList -> Def ; DefList
Rule 49    DefList -> EMPTY
Rule 50    Def -> DecList
Rule 51    DecHead -> Specifier Dec
Rule 52    DecList -> DecHead
Rule 53    DecList -> DecList , Dec
Rule 54    Dec -> VarDec
Rule 55    Dec -> VarDec = Exp
Rule 56    PrefixedExp -> * Exp
Rule 57    PrefixedExp -> & Exp
Rule 58    PrefixedExp -> - Exp
Rule 59    PrefixedExp -> + Exp
Rule 60    PrefixedExp -> PLUSSLF Exp
Rule 61    PrefixedExp -> SUBSLF Exp
Rule 62    PrefixedExp -> ( TYPE ) Exp
Rule 63    Exp -> ( Exp )
Rule 64    Exp -> ID
Rule 65    Exp -> NUMBER
Rule 66    Exp -> DECIMAL
Rule 67    Exp -> STRINGLITERAL
Rule 68    Exp -> Exp = Exp
Rule 69    Exp -> Exp + Exp
Rule 70    Exp -> Exp - Exp
Rule 71    Exp -> Exp * Exp
Rule 72    Exp -> Exp / Exp
Rule 73    Exp -> FuncCall
Rule 74    Exp -> PrefixedExp
Rule 75    Exp -> Exp BOOLAND Exp
Rule 76    Exp -> Exp BOOLOR Exp
Rule 77    Exp -> ! Exp
Rule 78    Exp -> Exp RELOP Exp
Rule 79    Exp -> Exp [ Exp ]
Rule 80    Exp -> Exp . ID
Rule 81    FuncCall -> ID ( Args )
Rule 82    FuncCall -> ID ( )
Rule 83    Args -> Exp , Args
Rule 84    Args -> Exp

Terminals, with rules where they appear

!                    : 77
&                    : 57
(                    : 31 32 41 42 43 62 63 81 82
)                    : 31 32 41 42 43 62 63 81 82
*                    : 56 71
+                    : 59 69
,                    : 16 18 33 53 83
-                    : 58 70
.                    : 80
/                    : 72
;                    : 19 20 39 40 44 46 48
<                    : 3
=                    : 55 68
>                    : 2
ANDASSIGN            : 
AUTO                 : 
BOOLAND              : 75
BOOLOR               : 76
BREAK                : 
CASE                 : 
CHAR                 : 
CONST                : 
CONTINUE             : 
DECIMAL              : 66
DEFAULT              : 
DIVIDEASSIGN         : 
DO                   : 
DOUBLE               : 
ELSE                 : 42
ENUM                 : 
EQUAL                : 6
EXTERN               : 
FLOAT                : 9
FOR                  : 
GOTO                 : 
GRTREQL              : 4
ID                   : 26 28 29 31 32 64 80 81 82
IF                   : 41 42
INT                  : 8
LESSEQL              : 5
LONG                 : 
LSHIFT               : 
LSHIFTASSIGN         : 
MODASSIGN            : 
MULASSIGN            : 
NEQUAL               : 7
NUMBER               : 30 65
ORASSIGN             : 
PLUSASSIGN           : 
PLUSSLF              : 60
PRINT                : 40
REGISTER             : 
RETURN               : 39
RSHIFT               : 
RSHIFTASSIGN         : 
SHORT                : 
SIGNED               : 
SIZEOF               : 
STATIC               : 
STRINGLITERAL        : 67
STRUCT               : 24 25
SUBASSIGN            : 
SUBSLF               : 61
SWITCH               : 
TYPEDEF              : 
UNION                : 
UNSIGNED             : 
VOID                 : 
VOLATILE             : 
WHILE                : 43
XORASSIGN            : 
[                    : 30 79
]                    : 30 79
error                : 
{                    : 24 36
}                    : 24 36

Nonterminals, with rules where they appear

Args                 : 81 83
CompSt               : 21 45
Dec                  : 51 53
DecHead              : 52
DecList              : 50 53
Def                  : 48
DefList              : 24 36 48
EMPTY                : 12 27 38 49
Exp                  : 39 40 41 42 43 44 55 56 57 58 59 60 61 62 63 68 68 69 69 70 70 71 71 72 72 75 75 76 76 77 78 78 79 79 80 83 84
ExtDecHead           : 17
ExtDecList           : 16 18 19
ExtDef               : 11
ExtDefList           : 10 11
FlowCtrl             : 47
FunDec               : 13 15 18
FunHead              : 21
FuncCall             : 73
OptTag               : 24
ParamDec             : 33 34
PrefixedExp          : 74
Program              : 0
RELOP                : 78
Specifier            : 13 14 15 20 35 51
Stmt                 : 37 41 42 42 43
StmtList             : 36 37
StructSpecifier      : 23
TYPE                 : 22 62
Tag                  : 25
VarDec               : 14 16 30 35 54 55
VarList              : 31 33

Parsing method: LALR

state 0

    (0) S' -> . Program
    (10) Program -> . ExtDefList
    (11) ExtDefList -> . ExtDef ExtDefList
    (12) ExtDefList -> . EMPTY
    (19) ExtDef -> . ExtDecList ;
    (20) ExtDef -> . Specifier ;
    (21) ExtDef -> . FunHead CompSt
    (1) EMPTY -> .
    (16) ExtDecList -> . ExtDecList , VarDec
    (17) ExtDecList -> . ExtDecHead
    (18) ExtDecList -> . ExtDecList , FunDec
    (22) Specifier -> . TYPE
    (23) Specifier -> . StructSpecifier
    (13) FunHead -> . Specifier FunDec
    (14) ExtDecHead -> . Specifier VarDec
    (15) ExtDecHead -> . Specifier FunDec
    (8) TYPE -> . INT
    (9) TYPE -> . FLOAT
    (24) StructSpecifier -> . STRUCT OptTag { DefList }
    (25) StructSpecifier -> . STRUCT Tag

    $end            reduce using rule 1 (EMPTY -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STRUCT          shift and go to state 13

    Program                        shift and go to state 1
    ExtDefList                     shift and go to state 2
    ExtDef                         shift and go to state 3
    EMPTY                          shift and go to state 4
    ExtDecList                     shift and go to state 5
    Specifier                      shift and go to state 6
    FunHead                        shift and go to state 7
    ExtDecHead                     shift and go to state 8
    TYPE                           shift and go to state 9
    StructSpecifier                shift and go to state 10

state 1

    (0) S' -> Program .



state 2

    (10) Program -> ExtDefList .

    $end            reduce using rule 10 (Program -> ExtDefList .)


state 3

    (11) ExtDefList -> ExtDef . ExtDefList
    (11) ExtDefList -> . ExtDef ExtDefList
    (12) ExtDefList -> . EMPTY
    (19) ExtDef -> . ExtDecList ;
    (20) ExtDef -> . Specifier ;
    (21) ExtDef -> . FunHead CompSt
    (1) EMPTY -> .
    (16) ExtDecList -> . ExtDecList , VarDec
    (17) ExtDecList -> . ExtDecHead
    (18) ExtDecList -> . ExtDecList , FunDec
    (22) Specifier -> . TYPE
    (23) Specifier -> . StructSpecifier
    (13) FunHead -> . Specifier FunDec
    (14) ExtDecHead -> . Specifier VarDec
    (15) ExtDecHead -> . Specifier FunDec
    (8) TYPE -> . INT
    (9) TYPE -> . FLOAT
    (24) StructSpecifier -> . STRUCT OptTag { DefList }
    (25) StructSpecifier -> . STRUCT Tag

    $end            reduce using rule 1 (EMPTY -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STRUCT          shift and go to state 13

    ExtDef                         shift and go to state 3
    ExtDefList                     shift and go to state 14
    EMPTY                          shift and go to state 4
    ExtDecList                     shift and go to state 5
    Specifier                      shift and go to state 6
    FunHead                        shift and go to state 7
    ExtDecHead                     shift and go to state 8
    TYPE                           shift and go to state 9
    StructSpecifier                shift and go to state 10

state 4

    (12) ExtDefList -> EMPTY .

    $end            reduce using rule 12 (ExtDefList -> EMPTY .)


state 5

    (19) ExtDef -> ExtDecList . ;
    (16) ExtDecList -> ExtDecList . , VarDec
    (18) ExtDecList -> ExtDecList . , FunDec

    ;               shift and go to state 15
    ,               shift and go to state 16


state 6

    (20) ExtDef -> Specifier . ;
    (13) FunHead -> Specifier . FunDec
    (14) ExtDecHead -> Specifier . VarDec
    (15) ExtDecHead -> Specifier . FunDec
    (31) FunDec -> . ID ( VarList )
    (32) FunDec -> . ID ( )
    (29) VarDec -> . ID
    (30) VarDec -> . VarDec [ NUMBER ]

    ;               shift and go to state 17
    ID              shift and go to state 20

    FunDec                         shift and go to state 18
    VarDec                         shift and go to state 19

state 7

    (21) ExtDef -> FunHead . CompSt
    (36) CompSt -> . { DefList StmtList }

    {               shift and go to state 22

    CompSt                         shift and go to state 21

state 8

    (17) ExtDecList -> ExtDecHead .

    ;               reduce using rule 17 (ExtDecList -> ExtDecHead .)
    ,               reduce using rule 17 (ExtDecList -> ExtDecHead .)


state 9

    (22) Specifier -> TYPE .

    ;               reduce using rule 22 (Specifier -> TYPE .)
    ID              reduce using rule 22 (Specifier -> TYPE .)


state 10

    (23) Specifier -> StructSpecifier .

    ;               reduce using rule 23 (Specifier -> StructSpecifier .)
    ID              reduce using rule 23 (Specifier -> StructSpecifier .)


state 11

    (8) TYPE -> INT .

    ;               reduce using rule 8 (TYPE -> INT .)
    ID              reduce using rule 8 (TYPE -> INT .)
    )               reduce using rule 8 (TYPE -> INT .)


state 12

    (9) TYPE -> FLOAT .

    ;               reduce using rule 9 (TYPE -> FLOAT .)
    ID              reduce using rule 9 (TYPE -> FLOAT .)
    )               reduce using rule 9 (TYPE -> FLOAT .)


state 13

    (24) StructSpecifier -> STRUCT . OptTag { DefList }
    (25) StructSpecifier -> STRUCT . Tag
    (26) OptTag -> . ID
    (27) OptTag -> . EMPTY
    (28) Tag -> . ID
    (1) EMPTY -> .

    ID              shift and go to state 25
    {               reduce using rule 1 (EMPTY -> .)

    OptTag                         shift and go to state 23
    Tag                            shift and go to state 24
    EMPTY                          shift and go to state 26

state 14

    (11) ExtDefList -> ExtDef ExtDefList .

    $end            reduce using rule 11 (ExtDefList -> ExtDef ExtDefList .)


state 15

    (19) ExtDef -> ExtDecList ; .

    INT             reduce using rule 19 (ExtDef -> ExtDecList ; .)
    FLOAT           reduce using rule 19 (ExtDef -> ExtDecList ; .)
    STRUCT          reduce using rule 19 (ExtDef -> ExtDecList ; .)
    $end            reduce using rule 19 (ExtDef -> ExtDecList ; .)


state 16

    (16) ExtDecList -> ExtDecList , . VarDec
    (18) ExtDecList -> ExtDecList , . FunDec
    (29) VarDec -> . ID
    (30) VarDec -> . VarDec [ NUMBER ]
    (31) FunDec -> . ID ( VarList )
    (32) FunDec -> . ID ( )

    ID              shift and go to state 29

    VarDec                         shift and go to state 27
    FunDec                         shift and go to state 28

state 17

    (20) ExtDef -> Specifier ; .

    INT             reduce using rule 20 (ExtDef -> Specifier ; .)
    FLOAT           reduce using rule 20 (ExtDef -> Specifier ; .)
    STRUCT          reduce using rule 20 (ExtDef -> Specifier ; .)
    $end            reduce using rule 20 (ExtDef -> Specifier ; .)


state 18

    (13) FunHead -> Specifier FunDec .
    (15) ExtDecHead -> Specifier FunDec .

    {               reduce using rule 13 (FunHead -> Specifier FunDec .)
    ;               reduce using rule 15 (ExtDecHead -> Specifier FunDec .)
    ,               reduce using rule 15 (ExtDecHead -> Specifier FunDec .)


state 19

    (14) ExtDecHead -> Specifier VarDec .
    (30) VarDec -> VarDec . [ NUMBER ]

    ;               reduce using rule 14 (ExtDecHead -> Specifier VarDec .)
    ,               reduce using rule 14 (ExtDecHead -> Specifier VarDec .)
    [               shift and go to state 30


state 20

    (31) FunDec -> ID . ( VarList )
    (32) FunDec -> ID . ( )
    (29) VarDec -> ID .

    (               shift and go to state 31
    [               reduce using rule 29 (VarDec -> ID .)
    ;               reduce using rule 29 (VarDec -> ID .)
    ,               reduce using rule 29 (VarDec -> ID .)


state 21

    (21) ExtDef -> FunHead CompSt .

    INT             reduce using rule 21 (ExtDef -> FunHead CompSt .)
    FLOAT           reduce using rule 21 (ExtDef -> FunHead CompSt .)
    STRUCT          reduce using rule 21 (ExtDef -> FunHead CompSt .)
    $end            reduce using rule 21 (ExtDef -> FunHead CompSt .)


state 22

    (36) CompSt -> { . DefList StmtList }
    (48) DefList -> . Def ; DefList
    (49) DefList -> . EMPTY
    (50) Def -> . DecList
    (1) EMPTY -> .
    (52) DecList -> . DecHead
    (53) DecList -> . DecList , Dec
    (51) DecHead -> . Specifier Dec
    (22) Specifier -> . TYPE
    (23) Specifier -> . StructSpecifier
    (8) TYPE -> . INT
    (9) TYPE -> . FLOAT
    (24) StructSpecifier -> . STRUCT OptTag { DefList }
    (25) StructSpecifier -> . STRUCT Tag

    RETURN          reduce using rule 1 (EMPTY -> .)
    PRINT           reduce using rule 1 (EMPTY -> .)
    ;               reduce using rule 1 (EMPTY -> .)
    (               reduce using rule 1 (EMPTY -> .)
    ID              reduce using rule 1 (EMPTY -> .)
    NUMBER          reduce using rule 1 (EMPTY -> .)
    DECIMAL         reduce using rule 1 (EMPTY -> .)
    STRINGLITERAL   reduce using rule 1 (EMPTY -> .)
    !               reduce using rule 1 (EMPTY -> .)
    {               reduce using rule 1 (EMPTY -> .)
    IF              reduce using rule 1 (EMPTY -> .)
    WHILE           reduce using rule 1 (EMPTY -> .)
    *               reduce using rule 1 (EMPTY -> .)
    &               reduce using rule 1 (EMPTY -> .)
    -               reduce using rule 1 (EMPTY -> .)
    +               reduce using rule 1 (EMPTY -> .)
    PLUSSLF         reduce using rule 1 (EMPTY -> .)
    SUBSLF          reduce using rule 1 (EMPTY -> .)
    }               reduce using rule 1 (EMPTY -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STRUCT          shift and go to state 13

    DefList                        shift and go to state 32
    Def                            shift and go to state 33
    EMPTY                          shift and go to state 34
    DecList                        shift and go to state 35
    DecHead                        shift and go to state 36
    Specifier                      shift and go to state 37
    TYPE                           shift and go to state 9
    StructSpecifier                shift and go to state 10

state 23

    (24) StructSpecifier -> STRUCT OptTag . { DefList }

    {               shift and go to state 38


state 24

    (25) StructSpecifier -> STRUCT Tag .

    ;               reduce using rule 25 (StructSpecifier -> STRUCT Tag .)
    ID              reduce using rule 25 (StructSpecifier -> STRUCT Tag .)


state 25

    (26) OptTag -> ID .
    (28) Tag -> ID .

    {               reduce using rule 26 (OptTag -> ID .)
    ;               reduce using rule 28 (Tag -> ID .)
    ID              reduce using rule 28 (Tag -> ID .)


state 26

    (27) OptTag -> EMPTY .

    {               reduce using rule 27 (OptTag -> EMPTY .)


state 27

    (16) ExtDecList -> ExtDecList , VarDec .
    (30) VarDec -> VarDec . [ NUMBER ]

    ;               reduce using rule 16 (ExtDecList -> ExtDecList , VarDec .)
    ,               reduce using rule 16 (ExtDecList -> ExtDecList , VarDec .)
    [               shift and go to state 30


state 28

    (18) ExtDecList -> ExtDecList , FunDec .

    ;               reduce using rule 18 (ExtDecList -> ExtDecList , FunDec .)
    ,               reduce using rule 18 (ExtDecList -> ExtDecList , FunDec .)


state 29

    (29) VarDec -> ID .
    (31) FunDec -> ID . ( VarList )
    (32) FunDec -> ID . ( )

    [               reduce using rule 29 (VarDec -> ID .)
    ;               reduce using rule 29 (VarDec -> ID .)
    ,               reduce using rule 29 (VarDec -> ID .)
    (               shift and go to state 31


state 30

    (30) VarDec -> VarDec [ . NUMBER ]

    NUMBER          shift and go to state 39


state 31

    (31) FunDec -> ID ( . VarList )
    (32) FunDec -> ID ( . )
    (33) VarList -> . ParamDec , VarList
    (34) VarList -> . ParamDec
    (35) ParamDec -> . Specifier VarDec
    (22) Specifier -> . TYPE
    (23) Specifier -> . StructSpecifier
    (8) TYPE -> . INT
    (9) TYPE -> . FLOAT
    (24) StructSpecifier -> . STRUCT OptTag { DefList }
    (25) StructSpecifier -> . STRUCT Tag

    )               shift and go to state 41
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STRUCT          shift and go to state 13

    VarList                        shift and go to state 40
    ParamDec                       shift and go to state 42
    Specifier                      shift and go to state 43
    TYPE                           shift and go to state 9
    StructSpecifier                shift and go to state 10

state 32

    (36) CompSt -> { DefList . StmtList }
    (37) StmtList -> . Stmt StmtList
    (38) StmtList -> . EMPTY
    (39) Stmt -> . RETURN Exp ;
    (40) Stmt -> . PRINT Exp ;
    (44) Stmt -> . Exp ;
    (45) Stmt -> . CompSt
    (46) Stmt -> . ;
    (47) Stmt -> . FlowCtrl
    (1) EMPTY -> .
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (36) CompSt -> . { DefList StmtList }
    (41) FlowCtrl -> . IF ( Exp ) Stmt
    (42) FlowCtrl -> . IF ( Exp ) Stmt ELSE Stmt
    (43) FlowCtrl -> . WHILE ( Exp ) Stmt
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    RETURN          shift and go to state 47
    PRINT           shift and go to state 50
    ;               shift and go to state 49
    }               reduce using rule 1 (EMPTY -> .)
    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    {               shift and go to state 22
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    StmtList                       shift and go to state 44
    Stmt                           shift and go to state 45
    EMPTY                          shift and go to state 46
    Exp                            shift and go to state 48
    CompSt                         shift and go to state 51
    FlowCtrl                       shift and go to state 52
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 33

    (48) DefList -> Def . ; DefList

    ;               shift and go to state 69


state 34

    (49) DefList -> EMPTY .

    RETURN          reduce using rule 49 (DefList -> EMPTY .)
    PRINT           reduce using rule 49 (DefList -> EMPTY .)
    ;               reduce using rule 49 (DefList -> EMPTY .)
    (               reduce using rule 49 (DefList -> EMPTY .)
    ID              reduce using rule 49 (DefList -> EMPTY .)
    NUMBER          reduce using rule 49 (DefList -> EMPTY .)
    DECIMAL         reduce using rule 49 (DefList -> EMPTY .)
    STRINGLITERAL   reduce using rule 49 (DefList -> EMPTY .)
    !               reduce using rule 49 (DefList -> EMPTY .)
    {               reduce using rule 49 (DefList -> EMPTY .)
    IF              reduce using rule 49 (DefList -> EMPTY .)
    WHILE           reduce using rule 49 (DefList -> EMPTY .)
    *               reduce using rule 49 (DefList -> EMPTY .)
    &               reduce using rule 49 (DefList -> EMPTY .)
    -               reduce using rule 49 (DefList -> EMPTY .)
    +               reduce using rule 49 (DefList -> EMPTY .)
    PLUSSLF         reduce using rule 49 (DefList -> EMPTY .)
    SUBSLF          reduce using rule 49 (DefList -> EMPTY .)
    }               reduce using rule 49 (DefList -> EMPTY .)


state 35

    (50) Def -> DecList .
    (53) DecList -> DecList . , Dec

    ;               reduce using rule 50 (Def -> DecList .)
    ,               shift and go to state 70


state 36

    (52) DecList -> DecHead .

    ,               reduce using rule 52 (DecList -> DecHead .)
    ;               reduce using rule 52 (DecList -> DecHead .)


state 37

    (51) DecHead -> Specifier . Dec
    (54) Dec -> . VarDec
    (55) Dec -> . VarDec = Exp
    (29) VarDec -> . ID
    (30) VarDec -> . VarDec [ NUMBER ]

    ID              shift and go to state 73

    Dec                            shift and go to state 71
    VarDec                         shift and go to state 72

state 38

    (24) StructSpecifier -> STRUCT OptTag { . DefList }
    (48) DefList -> . Def ; DefList
    (49) DefList -> . EMPTY
    (50) Def -> . DecList
    (1) EMPTY -> .
    (52) DecList -> . DecHead
    (53) DecList -> . DecList , Dec
    (51) DecHead -> . Specifier Dec
    (22) Specifier -> . TYPE
    (23) Specifier -> . StructSpecifier
    (8) TYPE -> . INT
    (9) TYPE -> . FLOAT
    (24) StructSpecifier -> . STRUCT OptTag { DefList }
    (25) StructSpecifier -> . STRUCT Tag

    }               reduce using rule 1 (EMPTY -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STRUCT          shift and go to state 13

    DefList                        shift and go to state 74
    Def                            shift and go to state 33
    EMPTY                          shift and go to state 34
    DecList                        shift and go to state 35
    DecHead                        shift and go to state 36
    Specifier                      shift and go to state 37
    TYPE                           shift and go to state 9
    StructSpecifier                shift and go to state 10

state 39

    (30) VarDec -> VarDec [ NUMBER . ]

    ]               shift and go to state 75


state 40

    (31) FunDec -> ID ( VarList . )

    )               shift and go to state 76


state 41

    (32) FunDec -> ID ( ) .

    {               reduce using rule 32 (FunDec -> ID ( ) .)
    ;               reduce using rule 32 (FunDec -> ID ( ) .)
    ,               reduce using rule 32 (FunDec -> ID ( ) .)


state 42

    (33) VarList -> ParamDec . , VarList
    (34) VarList -> ParamDec .

    ,               shift and go to state 77
    )               reduce using rule 34 (VarList -> ParamDec .)


state 43

    (35) ParamDec -> Specifier . VarDec
    (29) VarDec -> . ID
    (30) VarDec -> . VarDec [ NUMBER ]

    ID              shift and go to state 73

    VarDec                         shift and go to state 78

state 44

    (36) CompSt -> { DefList StmtList . }

    }               shift and go to state 79


state 45

    (37) StmtList -> Stmt . StmtList
    (37) StmtList -> . Stmt StmtList
    (38) StmtList -> . EMPTY
    (39) Stmt -> . RETURN Exp ;
    (40) Stmt -> . PRINT Exp ;
    (44) Stmt -> . Exp ;
    (45) Stmt -> . CompSt
    (46) Stmt -> . ;
    (47) Stmt -> . FlowCtrl
    (1) EMPTY -> .
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (36) CompSt -> . { DefList StmtList }
    (41) FlowCtrl -> . IF ( Exp ) Stmt
    (42) FlowCtrl -> . IF ( Exp ) Stmt ELSE Stmt
    (43) FlowCtrl -> . WHILE ( Exp ) Stmt
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    RETURN          shift and go to state 47
    PRINT           shift and go to state 50
    ;               shift and go to state 49
    }               reduce using rule 1 (EMPTY -> .)
    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    {               shift and go to state 22
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Stmt                           shift and go to state 45
    StmtList                       shift and go to state 80
    EMPTY                          shift and go to state 46
    Exp                            shift and go to state 48
    CompSt                         shift and go to state 51
    FlowCtrl                       shift and go to state 52
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 46

    (38) StmtList -> EMPTY .

    }               reduce using rule 38 (StmtList -> EMPTY .)


state 47

    (39) Stmt -> RETURN . Exp ;
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 81
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 48

    (44) Stmt -> Exp . ;
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               shift and go to state 82
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

    RELOP                          shift and go to state 90

state 49

    (46) Stmt -> ; .

    RETURN          reduce using rule 46 (Stmt -> ; .)
    PRINT           reduce using rule 46 (Stmt -> ; .)
    ;               reduce using rule 46 (Stmt -> ; .)
    (               reduce using rule 46 (Stmt -> ; .)
    ID              reduce using rule 46 (Stmt -> ; .)
    NUMBER          reduce using rule 46 (Stmt -> ; .)
    DECIMAL         reduce using rule 46 (Stmt -> ; .)
    STRINGLITERAL   reduce using rule 46 (Stmt -> ; .)
    !               reduce using rule 46 (Stmt -> ; .)
    {               reduce using rule 46 (Stmt -> ; .)
    IF              reduce using rule 46 (Stmt -> ; .)
    WHILE           reduce using rule 46 (Stmt -> ; .)
    *               reduce using rule 46 (Stmt -> ; .)
    &               reduce using rule 46 (Stmt -> ; .)
    -               reduce using rule 46 (Stmt -> ; .)
    +               reduce using rule 46 (Stmt -> ; .)
    PLUSSLF         reduce using rule 46 (Stmt -> ; .)
    SUBSLF          reduce using rule 46 (Stmt -> ; .)
    }               reduce using rule 46 (Stmt -> ; .)
    ELSE            reduce using rule 46 (Stmt -> ; .)


state 50

    (40) Stmt -> PRINT . Exp ;
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 99
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 51

    (45) Stmt -> CompSt .

    RETURN          reduce using rule 45 (Stmt -> CompSt .)
    PRINT           reduce using rule 45 (Stmt -> CompSt .)
    ;               reduce using rule 45 (Stmt -> CompSt .)
    (               reduce using rule 45 (Stmt -> CompSt .)
    ID              reduce using rule 45 (Stmt -> CompSt .)
    NUMBER          reduce using rule 45 (Stmt -> CompSt .)
    DECIMAL         reduce using rule 45 (Stmt -> CompSt .)
    STRINGLITERAL   reduce using rule 45 (Stmt -> CompSt .)
    !               reduce using rule 45 (Stmt -> CompSt .)
    {               reduce using rule 45 (Stmt -> CompSt .)
    IF              reduce using rule 45 (Stmt -> CompSt .)
    WHILE           reduce using rule 45 (Stmt -> CompSt .)
    *               reduce using rule 45 (Stmt -> CompSt .)
    &               reduce using rule 45 (Stmt -> CompSt .)
    -               reduce using rule 45 (Stmt -> CompSt .)
    +               reduce using rule 45 (Stmt -> CompSt .)
    PLUSSLF         reduce using rule 45 (Stmt -> CompSt .)
    SUBSLF          reduce using rule 45 (Stmt -> CompSt .)
    }               reduce using rule 45 (Stmt -> CompSt .)
    ELSE            reduce using rule 45 (Stmt -> CompSt .)


state 52

    (47) Stmt -> FlowCtrl .

    RETURN          reduce using rule 47 (Stmt -> FlowCtrl .)
    PRINT           reduce using rule 47 (Stmt -> FlowCtrl .)
    ;               reduce using rule 47 (Stmt -> FlowCtrl .)
    (               reduce using rule 47 (Stmt -> FlowCtrl .)
    ID              reduce using rule 47 (Stmt -> FlowCtrl .)
    NUMBER          reduce using rule 47 (Stmt -> FlowCtrl .)
    DECIMAL         reduce using rule 47 (Stmt -> FlowCtrl .)
    STRINGLITERAL   reduce using rule 47 (Stmt -> FlowCtrl .)
    !               reduce using rule 47 (Stmt -> FlowCtrl .)
    {               reduce using rule 47 (Stmt -> FlowCtrl .)
    IF              reduce using rule 47 (Stmt -> FlowCtrl .)
    WHILE           reduce using rule 47 (Stmt -> FlowCtrl .)
    *               reduce using rule 47 (Stmt -> FlowCtrl .)
    &               reduce using rule 47 (Stmt -> FlowCtrl .)
    -               reduce using rule 47 (Stmt -> FlowCtrl .)
    +               reduce using rule 47 (Stmt -> FlowCtrl .)
    PLUSSLF         reduce using rule 47 (Stmt -> FlowCtrl .)
    SUBSLF          reduce using rule 47 (Stmt -> FlowCtrl .)
    }               reduce using rule 47 (Stmt -> FlowCtrl .)
    ELSE            reduce using rule 47 (Stmt -> FlowCtrl .)


state 53

    (63) Exp -> ( . Exp )
    (62) PrefixedExp -> ( . TYPE ) Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (8) TYPE -> . INT
    (9) TYPE -> . FLOAT
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 100
    TYPE                           shift and go to state 101
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 54

    (64) Exp -> ID .
    (81) FuncCall -> ID . ( Args )
    (82) FuncCall -> ID . ( )

    ;               reduce using rule 64 (Exp -> ID .)
    =               reduce using rule 64 (Exp -> ID .)
    +               reduce using rule 64 (Exp -> ID .)
    -               reduce using rule 64 (Exp -> ID .)
    *               reduce using rule 64 (Exp -> ID .)
    /               reduce using rule 64 (Exp -> ID .)
    BOOLAND         reduce using rule 64 (Exp -> ID .)
    BOOLOR          reduce using rule 64 (Exp -> ID .)
    [               reduce using rule 64 (Exp -> ID .)
    .               reduce using rule 64 (Exp -> ID .)
    >               reduce using rule 64 (Exp -> ID .)
    <               reduce using rule 64 (Exp -> ID .)
    GRTREQL         reduce using rule 64 (Exp -> ID .)
    LESSEQL         reduce using rule 64 (Exp -> ID .)
    EQUAL           reduce using rule 64 (Exp -> ID .)
    NEQUAL          reduce using rule 64 (Exp -> ID .)
    )               reduce using rule 64 (Exp -> ID .)
    ]               reduce using rule 64 (Exp -> ID .)
    ,               reduce using rule 64 (Exp -> ID .)
    (               shift and go to state 102


state 55

    (65) Exp -> NUMBER .

    ;               reduce using rule 65 (Exp -> NUMBER .)
    =               reduce using rule 65 (Exp -> NUMBER .)
    +               reduce using rule 65 (Exp -> NUMBER .)
    -               reduce using rule 65 (Exp -> NUMBER .)
    *               reduce using rule 65 (Exp -> NUMBER .)
    /               reduce using rule 65 (Exp -> NUMBER .)
    BOOLAND         reduce using rule 65 (Exp -> NUMBER .)
    BOOLOR          reduce using rule 65 (Exp -> NUMBER .)
    [               reduce using rule 65 (Exp -> NUMBER .)
    .               reduce using rule 65 (Exp -> NUMBER .)
    >               reduce using rule 65 (Exp -> NUMBER .)
    <               reduce using rule 65 (Exp -> NUMBER .)
    GRTREQL         reduce using rule 65 (Exp -> NUMBER .)
    LESSEQL         reduce using rule 65 (Exp -> NUMBER .)
    EQUAL           reduce using rule 65 (Exp -> NUMBER .)
    NEQUAL          reduce using rule 65 (Exp -> NUMBER .)
    )               reduce using rule 65 (Exp -> NUMBER .)
    ]               reduce using rule 65 (Exp -> NUMBER .)
    ,               reduce using rule 65 (Exp -> NUMBER .)


state 56

    (66) Exp -> DECIMAL .

    ;               reduce using rule 66 (Exp -> DECIMAL .)
    =               reduce using rule 66 (Exp -> DECIMAL .)
    +               reduce using rule 66 (Exp -> DECIMAL .)
    -               reduce using rule 66 (Exp -> DECIMAL .)
    *               reduce using rule 66 (Exp -> DECIMAL .)
    /               reduce using rule 66 (Exp -> DECIMAL .)
    BOOLAND         reduce using rule 66 (Exp -> DECIMAL .)
    BOOLOR          reduce using rule 66 (Exp -> DECIMAL .)
    [               reduce using rule 66 (Exp -> DECIMAL .)
    .               reduce using rule 66 (Exp -> DECIMAL .)
    >               reduce using rule 66 (Exp -> DECIMAL .)
    <               reduce using rule 66 (Exp -> DECIMAL .)
    GRTREQL         reduce using rule 66 (Exp -> DECIMAL .)
    LESSEQL         reduce using rule 66 (Exp -> DECIMAL .)
    EQUAL           reduce using rule 66 (Exp -> DECIMAL .)
    NEQUAL          reduce using rule 66 (Exp -> DECIMAL .)
    )               reduce using rule 66 (Exp -> DECIMAL .)
    ]               reduce using rule 66 (Exp -> DECIMAL .)
    ,               reduce using rule 66 (Exp -> DECIMAL .)


state 57

    (67) Exp -> STRINGLITERAL .

    ;               reduce using rule 67 (Exp -> STRINGLITERAL .)
    =               reduce using rule 67 (Exp -> STRINGLITERAL .)
    +               reduce using rule 67 (Exp -> STRINGLITERAL .)
    -               reduce using rule 67 (Exp -> STRINGLITERAL .)
    *               reduce using rule 67 (Exp -> STRINGLITERAL .)
    /               reduce using rule 67 (Exp -> STRINGLITERAL .)
    BOOLAND         reduce using rule 67 (Exp -> STRINGLITERAL .)
    BOOLOR          reduce using rule 67 (Exp -> STRINGLITERAL .)
    [               reduce using rule 67 (Exp -> STRINGLITERAL .)
    .               reduce using rule 67 (Exp -> STRINGLITERAL .)
    >               reduce using rule 67 (Exp -> STRINGLITERAL .)
    <               reduce using rule 67 (Exp -> STRINGLITERAL .)
    GRTREQL         reduce using rule 67 (Exp -> STRINGLITERAL .)
    LESSEQL         reduce using rule 67 (Exp -> STRINGLITERAL .)
    EQUAL           reduce using rule 67 (Exp -> STRINGLITERAL .)
    NEQUAL          reduce using rule 67 (Exp -> STRINGLITERAL .)
    )               reduce using rule 67 (Exp -> STRINGLITERAL .)
    ]               reduce using rule 67 (Exp -> STRINGLITERAL .)
    ,               reduce using rule 67 (Exp -> STRINGLITERAL .)


state 58

    (59) PrefixedExp -> + . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 103
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 59

    (58) PrefixedExp -> - . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 104
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 60

    (56) PrefixedExp -> * . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 105
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 61

    (73) Exp -> FuncCall .

    ;               reduce using rule 73 (Exp -> FuncCall .)
    =               reduce using rule 73 (Exp -> FuncCall .)
    +               reduce using rule 73 (Exp -> FuncCall .)
    -               reduce using rule 73 (Exp -> FuncCall .)
    *               reduce using rule 73 (Exp -> FuncCall .)
    /               reduce using rule 73 (Exp -> FuncCall .)
    BOOLAND         reduce using rule 73 (Exp -> FuncCall .)
    BOOLOR          reduce using rule 73 (Exp -> FuncCall .)
    [               reduce using rule 73 (Exp -> FuncCall .)
    .               reduce using rule 73 (Exp -> FuncCall .)
    >               reduce using rule 73 (Exp -> FuncCall .)
    <               reduce using rule 73 (Exp -> FuncCall .)
    GRTREQL         reduce using rule 73 (Exp -> FuncCall .)
    LESSEQL         reduce using rule 73 (Exp -> FuncCall .)
    EQUAL           reduce using rule 73 (Exp -> FuncCall .)
    NEQUAL          reduce using rule 73 (Exp -> FuncCall .)
    )               reduce using rule 73 (Exp -> FuncCall .)
    ]               reduce using rule 73 (Exp -> FuncCall .)
    ,               reduce using rule 73 (Exp -> FuncCall .)


state 62

    (74) Exp -> PrefixedExp .

    ;               reduce using rule 74 (Exp -> PrefixedExp .)
    =               reduce using rule 74 (Exp -> PrefixedExp .)
    +               reduce using rule 74 (Exp -> PrefixedExp .)
    -               reduce using rule 74 (Exp -> PrefixedExp .)
    *               reduce using rule 74 (Exp -> PrefixedExp .)
    /               reduce using rule 74 (Exp -> PrefixedExp .)
    BOOLAND         reduce using rule 74 (Exp -> PrefixedExp .)
    BOOLOR          reduce using rule 74 (Exp -> PrefixedExp .)
    [               reduce using rule 74 (Exp -> PrefixedExp .)
    .               reduce using rule 74 (Exp -> PrefixedExp .)
    >               reduce using rule 74 (Exp -> PrefixedExp .)
    <               reduce using rule 74 (Exp -> PrefixedExp .)
    GRTREQL         reduce using rule 74 (Exp -> PrefixedExp .)
    LESSEQL         reduce using rule 74 (Exp -> PrefixedExp .)
    EQUAL           reduce using rule 74 (Exp -> PrefixedExp .)
    NEQUAL          reduce using rule 74 (Exp -> PrefixedExp .)
    )               reduce using rule 74 (Exp -> PrefixedExp .)
    ]               reduce using rule 74 (Exp -> PrefixedExp .)
    ,               reduce using rule 74 (Exp -> PrefixedExp .)


state 63

    (77) Exp -> ! . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 106
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 64

    (41) FlowCtrl -> IF . ( Exp ) Stmt
    (42) FlowCtrl -> IF . ( Exp ) Stmt ELSE Stmt

    (               shift and go to state 107


state 65

    (43) FlowCtrl -> WHILE . ( Exp ) Stmt

    (               shift and go to state 108


state 66

    (57) PrefixedExp -> & . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 109
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 67

    (60) PrefixedExp -> PLUSSLF . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 110
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 68

    (61) PrefixedExp -> SUBSLF . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 111
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 69

    (48) DefList -> Def ; . DefList
    (48) DefList -> . Def ; DefList
    (49) DefList -> . EMPTY
    (50) Def -> . DecList
    (1) EMPTY -> .
    (52) DecList -> . DecHead
    (53) DecList -> . DecList , Dec
    (51) DecHead -> . Specifier Dec
    (22) Specifier -> . TYPE
    (23) Specifier -> . StructSpecifier
    (8) TYPE -> . INT
    (9) TYPE -> . FLOAT
    (24) StructSpecifier -> . STRUCT OptTag { DefList }
    (25) StructSpecifier -> . STRUCT Tag

    RETURN          reduce using rule 1 (EMPTY -> .)
    PRINT           reduce using rule 1 (EMPTY -> .)
    ;               reduce using rule 1 (EMPTY -> .)
    (               reduce using rule 1 (EMPTY -> .)
    ID              reduce using rule 1 (EMPTY -> .)
    NUMBER          reduce using rule 1 (EMPTY -> .)
    DECIMAL         reduce using rule 1 (EMPTY -> .)
    STRINGLITERAL   reduce using rule 1 (EMPTY -> .)
    !               reduce using rule 1 (EMPTY -> .)
    {               reduce using rule 1 (EMPTY -> .)
    IF              reduce using rule 1 (EMPTY -> .)
    WHILE           reduce using rule 1 (EMPTY -> .)
    *               reduce using rule 1 (EMPTY -> .)
    &               reduce using rule 1 (EMPTY -> .)
    -               reduce using rule 1 (EMPTY -> .)
    +               reduce using rule 1 (EMPTY -> .)
    PLUSSLF         reduce using rule 1 (EMPTY -> .)
    SUBSLF          reduce using rule 1 (EMPTY -> .)
    }               reduce using rule 1 (EMPTY -> .)
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STRUCT          shift and go to state 13

    Def                            shift and go to state 33
    DefList                        shift and go to state 112
    EMPTY                          shift and go to state 34
    DecList                        shift and go to state 35
    DecHead                        shift and go to state 36
    Specifier                      shift and go to state 37
    TYPE                           shift and go to state 9
    StructSpecifier                shift and go to state 10

state 70

    (53) DecList -> DecList , . Dec
    (54) Dec -> . VarDec
    (55) Dec -> . VarDec = Exp
    (29) VarDec -> . ID
    (30) VarDec -> . VarDec [ NUMBER ]

    ID              shift and go to state 73

    Dec                            shift and go to state 113
    VarDec                         shift and go to state 72

state 71

    (51) DecHead -> Specifier Dec .

    ,               reduce using rule 51 (DecHead -> Specifier Dec .)
    ;               reduce using rule 51 (DecHead -> Specifier Dec .)


state 72

    (54) Dec -> VarDec .
    (55) Dec -> VarDec . = Exp
    (30) VarDec -> VarDec . [ NUMBER ]

    ,               reduce using rule 54 (Dec -> VarDec .)
    ;               reduce using rule 54 (Dec -> VarDec .)
    =               shift and go to state 114
    [               shift and go to state 30


state 73

    (29) VarDec -> ID .

    =               reduce using rule 29 (VarDec -> ID .)
    [               reduce using rule 29 (VarDec -> ID .)
    ,               reduce using rule 29 (VarDec -> ID .)
    ;               reduce using rule 29 (VarDec -> ID .)
    )               reduce using rule 29 (VarDec -> ID .)


state 74

    (24) StructSpecifier -> STRUCT OptTag { DefList . }

    }               shift and go to state 115


state 75

    (30) VarDec -> VarDec [ NUMBER ] .

    [               reduce using rule 30 (VarDec -> VarDec [ NUMBER ] .)
    ;               reduce using rule 30 (VarDec -> VarDec [ NUMBER ] .)
    ,               reduce using rule 30 (VarDec -> VarDec [ NUMBER ] .)
    =               reduce using rule 30 (VarDec -> VarDec [ NUMBER ] .)
    )               reduce using rule 30 (VarDec -> VarDec [ NUMBER ] .)


state 76

    (31) FunDec -> ID ( VarList ) .

    {               reduce using rule 31 (FunDec -> ID ( VarList ) .)
    ;               reduce using rule 31 (FunDec -> ID ( VarList ) .)
    ,               reduce using rule 31 (FunDec -> ID ( VarList ) .)


state 77

    (33) VarList -> ParamDec , . VarList
    (33) VarList -> . ParamDec , VarList
    (34) VarList -> . ParamDec
    (35) ParamDec -> . Specifier VarDec
    (22) Specifier -> . TYPE
    (23) Specifier -> . StructSpecifier
    (8) TYPE -> . INT
    (9) TYPE -> . FLOAT
    (24) StructSpecifier -> . STRUCT OptTag { DefList }
    (25) StructSpecifier -> . STRUCT Tag

    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    STRUCT          shift and go to state 13

    ParamDec                       shift and go to state 42
    VarList                        shift and go to state 116
    Specifier                      shift and go to state 43
    TYPE                           shift and go to state 9
    StructSpecifier                shift and go to state 10

state 78

    (35) ParamDec -> Specifier VarDec .
    (30) VarDec -> VarDec . [ NUMBER ]

    ,               reduce using rule 35 (ParamDec -> Specifier VarDec .)
    )               reduce using rule 35 (ParamDec -> Specifier VarDec .)
    [               shift and go to state 30


state 79

    (36) CompSt -> { DefList StmtList } .

    INT             reduce using rule 36 (CompSt -> { DefList StmtList } .)
    FLOAT           reduce using rule 36 (CompSt -> { DefList StmtList } .)
    STRUCT          reduce using rule 36 (CompSt -> { DefList StmtList } .)
    $end            reduce using rule 36 (CompSt -> { DefList StmtList } .)
    RETURN          reduce using rule 36 (CompSt -> { DefList StmtList } .)
    PRINT           reduce using rule 36 (CompSt -> { DefList StmtList } .)
    ;               reduce using rule 36 (CompSt -> { DefList StmtList } .)
    (               reduce using rule 36 (CompSt -> { DefList StmtList } .)
    ID              reduce using rule 36 (CompSt -> { DefList StmtList } .)
    NUMBER          reduce using rule 36 (CompSt -> { DefList StmtList } .)
    DECIMAL         reduce using rule 36 (CompSt -> { DefList StmtList } .)
    STRINGLITERAL   reduce using rule 36 (CompSt -> { DefList StmtList } .)
    !               reduce using rule 36 (CompSt -> { DefList StmtList } .)
    {               reduce using rule 36 (CompSt -> { DefList StmtList } .)
    IF              reduce using rule 36 (CompSt -> { DefList StmtList } .)
    WHILE           reduce using rule 36 (CompSt -> { DefList StmtList } .)
    *               reduce using rule 36 (CompSt -> { DefList StmtList } .)
    &               reduce using rule 36 (CompSt -> { DefList StmtList } .)
    -               reduce using rule 36 (CompSt -> { DefList StmtList } .)
    +               reduce using rule 36 (CompSt -> { DefList StmtList } .)
    PLUSSLF         reduce using rule 36 (CompSt -> { DefList StmtList } .)
    SUBSLF          reduce using rule 36 (CompSt -> { DefList StmtList } .)
    }               reduce using rule 36 (CompSt -> { DefList StmtList } .)
    ELSE            reduce using rule 36 (CompSt -> { DefList StmtList } .)


state 80

    (37) StmtList -> Stmt StmtList .

    }               reduce using rule 37 (StmtList -> Stmt StmtList .)


state 81

    (39) Stmt -> RETURN Exp . ;
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               shift and go to state 117
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

    RELOP                          shift and go to state 90

state 82

    (44) Stmt -> Exp ; .

    RETURN          reduce using rule 44 (Stmt -> Exp ; .)
    PRINT           reduce using rule 44 (Stmt -> Exp ; .)
    ;               reduce using rule 44 (Stmt -> Exp ; .)
    (               reduce using rule 44 (Stmt -> Exp ; .)
    ID              reduce using rule 44 (Stmt -> Exp ; .)
    NUMBER          reduce using rule 44 (Stmt -> Exp ; .)
    DECIMAL         reduce using rule 44 (Stmt -> Exp ; .)
    STRINGLITERAL   reduce using rule 44 (Stmt -> Exp ; .)
    !               reduce using rule 44 (Stmt -> Exp ; .)
    {               reduce using rule 44 (Stmt -> Exp ; .)
    IF              reduce using rule 44 (Stmt -> Exp ; .)
    WHILE           reduce using rule 44 (Stmt -> Exp ; .)
    *               reduce using rule 44 (Stmt -> Exp ; .)
    &               reduce using rule 44 (Stmt -> Exp ; .)
    -               reduce using rule 44 (Stmt -> Exp ; .)
    +               reduce using rule 44 (Stmt -> Exp ; .)
    PLUSSLF         reduce using rule 44 (Stmt -> Exp ; .)
    SUBSLF          reduce using rule 44 (Stmt -> Exp ; .)
    }               reduce using rule 44 (Stmt -> Exp ; .)
    ELSE            reduce using rule 44 (Stmt -> Exp ; .)


state 83

    (68) Exp -> Exp = . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 118
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 84

    (69) Exp -> Exp + . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 119
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 85

    (70) Exp -> Exp - . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 120
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 86

    (71) Exp -> Exp * . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 121
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 87

    (72) Exp -> Exp / . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 122
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 88

    (75) Exp -> Exp BOOLAND . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 123
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 89

    (76) Exp -> Exp BOOLOR . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 124
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 90

    (78) Exp -> Exp RELOP . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 125
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 91

    (79) Exp -> Exp [ . Exp ]
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 126
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 92

    (80) Exp -> Exp . . ID

    ID              shift and go to state 127


state 93

    (2) RELOP -> > .

    (               reduce using rule 2 (RELOP -> > .)
    ID              reduce using rule 2 (RELOP -> > .)
    NUMBER          reduce using rule 2 (RELOP -> > .)
    DECIMAL         reduce using rule 2 (RELOP -> > .)
    STRINGLITERAL   reduce using rule 2 (RELOP -> > .)
    !               reduce using rule 2 (RELOP -> > .)
    *               reduce using rule 2 (RELOP -> > .)
    &               reduce using rule 2 (RELOP -> > .)
    -               reduce using rule 2 (RELOP -> > .)
    +               reduce using rule 2 (RELOP -> > .)
    PLUSSLF         reduce using rule 2 (RELOP -> > .)
    SUBSLF          reduce using rule 2 (RELOP -> > .)


state 94

    (3) RELOP -> < .

    (               reduce using rule 3 (RELOP -> < .)
    ID              reduce using rule 3 (RELOP -> < .)
    NUMBER          reduce using rule 3 (RELOP -> < .)
    DECIMAL         reduce using rule 3 (RELOP -> < .)
    STRINGLITERAL   reduce using rule 3 (RELOP -> < .)
    !               reduce using rule 3 (RELOP -> < .)
    *               reduce using rule 3 (RELOP -> < .)
    &               reduce using rule 3 (RELOP -> < .)
    -               reduce using rule 3 (RELOP -> < .)
    +               reduce using rule 3 (RELOP -> < .)
    PLUSSLF         reduce using rule 3 (RELOP -> < .)
    SUBSLF          reduce using rule 3 (RELOP -> < .)


state 95

    (4) RELOP -> GRTREQL .

    (               reduce using rule 4 (RELOP -> GRTREQL .)
    ID              reduce using rule 4 (RELOP -> GRTREQL .)
    NUMBER          reduce using rule 4 (RELOP -> GRTREQL .)
    DECIMAL         reduce using rule 4 (RELOP -> GRTREQL .)
    STRINGLITERAL   reduce using rule 4 (RELOP -> GRTREQL .)
    !               reduce using rule 4 (RELOP -> GRTREQL .)
    *               reduce using rule 4 (RELOP -> GRTREQL .)
    &               reduce using rule 4 (RELOP -> GRTREQL .)
    -               reduce using rule 4 (RELOP -> GRTREQL .)
    +               reduce using rule 4 (RELOP -> GRTREQL .)
    PLUSSLF         reduce using rule 4 (RELOP -> GRTREQL .)
    SUBSLF          reduce using rule 4 (RELOP -> GRTREQL .)


state 96

    (5) RELOP -> LESSEQL .

    (               reduce using rule 5 (RELOP -> LESSEQL .)
    ID              reduce using rule 5 (RELOP -> LESSEQL .)
    NUMBER          reduce using rule 5 (RELOP -> LESSEQL .)
    DECIMAL         reduce using rule 5 (RELOP -> LESSEQL .)
    STRINGLITERAL   reduce using rule 5 (RELOP -> LESSEQL .)
    !               reduce using rule 5 (RELOP -> LESSEQL .)
    *               reduce using rule 5 (RELOP -> LESSEQL .)
    &               reduce using rule 5 (RELOP -> LESSEQL .)
    -               reduce using rule 5 (RELOP -> LESSEQL .)
    +               reduce using rule 5 (RELOP -> LESSEQL .)
    PLUSSLF         reduce using rule 5 (RELOP -> LESSEQL .)
    SUBSLF          reduce using rule 5 (RELOP -> LESSEQL .)


state 97

    (6) RELOP -> EQUAL .

    (               reduce using rule 6 (RELOP -> EQUAL .)
    ID              reduce using rule 6 (RELOP -> EQUAL .)
    NUMBER          reduce using rule 6 (RELOP -> EQUAL .)
    DECIMAL         reduce using rule 6 (RELOP -> EQUAL .)
    STRINGLITERAL   reduce using rule 6 (RELOP -> EQUAL .)
    !               reduce using rule 6 (RELOP -> EQUAL .)
    *               reduce using rule 6 (RELOP -> EQUAL .)
    &               reduce using rule 6 (RELOP -> EQUAL .)
    -               reduce using rule 6 (RELOP -> EQUAL .)
    +               reduce using rule 6 (RELOP -> EQUAL .)
    PLUSSLF         reduce using rule 6 (RELOP -> EQUAL .)
    SUBSLF          reduce using rule 6 (RELOP -> EQUAL .)


state 98

    (7) RELOP -> NEQUAL .

    (               reduce using rule 7 (RELOP -> NEQUAL .)
    ID              reduce using rule 7 (RELOP -> NEQUAL .)
    NUMBER          reduce using rule 7 (RELOP -> NEQUAL .)
    DECIMAL         reduce using rule 7 (RELOP -> NEQUAL .)
    STRINGLITERAL   reduce using rule 7 (RELOP -> NEQUAL .)
    !               reduce using rule 7 (RELOP -> NEQUAL .)
    *               reduce using rule 7 (RELOP -> NEQUAL .)
    &               reduce using rule 7 (RELOP -> NEQUAL .)
    -               reduce using rule 7 (RELOP -> NEQUAL .)
    +               reduce using rule 7 (RELOP -> NEQUAL .)
    PLUSSLF         reduce using rule 7 (RELOP -> NEQUAL .)
    SUBSLF          reduce using rule 7 (RELOP -> NEQUAL .)


state 99

    (40) Stmt -> PRINT Exp . ;
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               shift and go to state 128
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

    RELOP                          shift and go to state 90

state 100

    (63) Exp -> ( Exp . )
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    )               shift and go to state 129
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

    RELOP                          shift and go to state 90

state 101

    (62) PrefixedExp -> ( TYPE . ) Exp

    )               shift and go to state 130


state 102

    (81) FuncCall -> ID ( . Args )
    (82) FuncCall -> ID ( . )
    (83) Args -> . Exp , Args
    (84) Args -> . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    )               shift and go to state 132
    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Args                           shift and go to state 131
    Exp                            shift and go to state 133
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 103

    (59) PrefixedExp -> + Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 59 (PrefixedExp -> + Exp .)
    =               reduce using rule 59 (PrefixedExp -> + Exp .)
    +               reduce using rule 59 (PrefixedExp -> + Exp .)
    -               reduce using rule 59 (PrefixedExp -> + Exp .)
    *               reduce using rule 59 (PrefixedExp -> + Exp .)
    /               reduce using rule 59 (PrefixedExp -> + Exp .)
    BOOLAND         reduce using rule 59 (PrefixedExp -> + Exp .)
    BOOLOR          reduce using rule 59 (PrefixedExp -> + Exp .)
    [               reduce using rule 59 (PrefixedExp -> + Exp .)
    .               reduce using rule 59 (PrefixedExp -> + Exp .)
    >               reduce using rule 59 (PrefixedExp -> + Exp .)
    <               reduce using rule 59 (PrefixedExp -> + Exp .)
    GRTREQL         reduce using rule 59 (PrefixedExp -> + Exp .)
    LESSEQL         reduce using rule 59 (PrefixedExp -> + Exp .)
    EQUAL           reduce using rule 59 (PrefixedExp -> + Exp .)
    NEQUAL          reduce using rule 59 (PrefixedExp -> + Exp .)
    )               reduce using rule 59 (PrefixedExp -> + Exp .)
    ]               reduce using rule 59 (PrefixedExp -> + Exp .)
    ,               reduce using rule 59 (PrefixedExp -> + Exp .)

  ! =               [ shift and go to state 83 ]
  ! +               [ shift and go to state 84 ]
  ! -               [ shift and go to state 85 ]
  ! *               [ shift and go to state 86 ]
  ! /               [ shift and go to state 87 ]
  ! BOOLAND         [ shift and go to state 88 ]
  ! BOOLOR          [ shift and go to state 89 ]
  ! [               [ shift and go to state 91 ]
  ! .               [ shift and go to state 92 ]
  ! >               [ shift and go to state 93 ]
  ! <               [ shift and go to state 94 ]
  ! GRTREQL         [ shift and go to state 95 ]
  ! LESSEQL         [ shift and go to state 96 ]
  ! EQUAL           [ shift and go to state 97 ]
  ! NEQUAL          [ shift and go to state 98 ]

    RELOP                          shift and go to state 90

state 104

    (58) PrefixedExp -> - Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 58 (PrefixedExp -> - Exp .)
    =               reduce using rule 58 (PrefixedExp -> - Exp .)
    +               reduce using rule 58 (PrefixedExp -> - Exp .)
    -               reduce using rule 58 (PrefixedExp -> - Exp .)
    *               reduce using rule 58 (PrefixedExp -> - Exp .)
    /               reduce using rule 58 (PrefixedExp -> - Exp .)
    BOOLAND         reduce using rule 58 (PrefixedExp -> - Exp .)
    BOOLOR          reduce using rule 58 (PrefixedExp -> - Exp .)
    [               reduce using rule 58 (PrefixedExp -> - Exp .)
    .               reduce using rule 58 (PrefixedExp -> - Exp .)
    >               reduce using rule 58 (PrefixedExp -> - Exp .)
    <               reduce using rule 58 (PrefixedExp -> - Exp .)
    GRTREQL         reduce using rule 58 (PrefixedExp -> - Exp .)
    LESSEQL         reduce using rule 58 (PrefixedExp -> - Exp .)
    EQUAL           reduce using rule 58 (PrefixedExp -> - Exp .)
    NEQUAL          reduce using rule 58 (PrefixedExp -> - Exp .)
    )               reduce using rule 58 (PrefixedExp -> - Exp .)
    ]               reduce using rule 58 (PrefixedExp -> - Exp .)
    ,               reduce using rule 58 (PrefixedExp -> - Exp .)

  ! =               [ shift and go to state 83 ]
  ! +               [ shift and go to state 84 ]
  ! -               [ shift and go to state 85 ]
  ! *               [ shift and go to state 86 ]
  ! /               [ shift and go to state 87 ]
  ! BOOLAND         [ shift and go to state 88 ]
  ! BOOLOR          [ shift and go to state 89 ]
  ! [               [ shift and go to state 91 ]
  ! .               [ shift and go to state 92 ]
  ! >               [ shift and go to state 93 ]
  ! <               [ shift and go to state 94 ]
  ! GRTREQL         [ shift and go to state 95 ]
  ! LESSEQL         [ shift and go to state 96 ]
  ! EQUAL           [ shift and go to state 97 ]
  ! NEQUAL          [ shift and go to state 98 ]

    RELOP                          shift and go to state 90

state 105

    (56) PrefixedExp -> * Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 56 (PrefixedExp -> * Exp .)
    =               reduce using rule 56 (PrefixedExp -> * Exp .)
    +               reduce using rule 56 (PrefixedExp -> * Exp .)
    -               reduce using rule 56 (PrefixedExp -> * Exp .)
    *               reduce using rule 56 (PrefixedExp -> * Exp .)
    /               reduce using rule 56 (PrefixedExp -> * Exp .)
    BOOLAND         reduce using rule 56 (PrefixedExp -> * Exp .)
    BOOLOR          reduce using rule 56 (PrefixedExp -> * Exp .)
    [               reduce using rule 56 (PrefixedExp -> * Exp .)
    .               reduce using rule 56 (PrefixedExp -> * Exp .)
    >               reduce using rule 56 (PrefixedExp -> * Exp .)
    <               reduce using rule 56 (PrefixedExp -> * Exp .)
    GRTREQL         reduce using rule 56 (PrefixedExp -> * Exp .)
    LESSEQL         reduce using rule 56 (PrefixedExp -> * Exp .)
    EQUAL           reduce using rule 56 (PrefixedExp -> * Exp .)
    NEQUAL          reduce using rule 56 (PrefixedExp -> * Exp .)
    )               reduce using rule 56 (PrefixedExp -> * Exp .)
    ]               reduce using rule 56 (PrefixedExp -> * Exp .)
    ,               reduce using rule 56 (PrefixedExp -> * Exp .)

  ! =               [ shift and go to state 83 ]
  ! +               [ shift and go to state 84 ]
  ! -               [ shift and go to state 85 ]
  ! *               [ shift and go to state 86 ]
  ! /               [ shift and go to state 87 ]
  ! BOOLAND         [ shift and go to state 88 ]
  ! BOOLOR          [ shift and go to state 89 ]
  ! [               [ shift and go to state 91 ]
  ! .               [ shift and go to state 92 ]
  ! >               [ shift and go to state 93 ]
  ! <               [ shift and go to state 94 ]
  ! GRTREQL         [ shift and go to state 95 ]
  ! LESSEQL         [ shift and go to state 96 ]
  ! EQUAL           [ shift and go to state 97 ]
  ! NEQUAL          [ shift and go to state 98 ]

    RELOP                          shift and go to state 90

state 106

    (77) Exp -> ! Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for BOOLAND resolved as shift
  ! shift/reduce conflict for BOOLOR resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GRTREQL resolved as shift
  ! shift/reduce conflict for LESSEQL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
    ;               reduce using rule 77 (Exp -> ! Exp .)
    )               reduce using rule 77 (Exp -> ! Exp .)
    ]               reduce using rule 77 (Exp -> ! Exp .)
    ,               reduce using rule 77 (Exp -> ! Exp .)
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

  ! =               [ reduce using rule 77 (Exp -> ! Exp .) ]
  ! +               [ reduce using rule 77 (Exp -> ! Exp .) ]
  ! -               [ reduce using rule 77 (Exp -> ! Exp .) ]
  ! *               [ reduce using rule 77 (Exp -> ! Exp .) ]
  ! /               [ reduce using rule 77 (Exp -> ! Exp .) ]
  ! BOOLAND         [ reduce using rule 77 (Exp -> ! Exp .) ]
  ! BOOLOR          [ reduce using rule 77 (Exp -> ! Exp .) ]
  ! [               [ reduce using rule 77 (Exp -> ! Exp .) ]
  ! .               [ reduce using rule 77 (Exp -> ! Exp .) ]
  ! >               [ reduce using rule 77 (Exp -> ! Exp .) ]
  ! <               [ reduce using rule 77 (Exp -> ! Exp .) ]
  ! GRTREQL         [ reduce using rule 77 (Exp -> ! Exp .) ]
  ! LESSEQL         [ reduce using rule 77 (Exp -> ! Exp .) ]
  ! EQUAL           [ reduce using rule 77 (Exp -> ! Exp .) ]
  ! NEQUAL          [ reduce using rule 77 (Exp -> ! Exp .) ]

    RELOP                          shift and go to state 90

state 107

    (41) FlowCtrl -> IF ( . Exp ) Stmt
    (42) FlowCtrl -> IF ( . Exp ) Stmt ELSE Stmt
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 134
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 108

    (43) FlowCtrl -> WHILE ( . Exp ) Stmt
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 135
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 109

    (57) PrefixedExp -> & Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for BOOLAND resolved as shift
  ! shift/reduce conflict for BOOLOR resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GRTREQL resolved as shift
  ! shift/reduce conflict for LESSEQL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
    ;               reduce using rule 57 (PrefixedExp -> & Exp .)
    )               reduce using rule 57 (PrefixedExp -> & Exp .)
    ]               reduce using rule 57 (PrefixedExp -> & Exp .)
    ,               reduce using rule 57 (PrefixedExp -> & Exp .)
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

  ! =               [ reduce using rule 57 (PrefixedExp -> & Exp .) ]
  ! +               [ reduce using rule 57 (PrefixedExp -> & Exp .) ]
  ! -               [ reduce using rule 57 (PrefixedExp -> & Exp .) ]
  ! *               [ reduce using rule 57 (PrefixedExp -> & Exp .) ]
  ! /               [ reduce using rule 57 (PrefixedExp -> & Exp .) ]
  ! BOOLAND         [ reduce using rule 57 (PrefixedExp -> & Exp .) ]
  ! BOOLOR          [ reduce using rule 57 (PrefixedExp -> & Exp .) ]
  ! [               [ reduce using rule 57 (PrefixedExp -> & Exp .) ]
  ! .               [ reduce using rule 57 (PrefixedExp -> & Exp .) ]
  ! >               [ reduce using rule 57 (PrefixedExp -> & Exp .) ]
  ! <               [ reduce using rule 57 (PrefixedExp -> & Exp .) ]
  ! GRTREQL         [ reduce using rule 57 (PrefixedExp -> & Exp .) ]
  ! LESSEQL         [ reduce using rule 57 (PrefixedExp -> & Exp .) ]
  ! EQUAL           [ reduce using rule 57 (PrefixedExp -> & Exp .) ]
  ! NEQUAL          [ reduce using rule 57 (PrefixedExp -> & Exp .) ]

    RELOP                          shift and go to state 90

state 110

    (60) PrefixedExp -> PLUSSLF Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for BOOLAND resolved as shift
  ! shift/reduce conflict for BOOLOR resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GRTREQL resolved as shift
  ! shift/reduce conflict for LESSEQL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
    ;               reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .)
    )               reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .)
    ]               reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .)
    ,               reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .)
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

  ! =               [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]
  ! +               [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]
  ! -               [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]
  ! *               [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]
  ! /               [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]
  ! BOOLAND         [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]
  ! BOOLOR          [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]
  ! [               [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]
  ! .               [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]
  ! >               [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]
  ! <               [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]
  ! GRTREQL         [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]
  ! LESSEQL         [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]
  ! EQUAL           [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]
  ! NEQUAL          [ reduce using rule 60 (PrefixedExp -> PLUSSLF Exp .) ]

    RELOP                          shift and go to state 90

state 111

    (61) PrefixedExp -> SUBSLF Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for BOOLAND resolved as shift
  ! shift/reduce conflict for BOOLOR resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GRTREQL resolved as shift
  ! shift/reduce conflict for LESSEQL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
    ;               reduce using rule 61 (PrefixedExp -> SUBSLF Exp .)
    )               reduce using rule 61 (PrefixedExp -> SUBSLF Exp .)
    ]               reduce using rule 61 (PrefixedExp -> SUBSLF Exp .)
    ,               reduce using rule 61 (PrefixedExp -> SUBSLF Exp .)
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

  ! =               [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]
  ! +               [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]
  ! -               [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]
  ! *               [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]
  ! /               [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]
  ! BOOLAND         [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]
  ! BOOLOR          [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]
  ! [               [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]
  ! .               [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]
  ! >               [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]
  ! <               [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]
  ! GRTREQL         [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]
  ! LESSEQL         [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]
  ! EQUAL           [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]
  ! NEQUAL          [ reduce using rule 61 (PrefixedExp -> SUBSLF Exp .) ]

    RELOP                          shift and go to state 90

state 112

    (48) DefList -> Def ; DefList .

    RETURN          reduce using rule 48 (DefList -> Def ; DefList .)
    PRINT           reduce using rule 48 (DefList -> Def ; DefList .)
    ;               reduce using rule 48 (DefList -> Def ; DefList .)
    (               reduce using rule 48 (DefList -> Def ; DefList .)
    ID              reduce using rule 48 (DefList -> Def ; DefList .)
    NUMBER          reduce using rule 48 (DefList -> Def ; DefList .)
    DECIMAL         reduce using rule 48 (DefList -> Def ; DefList .)
    STRINGLITERAL   reduce using rule 48 (DefList -> Def ; DefList .)
    !               reduce using rule 48 (DefList -> Def ; DefList .)
    {               reduce using rule 48 (DefList -> Def ; DefList .)
    IF              reduce using rule 48 (DefList -> Def ; DefList .)
    WHILE           reduce using rule 48 (DefList -> Def ; DefList .)
    *               reduce using rule 48 (DefList -> Def ; DefList .)
    &               reduce using rule 48 (DefList -> Def ; DefList .)
    -               reduce using rule 48 (DefList -> Def ; DefList .)
    +               reduce using rule 48 (DefList -> Def ; DefList .)
    PLUSSLF         reduce using rule 48 (DefList -> Def ; DefList .)
    SUBSLF          reduce using rule 48 (DefList -> Def ; DefList .)
    }               reduce using rule 48 (DefList -> Def ; DefList .)


state 113

    (53) DecList -> DecList , Dec .

    ,               reduce using rule 53 (DecList -> DecList , Dec .)
    ;               reduce using rule 53 (DecList -> DecList , Dec .)


state 114

    (55) Dec -> VarDec = . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 136
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 115

    (24) StructSpecifier -> STRUCT OptTag { DefList } .

    ;               reduce using rule 24 (StructSpecifier -> STRUCT OptTag { DefList } .)
    ID              reduce using rule 24 (StructSpecifier -> STRUCT OptTag { DefList } .)


state 116

    (33) VarList -> ParamDec , VarList .

    )               reduce using rule 33 (VarList -> ParamDec , VarList .)


state 117

    (39) Stmt -> RETURN Exp ; .

    RETURN          reduce using rule 39 (Stmt -> RETURN Exp ; .)
    PRINT           reduce using rule 39 (Stmt -> RETURN Exp ; .)
    ;               reduce using rule 39 (Stmt -> RETURN Exp ; .)
    (               reduce using rule 39 (Stmt -> RETURN Exp ; .)
    ID              reduce using rule 39 (Stmt -> RETURN Exp ; .)
    NUMBER          reduce using rule 39 (Stmt -> RETURN Exp ; .)
    DECIMAL         reduce using rule 39 (Stmt -> RETURN Exp ; .)
    STRINGLITERAL   reduce using rule 39 (Stmt -> RETURN Exp ; .)
    !               reduce using rule 39 (Stmt -> RETURN Exp ; .)
    {               reduce using rule 39 (Stmt -> RETURN Exp ; .)
    IF              reduce using rule 39 (Stmt -> RETURN Exp ; .)
    WHILE           reduce using rule 39 (Stmt -> RETURN Exp ; .)
    *               reduce using rule 39 (Stmt -> RETURN Exp ; .)
    &               reduce using rule 39 (Stmt -> RETURN Exp ; .)
    -               reduce using rule 39 (Stmt -> RETURN Exp ; .)
    +               reduce using rule 39 (Stmt -> RETURN Exp ; .)
    PLUSSLF         reduce using rule 39 (Stmt -> RETURN Exp ; .)
    SUBSLF          reduce using rule 39 (Stmt -> RETURN Exp ; .)
    }               reduce using rule 39 (Stmt -> RETURN Exp ; .)
    ELSE            reduce using rule 39 (Stmt -> RETURN Exp ; .)


state 118

    (68) Exp -> Exp = Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for BOOLAND resolved as shift
  ! shift/reduce conflict for BOOLOR resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GRTREQL resolved as shift
  ! shift/reduce conflict for LESSEQL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
    ;               reduce using rule 68 (Exp -> Exp = Exp .)
    )               reduce using rule 68 (Exp -> Exp = Exp .)
    ]               reduce using rule 68 (Exp -> Exp = Exp .)
    ,               reduce using rule 68 (Exp -> Exp = Exp .)
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

  ! =               [ reduce using rule 68 (Exp -> Exp = Exp .) ]
  ! +               [ reduce using rule 68 (Exp -> Exp = Exp .) ]
  ! -               [ reduce using rule 68 (Exp -> Exp = Exp .) ]
  ! *               [ reduce using rule 68 (Exp -> Exp = Exp .) ]
  ! /               [ reduce using rule 68 (Exp -> Exp = Exp .) ]
  ! BOOLAND         [ reduce using rule 68 (Exp -> Exp = Exp .) ]
  ! BOOLOR          [ reduce using rule 68 (Exp -> Exp = Exp .) ]
  ! [               [ reduce using rule 68 (Exp -> Exp = Exp .) ]
  ! .               [ reduce using rule 68 (Exp -> Exp = Exp .) ]
  ! >               [ reduce using rule 68 (Exp -> Exp = Exp .) ]
  ! <               [ reduce using rule 68 (Exp -> Exp = Exp .) ]
  ! GRTREQL         [ reduce using rule 68 (Exp -> Exp = Exp .) ]
  ! LESSEQL         [ reduce using rule 68 (Exp -> Exp = Exp .) ]
  ! EQUAL           [ reduce using rule 68 (Exp -> Exp = Exp .) ]
  ! NEQUAL          [ reduce using rule 68 (Exp -> Exp = Exp .) ]

    RELOP                          shift and go to state 90

state 119

    (69) Exp -> Exp + Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 69 (Exp -> Exp + Exp .)
    =               reduce using rule 69 (Exp -> Exp + Exp .)
    +               reduce using rule 69 (Exp -> Exp + Exp .)
    -               reduce using rule 69 (Exp -> Exp + Exp .)
    BOOLAND         reduce using rule 69 (Exp -> Exp + Exp .)
    BOOLOR          reduce using rule 69 (Exp -> Exp + Exp .)
    [               reduce using rule 69 (Exp -> Exp + Exp .)
    .               reduce using rule 69 (Exp -> Exp + Exp .)
    >               reduce using rule 69 (Exp -> Exp + Exp .)
    <               reduce using rule 69 (Exp -> Exp + Exp .)
    GRTREQL         reduce using rule 69 (Exp -> Exp + Exp .)
    LESSEQL         reduce using rule 69 (Exp -> Exp + Exp .)
    EQUAL           reduce using rule 69 (Exp -> Exp + Exp .)
    NEQUAL          reduce using rule 69 (Exp -> Exp + Exp .)
    )               reduce using rule 69 (Exp -> Exp + Exp .)
    ]               reduce using rule 69 (Exp -> Exp + Exp .)
    ,               reduce using rule 69 (Exp -> Exp + Exp .)
    *               shift and go to state 86
    /               shift and go to state 87

  ! *               [ reduce using rule 69 (Exp -> Exp + Exp .) ]
  ! /               [ reduce using rule 69 (Exp -> Exp + Exp .) ]
  ! =               [ shift and go to state 83 ]
  ! +               [ shift and go to state 84 ]
  ! -               [ shift and go to state 85 ]
  ! BOOLAND         [ shift and go to state 88 ]
  ! BOOLOR          [ shift and go to state 89 ]
  ! [               [ shift and go to state 91 ]
  ! .               [ shift and go to state 92 ]
  ! >               [ shift and go to state 93 ]
  ! <               [ shift and go to state 94 ]
  ! GRTREQL         [ shift and go to state 95 ]
  ! LESSEQL         [ shift and go to state 96 ]
  ! EQUAL           [ shift and go to state 97 ]
  ! NEQUAL          [ shift and go to state 98 ]

    RELOP                          shift and go to state 90

state 120

    (70) Exp -> Exp - Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 70 (Exp -> Exp - Exp .)
    =               reduce using rule 70 (Exp -> Exp - Exp .)
    +               reduce using rule 70 (Exp -> Exp - Exp .)
    -               reduce using rule 70 (Exp -> Exp - Exp .)
    BOOLAND         reduce using rule 70 (Exp -> Exp - Exp .)
    BOOLOR          reduce using rule 70 (Exp -> Exp - Exp .)
    [               reduce using rule 70 (Exp -> Exp - Exp .)
    .               reduce using rule 70 (Exp -> Exp - Exp .)
    >               reduce using rule 70 (Exp -> Exp - Exp .)
    <               reduce using rule 70 (Exp -> Exp - Exp .)
    GRTREQL         reduce using rule 70 (Exp -> Exp - Exp .)
    LESSEQL         reduce using rule 70 (Exp -> Exp - Exp .)
    EQUAL           reduce using rule 70 (Exp -> Exp - Exp .)
    NEQUAL          reduce using rule 70 (Exp -> Exp - Exp .)
    )               reduce using rule 70 (Exp -> Exp - Exp .)
    ]               reduce using rule 70 (Exp -> Exp - Exp .)
    ,               reduce using rule 70 (Exp -> Exp - Exp .)
    *               shift and go to state 86
    /               shift and go to state 87

  ! *               [ reduce using rule 70 (Exp -> Exp - Exp .) ]
  ! /               [ reduce using rule 70 (Exp -> Exp - Exp .) ]
  ! =               [ shift and go to state 83 ]
  ! +               [ shift and go to state 84 ]
  ! -               [ shift and go to state 85 ]
  ! BOOLAND         [ shift and go to state 88 ]
  ! BOOLOR          [ shift and go to state 89 ]
  ! [               [ shift and go to state 91 ]
  ! .               [ shift and go to state 92 ]
  ! >               [ shift and go to state 93 ]
  ! <               [ shift and go to state 94 ]
  ! GRTREQL         [ shift and go to state 95 ]
  ! LESSEQL         [ shift and go to state 96 ]
  ! EQUAL           [ shift and go to state 97 ]
  ! NEQUAL          [ shift and go to state 98 ]

    RELOP                          shift and go to state 90

state 121

    (71) Exp -> Exp * Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 71 (Exp -> Exp * Exp .)
    =               reduce using rule 71 (Exp -> Exp * Exp .)
    +               reduce using rule 71 (Exp -> Exp * Exp .)
    -               reduce using rule 71 (Exp -> Exp * Exp .)
    *               reduce using rule 71 (Exp -> Exp * Exp .)
    /               reduce using rule 71 (Exp -> Exp * Exp .)
    BOOLAND         reduce using rule 71 (Exp -> Exp * Exp .)
    BOOLOR          reduce using rule 71 (Exp -> Exp * Exp .)
    [               reduce using rule 71 (Exp -> Exp * Exp .)
    .               reduce using rule 71 (Exp -> Exp * Exp .)
    >               reduce using rule 71 (Exp -> Exp * Exp .)
    <               reduce using rule 71 (Exp -> Exp * Exp .)
    GRTREQL         reduce using rule 71 (Exp -> Exp * Exp .)
    LESSEQL         reduce using rule 71 (Exp -> Exp * Exp .)
    EQUAL           reduce using rule 71 (Exp -> Exp * Exp .)
    NEQUAL          reduce using rule 71 (Exp -> Exp * Exp .)
    )               reduce using rule 71 (Exp -> Exp * Exp .)
    ]               reduce using rule 71 (Exp -> Exp * Exp .)
    ,               reduce using rule 71 (Exp -> Exp * Exp .)

  ! =               [ shift and go to state 83 ]
  ! +               [ shift and go to state 84 ]
  ! -               [ shift and go to state 85 ]
  ! *               [ shift and go to state 86 ]
  ! /               [ shift and go to state 87 ]
  ! BOOLAND         [ shift and go to state 88 ]
  ! BOOLOR          [ shift and go to state 89 ]
  ! [               [ shift and go to state 91 ]
  ! .               [ shift and go to state 92 ]
  ! >               [ shift and go to state 93 ]
  ! <               [ shift and go to state 94 ]
  ! GRTREQL         [ shift and go to state 95 ]
  ! LESSEQL         [ shift and go to state 96 ]
  ! EQUAL           [ shift and go to state 97 ]
  ! NEQUAL          [ shift and go to state 98 ]

    RELOP                          shift and go to state 90

state 122

    (72) Exp -> Exp / Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 72 (Exp -> Exp / Exp .)
    =               reduce using rule 72 (Exp -> Exp / Exp .)
    +               reduce using rule 72 (Exp -> Exp / Exp .)
    -               reduce using rule 72 (Exp -> Exp / Exp .)
    *               reduce using rule 72 (Exp -> Exp / Exp .)
    /               reduce using rule 72 (Exp -> Exp / Exp .)
    BOOLAND         reduce using rule 72 (Exp -> Exp / Exp .)
    BOOLOR          reduce using rule 72 (Exp -> Exp / Exp .)
    [               reduce using rule 72 (Exp -> Exp / Exp .)
    .               reduce using rule 72 (Exp -> Exp / Exp .)
    >               reduce using rule 72 (Exp -> Exp / Exp .)
    <               reduce using rule 72 (Exp -> Exp / Exp .)
    GRTREQL         reduce using rule 72 (Exp -> Exp / Exp .)
    LESSEQL         reduce using rule 72 (Exp -> Exp / Exp .)
    EQUAL           reduce using rule 72 (Exp -> Exp / Exp .)
    NEQUAL          reduce using rule 72 (Exp -> Exp / Exp .)
    )               reduce using rule 72 (Exp -> Exp / Exp .)
    ]               reduce using rule 72 (Exp -> Exp / Exp .)
    ,               reduce using rule 72 (Exp -> Exp / Exp .)

  ! =               [ shift and go to state 83 ]
  ! +               [ shift and go to state 84 ]
  ! -               [ shift and go to state 85 ]
  ! *               [ shift and go to state 86 ]
  ! /               [ shift and go to state 87 ]
  ! BOOLAND         [ shift and go to state 88 ]
  ! BOOLOR          [ shift and go to state 89 ]
  ! [               [ shift and go to state 91 ]
  ! .               [ shift and go to state 92 ]
  ! >               [ shift and go to state 93 ]
  ! <               [ shift and go to state 94 ]
  ! GRTREQL         [ shift and go to state 95 ]
  ! LESSEQL         [ shift and go to state 96 ]
  ! EQUAL           [ shift and go to state 97 ]
  ! NEQUAL          [ shift and go to state 98 ]

    RELOP                          shift and go to state 90

state 123

    (75) Exp -> Exp BOOLAND Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for BOOLAND resolved as shift
  ! shift/reduce conflict for BOOLOR resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GRTREQL resolved as shift
  ! shift/reduce conflict for LESSEQL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
    ;               reduce using rule 75 (Exp -> Exp BOOLAND Exp .)
    )               reduce using rule 75 (Exp -> Exp BOOLAND Exp .)
    ]               reduce using rule 75 (Exp -> Exp BOOLAND Exp .)
    ,               reduce using rule 75 (Exp -> Exp BOOLAND Exp .)
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

  ! =               [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]
  ! +               [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]
  ! -               [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]
  ! *               [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]
  ! /               [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]
  ! BOOLAND         [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]
  ! BOOLOR          [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]
  ! [               [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]
  ! .               [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]
  ! >               [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]
  ! <               [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]
  ! GRTREQL         [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]
  ! LESSEQL         [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]
  ! EQUAL           [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]
  ! NEQUAL          [ reduce using rule 75 (Exp -> Exp BOOLAND Exp .) ]

    RELOP                          shift and go to state 90

state 124

    (76) Exp -> Exp BOOLOR Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for BOOLAND resolved as shift
  ! shift/reduce conflict for BOOLOR resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GRTREQL resolved as shift
  ! shift/reduce conflict for LESSEQL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
    ;               reduce using rule 76 (Exp -> Exp BOOLOR Exp .)
    )               reduce using rule 76 (Exp -> Exp BOOLOR Exp .)
    ]               reduce using rule 76 (Exp -> Exp BOOLOR Exp .)
    ,               reduce using rule 76 (Exp -> Exp BOOLOR Exp .)
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

  ! =               [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]
  ! +               [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]
  ! -               [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]
  ! *               [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]
  ! /               [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]
  ! BOOLAND         [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]
  ! BOOLOR          [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]
  ! [               [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]
  ! .               [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]
  ! >               [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]
  ! <               [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]
  ! GRTREQL         [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]
  ! LESSEQL         [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]
  ! EQUAL           [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]
  ! NEQUAL          [ reduce using rule 76 (Exp -> Exp BOOLOR Exp .) ]

    RELOP                          shift and go to state 90

state 125

    (78) Exp -> Exp RELOP Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for BOOLAND resolved as shift
  ! shift/reduce conflict for BOOLOR resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GRTREQL resolved as shift
  ! shift/reduce conflict for LESSEQL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
    ;               reduce using rule 78 (Exp -> Exp RELOP Exp .)
    )               reduce using rule 78 (Exp -> Exp RELOP Exp .)
    ]               reduce using rule 78 (Exp -> Exp RELOP Exp .)
    ,               reduce using rule 78 (Exp -> Exp RELOP Exp .)
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

  ! =               [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]
  ! +               [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]
  ! -               [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]
  ! *               [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]
  ! /               [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]
  ! BOOLAND         [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]
  ! BOOLOR          [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]
  ! [               [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]
  ! .               [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]
  ! >               [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]
  ! <               [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]
  ! GRTREQL         [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]
  ! LESSEQL         [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]
  ! EQUAL           [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]
  ! NEQUAL          [ reduce using rule 78 (Exp -> Exp RELOP Exp .) ]

    RELOP                          shift and go to state 90

state 126

    (79) Exp -> Exp [ Exp . ]
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ]               shift and go to state 137
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

    RELOP                          shift and go to state 90

state 127

    (80) Exp -> Exp . ID .

    ;               reduce using rule 80 (Exp -> Exp . ID .)
    =               reduce using rule 80 (Exp -> Exp . ID .)
    +               reduce using rule 80 (Exp -> Exp . ID .)
    -               reduce using rule 80 (Exp -> Exp . ID .)
    *               reduce using rule 80 (Exp -> Exp . ID .)
    /               reduce using rule 80 (Exp -> Exp . ID .)
    BOOLAND         reduce using rule 80 (Exp -> Exp . ID .)
    BOOLOR          reduce using rule 80 (Exp -> Exp . ID .)
    [               reduce using rule 80 (Exp -> Exp . ID .)
    .               reduce using rule 80 (Exp -> Exp . ID .)
    >               reduce using rule 80 (Exp -> Exp . ID .)
    <               reduce using rule 80 (Exp -> Exp . ID .)
    GRTREQL         reduce using rule 80 (Exp -> Exp . ID .)
    LESSEQL         reduce using rule 80 (Exp -> Exp . ID .)
    EQUAL           reduce using rule 80 (Exp -> Exp . ID .)
    NEQUAL          reduce using rule 80 (Exp -> Exp . ID .)
    )               reduce using rule 80 (Exp -> Exp . ID .)
    ]               reduce using rule 80 (Exp -> Exp . ID .)
    ,               reduce using rule 80 (Exp -> Exp . ID .)


state 128

    (40) Stmt -> PRINT Exp ; .

    RETURN          reduce using rule 40 (Stmt -> PRINT Exp ; .)
    PRINT           reduce using rule 40 (Stmt -> PRINT Exp ; .)
    ;               reduce using rule 40 (Stmt -> PRINT Exp ; .)
    (               reduce using rule 40 (Stmt -> PRINT Exp ; .)
    ID              reduce using rule 40 (Stmt -> PRINT Exp ; .)
    NUMBER          reduce using rule 40 (Stmt -> PRINT Exp ; .)
    DECIMAL         reduce using rule 40 (Stmt -> PRINT Exp ; .)
    STRINGLITERAL   reduce using rule 40 (Stmt -> PRINT Exp ; .)
    !               reduce using rule 40 (Stmt -> PRINT Exp ; .)
    {               reduce using rule 40 (Stmt -> PRINT Exp ; .)
    IF              reduce using rule 40 (Stmt -> PRINT Exp ; .)
    WHILE           reduce using rule 40 (Stmt -> PRINT Exp ; .)
    *               reduce using rule 40 (Stmt -> PRINT Exp ; .)
    &               reduce using rule 40 (Stmt -> PRINT Exp ; .)
    -               reduce using rule 40 (Stmt -> PRINT Exp ; .)
    +               reduce using rule 40 (Stmt -> PRINT Exp ; .)
    PLUSSLF         reduce using rule 40 (Stmt -> PRINT Exp ; .)
    SUBSLF          reduce using rule 40 (Stmt -> PRINT Exp ; .)
    }               reduce using rule 40 (Stmt -> PRINT Exp ; .)
    ELSE            reduce using rule 40 (Stmt -> PRINT Exp ; .)


state 129

    (63) Exp -> ( Exp ) .

    ;               reduce using rule 63 (Exp -> ( Exp ) .)
    =               reduce using rule 63 (Exp -> ( Exp ) .)
    +               reduce using rule 63 (Exp -> ( Exp ) .)
    -               reduce using rule 63 (Exp -> ( Exp ) .)
    *               reduce using rule 63 (Exp -> ( Exp ) .)
    /               reduce using rule 63 (Exp -> ( Exp ) .)
    BOOLAND         reduce using rule 63 (Exp -> ( Exp ) .)
    BOOLOR          reduce using rule 63 (Exp -> ( Exp ) .)
    [               reduce using rule 63 (Exp -> ( Exp ) .)
    .               reduce using rule 63 (Exp -> ( Exp ) .)
    >               reduce using rule 63 (Exp -> ( Exp ) .)
    <               reduce using rule 63 (Exp -> ( Exp ) .)
    GRTREQL         reduce using rule 63 (Exp -> ( Exp ) .)
    LESSEQL         reduce using rule 63 (Exp -> ( Exp ) .)
    EQUAL           reduce using rule 63 (Exp -> ( Exp ) .)
    NEQUAL          reduce using rule 63 (Exp -> ( Exp ) .)
    )               reduce using rule 63 (Exp -> ( Exp ) .)
    ]               reduce using rule 63 (Exp -> ( Exp ) .)
    ,               reduce using rule 63 (Exp -> ( Exp ) .)


state 130

    (62) PrefixedExp -> ( TYPE ) . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 138
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 131

    (81) FuncCall -> ID ( Args . )

    )               shift and go to state 139


state 132

    (82) FuncCall -> ID ( ) .

    ;               reduce using rule 82 (FuncCall -> ID ( ) .)
    =               reduce using rule 82 (FuncCall -> ID ( ) .)
    +               reduce using rule 82 (FuncCall -> ID ( ) .)
    -               reduce using rule 82 (FuncCall -> ID ( ) .)
    *               reduce using rule 82 (FuncCall -> ID ( ) .)
    /               reduce using rule 82 (FuncCall -> ID ( ) .)
    BOOLAND         reduce using rule 82 (FuncCall -> ID ( ) .)
    BOOLOR          reduce using rule 82 (FuncCall -> ID ( ) .)
    [               reduce using rule 82 (FuncCall -> ID ( ) .)
    .               reduce using rule 82 (FuncCall -> ID ( ) .)
    >               reduce using rule 82 (FuncCall -> ID ( ) .)
    <               reduce using rule 82 (FuncCall -> ID ( ) .)
    GRTREQL         reduce using rule 82 (FuncCall -> ID ( ) .)
    LESSEQL         reduce using rule 82 (FuncCall -> ID ( ) .)
    EQUAL           reduce using rule 82 (FuncCall -> ID ( ) .)
    NEQUAL          reduce using rule 82 (FuncCall -> ID ( ) .)
    )               reduce using rule 82 (FuncCall -> ID ( ) .)
    ]               reduce using rule 82 (FuncCall -> ID ( ) .)
    ,               reduce using rule 82 (FuncCall -> ID ( ) .)


state 133

    (83) Args -> Exp . , Args
    (84) Args -> Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ,               shift and go to state 140
    )               reduce using rule 84 (Args -> Exp .)
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

    RELOP                          shift and go to state 90

state 134

    (41) FlowCtrl -> IF ( Exp . ) Stmt
    (42) FlowCtrl -> IF ( Exp . ) Stmt ELSE Stmt
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    )               shift and go to state 141
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

    RELOP                          shift and go to state 90

state 135

    (43) FlowCtrl -> WHILE ( Exp . ) Stmt
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    )               shift and go to state 142
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

    RELOP                          shift and go to state 90

state 136

    (55) Dec -> VarDec = Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ,               reduce using rule 55 (Dec -> VarDec = Exp .)
    ;               reduce using rule 55 (Dec -> VarDec = Exp .)
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

    RELOP                          shift and go to state 90

state 137

    (79) Exp -> Exp [ Exp ] .

    ;               reduce using rule 79 (Exp -> Exp [ Exp ] .)
    =               reduce using rule 79 (Exp -> Exp [ Exp ] .)
    +               reduce using rule 79 (Exp -> Exp [ Exp ] .)
    -               reduce using rule 79 (Exp -> Exp [ Exp ] .)
    *               reduce using rule 79 (Exp -> Exp [ Exp ] .)
    /               reduce using rule 79 (Exp -> Exp [ Exp ] .)
    BOOLAND         reduce using rule 79 (Exp -> Exp [ Exp ] .)
    BOOLOR          reduce using rule 79 (Exp -> Exp [ Exp ] .)
    [               reduce using rule 79 (Exp -> Exp [ Exp ] .)
    .               reduce using rule 79 (Exp -> Exp [ Exp ] .)
    >               reduce using rule 79 (Exp -> Exp [ Exp ] .)
    <               reduce using rule 79 (Exp -> Exp [ Exp ] .)
    GRTREQL         reduce using rule 79 (Exp -> Exp [ Exp ] .)
    LESSEQL         reduce using rule 79 (Exp -> Exp [ Exp ] .)
    EQUAL           reduce using rule 79 (Exp -> Exp [ Exp ] .)
    NEQUAL          reduce using rule 79 (Exp -> Exp [ Exp ] .)
    )               reduce using rule 79 (Exp -> Exp [ Exp ] .)
    ]               reduce using rule 79 (Exp -> Exp [ Exp ] .)
    ,               reduce using rule 79 (Exp -> Exp [ Exp ] .)


state 138

    (62) PrefixedExp -> ( TYPE ) Exp .
    (68) Exp -> Exp . = Exp
    (69) Exp -> Exp . + Exp
    (70) Exp -> Exp . - Exp
    (71) Exp -> Exp . * Exp
    (72) Exp -> Exp . / Exp
    (75) Exp -> Exp . BOOLAND Exp
    (76) Exp -> Exp . BOOLOR Exp
    (78) Exp -> Exp . RELOP Exp
    (79) Exp -> Exp . [ Exp ]
    (80) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for BOOLAND resolved as shift
  ! shift/reduce conflict for BOOLOR resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GRTREQL resolved as shift
  ! shift/reduce conflict for LESSEQL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
    ;               reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .)
    )               reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .)
    ]               reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .)
    ,               reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .)
    =               shift and go to state 83
    +               shift and go to state 84
    -               shift and go to state 85
    *               shift and go to state 86
    /               shift and go to state 87
    BOOLAND         shift and go to state 88
    BOOLOR          shift and go to state 89
    [               shift and go to state 91
    .               shift and go to state 92
    >               shift and go to state 93
    <               shift and go to state 94
    GRTREQL         shift and go to state 95
    LESSEQL         shift and go to state 96
    EQUAL           shift and go to state 97
    NEQUAL          shift and go to state 98

  ! =               [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]
  ! +               [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]
  ! -               [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]
  ! *               [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]
  ! /               [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]
  ! BOOLAND         [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]
  ! BOOLOR          [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]
  ! [               [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]
  ! .               [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]
  ! >               [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]
  ! <               [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]
  ! GRTREQL         [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]
  ! LESSEQL         [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]
  ! EQUAL           [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]
  ! NEQUAL          [ reduce using rule 62 (PrefixedExp -> ( TYPE ) Exp .) ]

    RELOP                          shift and go to state 90

state 139

    (81) FuncCall -> ID ( Args ) .

    ;               reduce using rule 81 (FuncCall -> ID ( Args ) .)
    =               reduce using rule 81 (FuncCall -> ID ( Args ) .)
    +               reduce using rule 81 (FuncCall -> ID ( Args ) .)
    -               reduce using rule 81 (FuncCall -> ID ( Args ) .)
    *               reduce using rule 81 (FuncCall -> ID ( Args ) .)
    /               reduce using rule 81 (FuncCall -> ID ( Args ) .)
    BOOLAND         reduce using rule 81 (FuncCall -> ID ( Args ) .)
    BOOLOR          reduce using rule 81 (FuncCall -> ID ( Args ) .)
    [               reduce using rule 81 (FuncCall -> ID ( Args ) .)
    .               reduce using rule 81 (FuncCall -> ID ( Args ) .)
    >               reduce using rule 81 (FuncCall -> ID ( Args ) .)
    <               reduce using rule 81 (FuncCall -> ID ( Args ) .)
    GRTREQL         reduce using rule 81 (FuncCall -> ID ( Args ) .)
    LESSEQL         reduce using rule 81 (FuncCall -> ID ( Args ) .)
    EQUAL           reduce using rule 81 (FuncCall -> ID ( Args ) .)
    NEQUAL          reduce using rule 81 (FuncCall -> ID ( Args ) .)
    )               reduce using rule 81 (FuncCall -> ID ( Args ) .)
    ]               reduce using rule 81 (FuncCall -> ID ( Args ) .)
    ,               reduce using rule 81 (FuncCall -> ID ( Args ) .)


state 140

    (83) Args -> Exp , . Args
    (83) Args -> . Exp , Args
    (84) Args -> . Exp
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 133
    Args                           shift and go to state 143
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 141

    (41) FlowCtrl -> IF ( Exp ) . Stmt
    (42) FlowCtrl -> IF ( Exp ) . Stmt ELSE Stmt
    (39) Stmt -> . RETURN Exp ;
    (40) Stmt -> . PRINT Exp ;
    (44) Stmt -> . Exp ;
    (45) Stmt -> . CompSt
    (46) Stmt -> . ;
    (47) Stmt -> . FlowCtrl
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (36) CompSt -> . { DefList StmtList }
    (41) FlowCtrl -> . IF ( Exp ) Stmt
    (42) FlowCtrl -> . IF ( Exp ) Stmt ELSE Stmt
    (43) FlowCtrl -> . WHILE ( Exp ) Stmt
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    RETURN          shift and go to state 47
    PRINT           shift and go to state 50
    ;               shift and go to state 49
    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    {               shift and go to state 22
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 48
    Stmt                           shift and go to state 144
    CompSt                         shift and go to state 51
    FlowCtrl                       shift and go to state 52
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 142

    (43) FlowCtrl -> WHILE ( Exp ) . Stmt
    (39) Stmt -> . RETURN Exp ;
    (40) Stmt -> . PRINT Exp ;
    (44) Stmt -> . Exp ;
    (45) Stmt -> . CompSt
    (46) Stmt -> . ;
    (47) Stmt -> . FlowCtrl
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (36) CompSt -> . { DefList StmtList }
    (41) FlowCtrl -> . IF ( Exp ) Stmt
    (42) FlowCtrl -> . IF ( Exp ) Stmt ELSE Stmt
    (43) FlowCtrl -> . WHILE ( Exp ) Stmt
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    RETURN          shift and go to state 47
    PRINT           shift and go to state 50
    ;               shift and go to state 49
    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    {               shift and go to state 22
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 48
    Stmt                           shift and go to state 145
    CompSt                         shift and go to state 51
    FlowCtrl                       shift and go to state 52
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 143

    (83) Args -> Exp , Args .

    )               reduce using rule 83 (Args -> Exp , Args .)


state 144

    (41) FlowCtrl -> IF ( Exp ) Stmt .
    (42) FlowCtrl -> IF ( Exp ) Stmt . ELSE Stmt

  ! shift/reduce conflict for ELSE resolved as shift
    RETURN          reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    PRINT           reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    ;               reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    (               reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    ID              reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    NUMBER          reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    DECIMAL         reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    STRINGLITERAL   reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    !               reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    {               reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    IF              reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    WHILE           reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    *               reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    &               reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    -               reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    +               reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    PLUSSLF         reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    SUBSLF          reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    }               reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .)
    ELSE            shift and go to state 146

  ! ELSE            [ reduce using rule 41 (FlowCtrl -> IF ( Exp ) Stmt .) ]


state 145

    (43) FlowCtrl -> WHILE ( Exp ) Stmt .

    RETURN          reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    PRINT           reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    ;               reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    (               reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    ID              reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    NUMBER          reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    DECIMAL         reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    STRINGLITERAL   reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    !               reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    {               reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    IF              reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    WHILE           reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    *               reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    &               reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    -               reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    +               reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    PLUSSLF         reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    SUBSLF          reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    }               reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    ELSE            reduce using rule 43 (FlowCtrl -> WHILE ( Exp ) Stmt .)


state 146

    (42) FlowCtrl -> IF ( Exp ) Stmt ELSE . Stmt
    (39) Stmt -> . RETURN Exp ;
    (40) Stmt -> . PRINT Exp ;
    (44) Stmt -> . Exp ;
    (45) Stmt -> . CompSt
    (46) Stmt -> . ;
    (47) Stmt -> . FlowCtrl
    (63) Exp -> . ( Exp )
    (64) Exp -> . ID
    (65) Exp -> . NUMBER
    (66) Exp -> . DECIMAL
    (67) Exp -> . STRINGLITERAL
    (68) Exp -> . Exp = Exp
    (69) Exp -> . Exp + Exp
    (70) Exp -> . Exp - Exp
    (71) Exp -> . Exp * Exp
    (72) Exp -> . Exp / Exp
    (73) Exp -> . FuncCall
    (74) Exp -> . PrefixedExp
    (75) Exp -> . Exp BOOLAND Exp
    (76) Exp -> . Exp BOOLOR Exp
    (77) Exp -> . ! Exp
    (78) Exp -> . Exp RELOP Exp
    (79) Exp -> . Exp [ Exp ]
    (80) Exp -> . Exp . ID
    (36) CompSt -> . { DefList StmtList }
    (41) FlowCtrl -> . IF ( Exp ) Stmt
    (42) FlowCtrl -> . IF ( Exp ) Stmt ELSE Stmt
    (43) FlowCtrl -> . WHILE ( Exp ) Stmt
    (81) FuncCall -> . ID ( Args )
    (82) FuncCall -> . ID ( )
    (56) PrefixedExp -> . * Exp
    (57) PrefixedExp -> . & Exp
    (58) PrefixedExp -> . - Exp
    (59) PrefixedExp -> . + Exp
    (60) PrefixedExp -> . PLUSSLF Exp
    (61) PrefixedExp -> . SUBSLF Exp
    (62) PrefixedExp -> . ( TYPE ) Exp

    RETURN          shift and go to state 47
    PRINT           shift and go to state 50
    ;               shift and go to state 49
    (               shift and go to state 53
    ID              shift and go to state 54
    NUMBER          shift and go to state 55
    DECIMAL         shift and go to state 56
    STRINGLITERAL   shift and go to state 57
    !               shift and go to state 63
    {               shift and go to state 22
    IF              shift and go to state 64
    WHILE           shift and go to state 65
    *               shift and go to state 60
    &               shift and go to state 66
    -               shift and go to state 59
    +               shift and go to state 58
    PLUSSLF         shift and go to state 67
    SUBSLF          shift and go to state 68

    Exp                            shift and go to state 48
    Stmt                           shift and go to state 147
    CompSt                         shift and go to state 51
    FlowCtrl                       shift and go to state 52
    FuncCall                       shift and go to state 61
    PrefixedExp                    shift and go to state 62

state 147

    (42) FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .

    RETURN          reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    PRINT           reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    ;               reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    (               reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    ID              reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    NUMBER          reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    DECIMAL         reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    STRINGLITERAL   reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    !               reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    {               reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    IF              reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    WHILE           reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    *               reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    &               reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    -               reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    +               reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    PLUSSLF         reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    SUBSLF          reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    }               reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    ELSE            reduce using rule 42 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for = in state 106 resolved as shift
WARNING: shift/reduce conflict for + in state 106 resolved as shift
WARNING: shift/reduce conflict for - in state 106 resolved as shift
WARNING: shift/reduce conflict for * in state 106 resolved as shift
WARNING: shift/reduce conflict for / in state 106 resolved as shift
WARNING: shift/reduce conflict for BOOLAND in state 106 resolved as shift
WARNING: shift/reduce conflict for BOOLOR in state 106 resolved as shift
WARNING: shift/reduce conflict for [ in state 106 resolved as shift
WARNING: shift/reduce conflict for . in state 106 resolved as shift
WARNING: shift/reduce conflict for > in state 106 resolved as shift
WARNING: shift/reduce conflict for < in state 106 resolved as shift
WARNING: shift/reduce conflict for GRTREQL in state 106 resolved as shift
WARNING: shift/reduce conflict for LESSEQL in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for = in state 109 resolved as shift
WARNING: shift/reduce conflict for + in state 109 resolved as shift
WARNING: shift/reduce conflict for - in state 109 resolved as shift
WARNING: shift/reduce conflict for * in state 109 resolved as shift
WARNING: shift/reduce conflict for / in state 109 resolved as shift
WARNING: shift/reduce conflict for BOOLAND in state 109 resolved as shift
WARNING: shift/reduce conflict for BOOLOR in state 109 resolved as shift
WARNING: shift/reduce conflict for [ in state 109 resolved as shift
WARNING: shift/reduce conflict for . in state 109 resolved as shift
WARNING: shift/reduce conflict for > in state 109 resolved as shift
WARNING: shift/reduce conflict for < in state 109 resolved as shift
WARNING: shift/reduce conflict for GRTREQL in state 109 resolved as shift
WARNING: shift/reduce conflict for LESSEQL in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for = in state 110 resolved as shift
WARNING: shift/reduce conflict for + in state 110 resolved as shift
WARNING: shift/reduce conflict for - in state 110 resolved as shift
WARNING: shift/reduce conflict for * in state 110 resolved as shift
WARNING: shift/reduce conflict for / in state 110 resolved as shift
WARNING: shift/reduce conflict for BOOLAND in state 110 resolved as shift
WARNING: shift/reduce conflict for BOOLOR in state 110 resolved as shift
WARNING: shift/reduce conflict for [ in state 110 resolved as shift
WARNING: shift/reduce conflict for . in state 110 resolved as shift
WARNING: shift/reduce conflict for > in state 110 resolved as shift
WARNING: shift/reduce conflict for < in state 110 resolved as shift
WARNING: shift/reduce conflict for GRTREQL in state 110 resolved as shift
WARNING: shift/reduce conflict for LESSEQL in state 110 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for = in state 111 resolved as shift
WARNING: shift/reduce conflict for + in state 111 resolved as shift
WARNING: shift/reduce conflict for - in state 111 resolved as shift
WARNING: shift/reduce conflict for * in state 111 resolved as shift
WARNING: shift/reduce conflict for / in state 111 resolved as shift
WARNING: shift/reduce conflict for BOOLAND in state 111 resolved as shift
WARNING: shift/reduce conflict for BOOLOR in state 111 resolved as shift
WARNING: shift/reduce conflict for [ in state 111 resolved as shift
WARNING: shift/reduce conflict for . in state 111 resolved as shift
WARNING: shift/reduce conflict for > in state 111 resolved as shift
WARNING: shift/reduce conflict for < in state 111 resolved as shift
WARNING: shift/reduce conflict for GRTREQL in state 111 resolved as shift
WARNING: shift/reduce conflict for LESSEQL in state 111 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for = in state 118 resolved as shift
WARNING: shift/reduce conflict for + in state 118 resolved as shift
WARNING: shift/reduce conflict for - in state 118 resolved as shift
WARNING: shift/reduce conflict for * in state 118 resolved as shift
WARNING: shift/reduce conflict for / in state 118 resolved as shift
WARNING: shift/reduce conflict for BOOLAND in state 118 resolved as shift
WARNING: shift/reduce conflict for BOOLOR in state 118 resolved as shift
WARNING: shift/reduce conflict for [ in state 118 resolved as shift
WARNING: shift/reduce conflict for . in state 118 resolved as shift
WARNING: shift/reduce conflict for > in state 118 resolved as shift
WARNING: shift/reduce conflict for < in state 118 resolved as shift
WARNING: shift/reduce conflict for GRTREQL in state 118 resolved as shift
WARNING: shift/reduce conflict for LESSEQL in state 118 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for = in state 123 resolved as shift
WARNING: shift/reduce conflict for + in state 123 resolved as shift
WARNING: shift/reduce conflict for - in state 123 resolved as shift
WARNING: shift/reduce conflict for * in state 123 resolved as shift
WARNING: shift/reduce conflict for / in state 123 resolved as shift
WARNING: shift/reduce conflict for BOOLAND in state 123 resolved as shift
WARNING: shift/reduce conflict for BOOLOR in state 123 resolved as shift
WARNING: shift/reduce conflict for [ in state 123 resolved as shift
WARNING: shift/reduce conflict for . in state 123 resolved as shift
WARNING: shift/reduce conflict for > in state 123 resolved as shift
WARNING: shift/reduce conflict for < in state 123 resolved as shift
WARNING: shift/reduce conflict for GRTREQL in state 123 resolved as shift
WARNING: shift/reduce conflict for LESSEQL in state 123 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for = in state 124 resolved as shift
WARNING: shift/reduce conflict for + in state 124 resolved as shift
WARNING: shift/reduce conflict for - in state 124 resolved as shift
WARNING: shift/reduce conflict for * in state 124 resolved as shift
WARNING: shift/reduce conflict for / in state 124 resolved as shift
WARNING: shift/reduce conflict for BOOLAND in state 124 resolved as shift
WARNING: shift/reduce conflict for BOOLOR in state 124 resolved as shift
WARNING: shift/reduce conflict for [ in state 124 resolved as shift
WARNING: shift/reduce conflict for . in state 124 resolved as shift
WARNING: shift/reduce conflict for > in state 124 resolved as shift
WARNING: shift/reduce conflict for < in state 124 resolved as shift
WARNING: shift/reduce conflict for GRTREQL in state 124 resolved as shift
WARNING: shift/reduce conflict for LESSEQL in state 124 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for = in state 125 resolved as shift
WARNING: shift/reduce conflict for + in state 125 resolved as shift
WARNING: shift/reduce conflict for - in state 125 resolved as shift
WARNING: shift/reduce conflict for * in state 125 resolved as shift
WARNING: shift/reduce conflict for / in state 125 resolved as shift
WARNING: shift/reduce conflict for BOOLAND in state 125 resolved as shift
WARNING: shift/reduce conflict for BOOLOR in state 125 resolved as shift
WARNING: shift/reduce conflict for [ in state 125 resolved as shift
WARNING: shift/reduce conflict for . in state 125 resolved as shift
WARNING: shift/reduce conflict for > in state 125 resolved as shift
WARNING: shift/reduce conflict for < in state 125 resolved as shift
WARNING: shift/reduce conflict for GRTREQL in state 125 resolved as shift
WARNING: shift/reduce conflict for LESSEQL in state 125 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for = in state 138 resolved as shift
WARNING: shift/reduce conflict for + in state 138 resolved as shift
WARNING: shift/reduce conflict for - in state 138 resolved as shift
WARNING: shift/reduce conflict for * in state 138 resolved as shift
WARNING: shift/reduce conflict for / in state 138 resolved as shift
WARNING: shift/reduce conflict for BOOLAND in state 138 resolved as shift
WARNING: shift/reduce conflict for BOOLOR in state 138 resolved as shift
WARNING: shift/reduce conflict for [ in state 138 resolved as shift
WARNING: shift/reduce conflict for . in state 138 resolved as shift
WARNING: shift/reduce conflict for > in state 138 resolved as shift
WARNING: shift/reduce conflict for < in state 138 resolved as shift
WARNING: shift/reduce conflict for GRTREQL in state 138 resolved as shift
WARNING: shift/reduce conflict for LESSEQL in state 138 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 138 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 138 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 144 resolved as shift
