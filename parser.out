Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ANDASSIGN
    AUTO
    BREAK
    CASE
    CONST
    CONTINUE
    DEFAULT
    DIVIDEASSIGN
    DO
    ENUM
    EXTERN
    FOR
    GOTO
    LSHIFT
    LSHIFTASSIGN
    MODASSIGN
    MULASSIGN
    ORASSIGN
    PLUSASSIGN
    REGISTER
    RSHIFT
    RSHIFTASSIGN
    SIGNED
    SIZEOF
    STATIC
    SUBASSIGN
    SWITCH
    TYPEDEF
    UNION
    UNSIGNED
    VOID
    VOLATILE
    XORASSIGN

Grammar

Rule 0     S' -> Program
Rule 1     EMPTY -> <empty>
Rule 2     RELOP -> >
Rule 3     RELOP -> <
Rule 4     RELOP -> GRTREQL
Rule 5     RELOP -> LESSEQL
Rule 6     RELOP -> EQUAL
Rule 7     RELOP -> NEQUAL
Rule 8     TYPE -> INT
Rule 9     TYPE -> SHORT
Rule 10    TYPE -> CHAR
Rule 11    TYPE -> LONG
Rule 12    TYPE -> FLOAT
Rule 13    TYPE -> DOUBLE
Rule 14    Program -> ExtDefList
Rule 15    ExtDefList -> ExtDef ExtDefList
Rule 16    ExtDefList -> EMPTY
Rule 17    FunHead -> Specifier FunDec
Rule 18    ExtDecHead -> Specifier VarDec
Rule 19    ExtDecList -> ExtDecList , VarDec
Rule 20    ExtDecList -> ExtDecHead
Rule 21    ExtDef -> ExtDecList ;
Rule 22    ExtDef -> Specifier ;
Rule 23    ExtDef -> FunHead CompSt
Rule 24    Specifier -> TYPE
Rule 25    Specifier -> StructSpecifier
Rule 26    StructSpecifier -> STRUCT OptTag { DefList }
Rule 27    StructSpecifier -> STRUCT Tag
Rule 28    OptTag -> ID
Rule 29    OptTag -> EMPTY
Rule 30    Tag -> ID
Rule 31    VarDec -> ID
Rule 32    VarDec -> ( VarDec )
Rule 33    VarDec -> VarDec [ NUMBER ]
Rule 34    VarDec -> FunDec
Rule 35    VarDec -> * VarDec
Rule 36    FunDec -> ID ( VarList )
Rule 37    FunDec -> ID ( )
Rule 38    VarList -> ParamDec , VarList
Rule 39    VarList -> ParamDec
Rule 40    ParamDec -> Specifier VarDec
Rule 41    CompSt -> { DefList StmtList }
Rule 42    StmtList -> Stmt StmtList
Rule 43    StmtList -> EMPTY
Rule 44    Stmt -> RETURN Exp ;
Rule 45    Stmt -> PRINT ( Exp ) ;
Rule 46    FlowCtrl -> IF ( Exp ) Stmt
Rule 47    FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt
Rule 48    FlowCtrl -> WHILE ( Exp ) Stmt
Rule 49    Stmt -> Exp ;
Rule 50    Stmt -> CompSt
Rule 51    Stmt -> ;
Rule 52    Stmt -> FlowCtrl
Rule 53    DefList -> Def ; DefList
Rule 54    DefList -> EMPTY
Rule 55    Def -> DecList
Rule 56    DecHead -> Specifier Dec
Rule 57    DecList -> DecHead
Rule 58    DecList -> DecList , Dec
Rule 59    Dec -> VarDec
Rule 60    Dec -> VarDec = Exp
Rule 61    PrefixedExp -> * Exp
Rule 62    PrefixedExp -> & Exp
Rule 63    SubTypeSpecifier -> EMPTY
Rule 64    SubTypeSpecifier -> ( SubTypeSpecifier )
Rule 65    SubTypeSpecifier -> * SubTypeSpecifier
Rule 66    SubTypeSpecifier -> SubTypeSpecifier [ NUMBER ]
Rule 67    SubTypeSpecifier -> SubTypeSpecifier ( TypeList )
Rule 68    SubTypeSpecifier -> SubTypeSpecifier ( )
Rule 69    TypeSpecifier -> TYPE SubTypeSpecifier
Rule 70    TypeList -> TypeSpecifier
Rule 71    TypeList -> TypeList , TypeSpecifier
Rule 72    PrefixedExp -> - Exp
Rule 73    PrefixedExp -> + Exp
Rule 74    PrefixedExp -> PLUSSLF Exp
Rule 75    PrefixedExp -> SUBSLF Exp
Rule 76    PrefixedExp -> ( TypeSpecifier ) Exp
Rule 77    Exp -> ( Exp )
Rule 78    Exp -> ID
Rule 79    Exp -> NUMBER
Rule 80    Exp -> DECIMAL
Rule 81    Exp -> STRINGLITERAL
Rule 82    Exp -> Exp = Exp
Rule 83    Exp -> Exp + Exp
Rule 84    Exp -> Exp - Exp
Rule 85    Exp -> Exp * Exp
Rule 86    Exp -> Exp / Exp
Rule 87    Exp -> FuncCall
Rule 88    Exp -> PrefixedExp
Rule 89    Exp -> Exp BOOLAND Exp
Rule 90    Exp -> Exp BOOLOR Exp
Rule 91    Exp -> ! Exp
Rule 92    Exp -> Exp RELOP Exp
Rule 93    Exp -> Exp [ Exp ]
Rule 94    Exp -> Exp . ID
Rule 95    FuncCall -> ID ( Args )
Rule 96    FuncCall -> ID ( )
Rule 97    Args -> Exp , Args
Rule 98    Args -> Exp

Terminals, with rules where they appear

!                    : 91
&                    : 62
(                    : 32 36 37 45 46 47 48 64 67 68 76 77 95 96
)                    : 32 36 37 45 46 47 48 64 67 68 76 77 95 96
*                    : 35 61 65 85
+                    : 73 83
,                    : 19 38 58 71 97
-                    : 72 84
.                    : 94
/                    : 86
;                    : 21 22 44 45 49 51 53
<                    : 3
=                    : 60 82
>                    : 2
ANDASSIGN            : 
AUTO                 : 
BOOLAND              : 89
BOOLOR               : 90
BREAK                : 
CASE                 : 
CHAR                 : 10
CONST                : 
CONTINUE             : 
DECIMAL              : 80
DEFAULT              : 
DIVIDEASSIGN         : 
DO                   : 
DOUBLE               : 13
ELSE                 : 47
ENUM                 : 
EQUAL                : 6
EXTERN               : 
FLOAT                : 12
FOR                  : 
GOTO                 : 
GRTREQL              : 4
ID                   : 28 30 31 36 37 78 94 95 96
IF                   : 46 47
INT                  : 8
LESSEQL              : 5
LONG                 : 11
LSHIFT               : 
LSHIFTASSIGN         : 
MODASSIGN            : 
MULASSIGN            : 
NEQUAL               : 7
NUMBER               : 33 66 79
ORASSIGN             : 
PLUSASSIGN           : 
PLUSSLF              : 74
PRINT                : 45
REGISTER             : 
RETURN               : 44
RSHIFT               : 
RSHIFTASSIGN         : 
SHORT                : 9
SIGNED               : 
SIZEOF               : 
STATIC               : 
STRINGLITERAL        : 81
STRUCT               : 26 27
SUBASSIGN            : 
SUBSLF               : 75
SWITCH               : 
TYPEDEF              : 
UNION                : 
UNSIGNED             : 
VOID                 : 
VOLATILE             : 
WHILE                : 48
XORASSIGN            : 
[                    : 33 66 93
]                    : 33 66 93
error                : 
{                    : 26 41
}                    : 26 41

Nonterminals, with rules where they appear

Args                 : 95 97
CompSt               : 23 50
Dec                  : 56 58
DecHead              : 57
DecList              : 55 58
Def                  : 53
DefList              : 26 41 53
EMPTY                : 16 29 43 54 63
Exp                  : 44 45 46 47 48 49 60 61 62 72 73 74 75 76 77 82 82 83 83 84 84 85 85 86 86 89 89 90 90 91 92 92 93 93 94 97 98
ExtDecHead           : 20
ExtDecList           : 19 21
ExtDef               : 15
ExtDefList           : 14 15
FlowCtrl             : 52
FunDec               : 17 34
FunHead              : 23
FuncCall             : 87
OptTag               : 26
ParamDec             : 38 39
PrefixedExp          : 88
Program              : 0
RELOP                : 92
Specifier            : 17 18 22 40 56
Stmt                 : 42 46 47 47 48
StmtList             : 41 42
StructSpecifier      : 25
SubTypeSpecifier     : 64 65 66 67 68 69
TYPE                 : 24 69
Tag                  : 27
TypeList             : 67 71
TypeSpecifier        : 70 71 76
VarDec               : 18 19 32 33 35 40 59 60
VarList              : 36 38

Parsing method: LALR

state 0

    (0) S' -> . Program
    (14) Program -> . ExtDefList
    (15) ExtDefList -> . ExtDef ExtDefList
    (16) ExtDefList -> . EMPTY
    (21) ExtDef -> . ExtDecList ;
    (22) ExtDef -> . Specifier ;
    (23) ExtDef -> . FunHead CompSt
    (1) EMPTY -> .
    (19) ExtDecList -> . ExtDecList , VarDec
    (20) ExtDecList -> . ExtDecHead
    (24) Specifier -> . TYPE
    (25) Specifier -> . StructSpecifier
    (17) FunHead -> . Specifier FunDec
    (18) ExtDecHead -> . Specifier VarDec
    (8) TYPE -> . INT
    (9) TYPE -> . SHORT
    (10) TYPE -> . CHAR
    (11) TYPE -> . LONG
    (12) TYPE -> . FLOAT
    (13) TYPE -> . DOUBLE
    (26) StructSpecifier -> . STRUCT OptTag { DefList }
    (27) StructSpecifier -> . STRUCT Tag

    $end            reduce using rule 1 (EMPTY -> .)
    INT             shift and go to state 11
    SHORT           shift and go to state 12
    CHAR            shift and go to state 13
    LONG            shift and go to state 14
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 16
    STRUCT          shift and go to state 17

    Program                        shift and go to state 1
    ExtDefList                     shift and go to state 2
    ExtDef                         shift and go to state 3
    EMPTY                          shift and go to state 4
    ExtDecList                     shift and go to state 5
    Specifier                      shift and go to state 6
    FunHead                        shift and go to state 7
    ExtDecHead                     shift and go to state 8
    TYPE                           shift and go to state 9
    StructSpecifier                shift and go to state 10

state 1

    (0) S' -> Program .



state 2

    (14) Program -> ExtDefList .

    $end            reduce using rule 14 (Program -> ExtDefList .)


state 3

    (15) ExtDefList -> ExtDef . ExtDefList
    (15) ExtDefList -> . ExtDef ExtDefList
    (16) ExtDefList -> . EMPTY
    (21) ExtDef -> . ExtDecList ;
    (22) ExtDef -> . Specifier ;
    (23) ExtDef -> . FunHead CompSt
    (1) EMPTY -> .
    (19) ExtDecList -> . ExtDecList , VarDec
    (20) ExtDecList -> . ExtDecHead
    (24) Specifier -> . TYPE
    (25) Specifier -> . StructSpecifier
    (17) FunHead -> . Specifier FunDec
    (18) ExtDecHead -> . Specifier VarDec
    (8) TYPE -> . INT
    (9) TYPE -> . SHORT
    (10) TYPE -> . CHAR
    (11) TYPE -> . LONG
    (12) TYPE -> . FLOAT
    (13) TYPE -> . DOUBLE
    (26) StructSpecifier -> . STRUCT OptTag { DefList }
    (27) StructSpecifier -> . STRUCT Tag

    $end            reduce using rule 1 (EMPTY -> .)
    INT             shift and go to state 11
    SHORT           shift and go to state 12
    CHAR            shift and go to state 13
    LONG            shift and go to state 14
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 16
    STRUCT          shift and go to state 17

    ExtDef                         shift and go to state 3
    ExtDefList                     shift and go to state 18
    EMPTY                          shift and go to state 4
    ExtDecList                     shift and go to state 5
    Specifier                      shift and go to state 6
    FunHead                        shift and go to state 7
    ExtDecHead                     shift and go to state 8
    TYPE                           shift and go to state 9
    StructSpecifier                shift and go to state 10

state 4

    (16) ExtDefList -> EMPTY .

    $end            reduce using rule 16 (ExtDefList -> EMPTY .)


state 5

    (21) ExtDef -> ExtDecList . ;
    (19) ExtDecList -> ExtDecList . , VarDec

    ;               shift and go to state 19
    ,               shift and go to state 20


state 6

    (22) ExtDef -> Specifier . ;
    (17) FunHead -> Specifier . FunDec
    (18) ExtDecHead -> Specifier . VarDec
    (36) FunDec -> . ID ( VarList )
    (37) FunDec -> . ID ( )
    (31) VarDec -> . ID
    (32) VarDec -> . ( VarDec )
    (33) VarDec -> . VarDec [ NUMBER ]
    (34) VarDec -> . FunDec
    (35) VarDec -> . * VarDec

    ;               shift and go to state 21
    ID              shift and go to state 24
    (               shift and go to state 25
    *               shift and go to state 26

    FunDec                         shift and go to state 22
    VarDec                         shift and go to state 23

state 7

    (23) ExtDef -> FunHead . CompSt
    (41) CompSt -> . { DefList StmtList }

    {               shift and go to state 28

    CompSt                         shift and go to state 27

state 8

    (20) ExtDecList -> ExtDecHead .

    ;               reduce using rule 20 (ExtDecList -> ExtDecHead .)
    ,               reduce using rule 20 (ExtDecList -> ExtDecHead .)


state 9

    (24) Specifier -> TYPE .

    ;               reduce using rule 24 (Specifier -> TYPE .)
    ID              reduce using rule 24 (Specifier -> TYPE .)
    (               reduce using rule 24 (Specifier -> TYPE .)
    *               reduce using rule 24 (Specifier -> TYPE .)


state 10

    (25) Specifier -> StructSpecifier .

    ;               reduce using rule 25 (Specifier -> StructSpecifier .)
    ID              reduce using rule 25 (Specifier -> StructSpecifier .)
    (               reduce using rule 25 (Specifier -> StructSpecifier .)
    *               reduce using rule 25 (Specifier -> StructSpecifier .)


state 11

    (8) TYPE -> INT .

    ;               reduce using rule 8 (TYPE -> INT .)
    ID              reduce using rule 8 (TYPE -> INT .)
    (               reduce using rule 8 (TYPE -> INT .)
    *               reduce using rule 8 (TYPE -> INT .)
    [               reduce using rule 8 (TYPE -> INT .)
    )               reduce using rule 8 (TYPE -> INT .)
    ,               reduce using rule 8 (TYPE -> INT .)


state 12

    (9) TYPE -> SHORT .

    ;               reduce using rule 9 (TYPE -> SHORT .)
    ID              reduce using rule 9 (TYPE -> SHORT .)
    (               reduce using rule 9 (TYPE -> SHORT .)
    *               reduce using rule 9 (TYPE -> SHORT .)
    [               reduce using rule 9 (TYPE -> SHORT .)
    )               reduce using rule 9 (TYPE -> SHORT .)
    ,               reduce using rule 9 (TYPE -> SHORT .)


state 13

    (10) TYPE -> CHAR .

    ;               reduce using rule 10 (TYPE -> CHAR .)
    ID              reduce using rule 10 (TYPE -> CHAR .)
    (               reduce using rule 10 (TYPE -> CHAR .)
    *               reduce using rule 10 (TYPE -> CHAR .)
    [               reduce using rule 10 (TYPE -> CHAR .)
    )               reduce using rule 10 (TYPE -> CHAR .)
    ,               reduce using rule 10 (TYPE -> CHAR .)


state 14

    (11) TYPE -> LONG .

    ;               reduce using rule 11 (TYPE -> LONG .)
    ID              reduce using rule 11 (TYPE -> LONG .)
    (               reduce using rule 11 (TYPE -> LONG .)
    *               reduce using rule 11 (TYPE -> LONG .)
    [               reduce using rule 11 (TYPE -> LONG .)
    )               reduce using rule 11 (TYPE -> LONG .)
    ,               reduce using rule 11 (TYPE -> LONG .)


state 15

    (12) TYPE -> FLOAT .

    ;               reduce using rule 12 (TYPE -> FLOAT .)
    ID              reduce using rule 12 (TYPE -> FLOAT .)
    (               reduce using rule 12 (TYPE -> FLOAT .)
    *               reduce using rule 12 (TYPE -> FLOAT .)
    [               reduce using rule 12 (TYPE -> FLOAT .)
    )               reduce using rule 12 (TYPE -> FLOAT .)
    ,               reduce using rule 12 (TYPE -> FLOAT .)


state 16

    (13) TYPE -> DOUBLE .

    ;               reduce using rule 13 (TYPE -> DOUBLE .)
    ID              reduce using rule 13 (TYPE -> DOUBLE .)
    (               reduce using rule 13 (TYPE -> DOUBLE .)
    *               reduce using rule 13 (TYPE -> DOUBLE .)
    [               reduce using rule 13 (TYPE -> DOUBLE .)
    )               reduce using rule 13 (TYPE -> DOUBLE .)
    ,               reduce using rule 13 (TYPE -> DOUBLE .)


state 17

    (26) StructSpecifier -> STRUCT . OptTag { DefList }
    (27) StructSpecifier -> STRUCT . Tag
    (28) OptTag -> . ID
    (29) OptTag -> . EMPTY
    (30) Tag -> . ID
    (1) EMPTY -> .

    ID              shift and go to state 31
    {               reduce using rule 1 (EMPTY -> .)

    OptTag                         shift and go to state 29
    Tag                            shift and go to state 30
    EMPTY                          shift and go to state 32

state 18

    (15) ExtDefList -> ExtDef ExtDefList .

    $end            reduce using rule 15 (ExtDefList -> ExtDef ExtDefList .)


state 19

    (21) ExtDef -> ExtDecList ; .

    INT             reduce using rule 21 (ExtDef -> ExtDecList ; .)
    SHORT           reduce using rule 21 (ExtDef -> ExtDecList ; .)
    CHAR            reduce using rule 21 (ExtDef -> ExtDecList ; .)
    LONG            reduce using rule 21 (ExtDef -> ExtDecList ; .)
    FLOAT           reduce using rule 21 (ExtDef -> ExtDecList ; .)
    DOUBLE          reduce using rule 21 (ExtDef -> ExtDecList ; .)
    STRUCT          reduce using rule 21 (ExtDef -> ExtDecList ; .)
    $end            reduce using rule 21 (ExtDef -> ExtDecList ; .)


state 20

    (19) ExtDecList -> ExtDecList , . VarDec
    (31) VarDec -> . ID
    (32) VarDec -> . ( VarDec )
    (33) VarDec -> . VarDec [ NUMBER ]
    (34) VarDec -> . FunDec
    (35) VarDec -> . * VarDec
    (36) FunDec -> . ID ( VarList )
    (37) FunDec -> . ID ( )

    ID              shift and go to state 34
    (               shift and go to state 25
    *               shift and go to state 26

    VarDec                         shift and go to state 33
    FunDec                         shift and go to state 35

state 21

    (22) ExtDef -> Specifier ; .

    INT             reduce using rule 22 (ExtDef -> Specifier ; .)
    SHORT           reduce using rule 22 (ExtDef -> Specifier ; .)
    CHAR            reduce using rule 22 (ExtDef -> Specifier ; .)
    LONG            reduce using rule 22 (ExtDef -> Specifier ; .)
    FLOAT           reduce using rule 22 (ExtDef -> Specifier ; .)
    DOUBLE          reduce using rule 22 (ExtDef -> Specifier ; .)
    STRUCT          reduce using rule 22 (ExtDef -> Specifier ; .)
    $end            reduce using rule 22 (ExtDef -> Specifier ; .)


state 22

    (17) FunHead -> Specifier FunDec .
    (34) VarDec -> FunDec .

    {               reduce using rule 17 (FunHead -> Specifier FunDec .)
    [               reduce using rule 34 (VarDec -> FunDec .)
    ;               reduce using rule 34 (VarDec -> FunDec .)
    ,               reduce using rule 34 (VarDec -> FunDec .)


state 23

    (18) ExtDecHead -> Specifier VarDec .
    (33) VarDec -> VarDec . [ NUMBER ]

    ;               reduce using rule 18 (ExtDecHead -> Specifier VarDec .)
    ,               reduce using rule 18 (ExtDecHead -> Specifier VarDec .)
    [               shift and go to state 36


state 24

    (36) FunDec -> ID . ( VarList )
    (37) FunDec -> ID . ( )
    (31) VarDec -> ID .

    (               shift and go to state 37
    [               reduce using rule 31 (VarDec -> ID .)
    ;               reduce using rule 31 (VarDec -> ID .)
    ,               reduce using rule 31 (VarDec -> ID .)


state 25

    (32) VarDec -> ( . VarDec )
    (31) VarDec -> . ID
    (32) VarDec -> . ( VarDec )
    (33) VarDec -> . VarDec [ NUMBER ]
    (34) VarDec -> . FunDec
    (35) VarDec -> . * VarDec
    (36) FunDec -> . ID ( VarList )
    (37) FunDec -> . ID ( )

    ID              shift and go to state 34
    (               shift and go to state 25
    *               shift and go to state 26

    VarDec                         shift and go to state 38
    FunDec                         shift and go to state 35

state 26

    (35) VarDec -> * . VarDec
    (31) VarDec -> . ID
    (32) VarDec -> . ( VarDec )
    (33) VarDec -> . VarDec [ NUMBER ]
    (34) VarDec -> . FunDec
    (35) VarDec -> . * VarDec
    (36) FunDec -> . ID ( VarList )
    (37) FunDec -> . ID ( )

    ID              shift and go to state 34
    (               shift and go to state 25
    *               shift and go to state 26

    VarDec                         shift and go to state 39
    FunDec                         shift and go to state 35

state 27

    (23) ExtDef -> FunHead CompSt .

    INT             reduce using rule 23 (ExtDef -> FunHead CompSt .)
    SHORT           reduce using rule 23 (ExtDef -> FunHead CompSt .)
    CHAR            reduce using rule 23 (ExtDef -> FunHead CompSt .)
    LONG            reduce using rule 23 (ExtDef -> FunHead CompSt .)
    FLOAT           reduce using rule 23 (ExtDef -> FunHead CompSt .)
    DOUBLE          reduce using rule 23 (ExtDef -> FunHead CompSt .)
    STRUCT          reduce using rule 23 (ExtDef -> FunHead CompSt .)
    $end            reduce using rule 23 (ExtDef -> FunHead CompSt .)


state 28

    (41) CompSt -> { . DefList StmtList }
    (53) DefList -> . Def ; DefList
    (54) DefList -> . EMPTY
    (55) Def -> . DecList
    (1) EMPTY -> .
    (57) DecList -> . DecHead
    (58) DecList -> . DecList , Dec
    (56) DecHead -> . Specifier Dec
    (24) Specifier -> . TYPE
    (25) Specifier -> . StructSpecifier
    (8) TYPE -> . INT
    (9) TYPE -> . SHORT
    (10) TYPE -> . CHAR
    (11) TYPE -> . LONG
    (12) TYPE -> . FLOAT
    (13) TYPE -> . DOUBLE
    (26) StructSpecifier -> . STRUCT OptTag { DefList }
    (27) StructSpecifier -> . STRUCT Tag

    RETURN          reduce using rule 1 (EMPTY -> .)
    PRINT           reduce using rule 1 (EMPTY -> .)
    ;               reduce using rule 1 (EMPTY -> .)
    (               reduce using rule 1 (EMPTY -> .)
    ID              reduce using rule 1 (EMPTY -> .)
    NUMBER          reduce using rule 1 (EMPTY -> .)
    DECIMAL         reduce using rule 1 (EMPTY -> .)
    STRINGLITERAL   reduce using rule 1 (EMPTY -> .)
    !               reduce using rule 1 (EMPTY -> .)
    {               reduce using rule 1 (EMPTY -> .)
    IF              reduce using rule 1 (EMPTY -> .)
    WHILE           reduce using rule 1 (EMPTY -> .)
    *               reduce using rule 1 (EMPTY -> .)
    &               reduce using rule 1 (EMPTY -> .)
    -               reduce using rule 1 (EMPTY -> .)
    +               reduce using rule 1 (EMPTY -> .)
    PLUSSLF         reduce using rule 1 (EMPTY -> .)
    SUBSLF          reduce using rule 1 (EMPTY -> .)
    }               reduce using rule 1 (EMPTY -> .)
    INT             shift and go to state 11
    SHORT           shift and go to state 12
    CHAR            shift and go to state 13
    LONG            shift and go to state 14
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 16
    STRUCT          shift and go to state 17

    DefList                        shift and go to state 40
    Def                            shift and go to state 41
    EMPTY                          shift and go to state 42
    DecList                        shift and go to state 43
    DecHead                        shift and go to state 44
    Specifier                      shift and go to state 45
    TYPE                           shift and go to state 9
    StructSpecifier                shift and go to state 10

state 29

    (26) StructSpecifier -> STRUCT OptTag . { DefList }

    {               shift and go to state 46


state 30

    (27) StructSpecifier -> STRUCT Tag .

    ;               reduce using rule 27 (StructSpecifier -> STRUCT Tag .)
    ID              reduce using rule 27 (StructSpecifier -> STRUCT Tag .)
    (               reduce using rule 27 (StructSpecifier -> STRUCT Tag .)
    *               reduce using rule 27 (StructSpecifier -> STRUCT Tag .)


state 31

    (28) OptTag -> ID .
    (30) Tag -> ID .

    {               reduce using rule 28 (OptTag -> ID .)
    ;               reduce using rule 30 (Tag -> ID .)
    ID              reduce using rule 30 (Tag -> ID .)
    (               reduce using rule 30 (Tag -> ID .)
    *               reduce using rule 30 (Tag -> ID .)


state 32

    (29) OptTag -> EMPTY .

    {               reduce using rule 29 (OptTag -> EMPTY .)


state 33

    (19) ExtDecList -> ExtDecList , VarDec .
    (33) VarDec -> VarDec . [ NUMBER ]

    ;               reduce using rule 19 (ExtDecList -> ExtDecList , VarDec .)
    ,               reduce using rule 19 (ExtDecList -> ExtDecList , VarDec .)
    [               shift and go to state 36


state 34

    (31) VarDec -> ID .
    (36) FunDec -> ID . ( VarList )
    (37) FunDec -> ID . ( )

    [               reduce using rule 31 (VarDec -> ID .)
    ;               reduce using rule 31 (VarDec -> ID .)
    ,               reduce using rule 31 (VarDec -> ID .)
    )               reduce using rule 31 (VarDec -> ID .)
    =               reduce using rule 31 (VarDec -> ID .)
    (               shift and go to state 37


state 35

    (34) VarDec -> FunDec .

    [               reduce using rule 34 (VarDec -> FunDec .)
    ;               reduce using rule 34 (VarDec -> FunDec .)
    ,               reduce using rule 34 (VarDec -> FunDec .)
    )               reduce using rule 34 (VarDec -> FunDec .)
    =               reduce using rule 34 (VarDec -> FunDec .)


state 36

    (33) VarDec -> VarDec [ . NUMBER ]

    NUMBER          shift and go to state 47


state 37

    (36) FunDec -> ID ( . VarList )
    (37) FunDec -> ID ( . )
    (38) VarList -> . ParamDec , VarList
    (39) VarList -> . ParamDec
    (40) ParamDec -> . Specifier VarDec
    (24) Specifier -> . TYPE
    (25) Specifier -> . StructSpecifier
    (8) TYPE -> . INT
    (9) TYPE -> . SHORT
    (10) TYPE -> . CHAR
    (11) TYPE -> . LONG
    (12) TYPE -> . FLOAT
    (13) TYPE -> . DOUBLE
    (26) StructSpecifier -> . STRUCT OptTag { DefList }
    (27) StructSpecifier -> . STRUCT Tag

    )               shift and go to state 49
    INT             shift and go to state 11
    SHORT           shift and go to state 12
    CHAR            shift and go to state 13
    LONG            shift and go to state 14
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 16
    STRUCT          shift and go to state 17

    VarList                        shift and go to state 48
    ParamDec                       shift and go to state 50
    Specifier                      shift and go to state 51
    TYPE                           shift and go to state 9
    StructSpecifier                shift and go to state 10

state 38

    (32) VarDec -> ( VarDec . )
    (33) VarDec -> VarDec . [ NUMBER ]

    )               shift and go to state 52
    [               shift and go to state 36


state 39

    (35) VarDec -> * VarDec .
    (33) VarDec -> VarDec . [ NUMBER ]

    [               reduce using rule 35 (VarDec -> * VarDec .)
    ;               reduce using rule 35 (VarDec -> * VarDec .)
    ,               reduce using rule 35 (VarDec -> * VarDec .)
    )               reduce using rule 35 (VarDec -> * VarDec .)
    =               reduce using rule 35 (VarDec -> * VarDec .)

  ! [               [ shift and go to state 36 ]


state 40

    (41) CompSt -> { DefList . StmtList }
    (42) StmtList -> . Stmt StmtList
    (43) StmtList -> . EMPTY
    (44) Stmt -> . RETURN Exp ;
    (45) Stmt -> . PRINT ( Exp ) ;
    (49) Stmt -> . Exp ;
    (50) Stmt -> . CompSt
    (51) Stmt -> . ;
    (52) Stmt -> . FlowCtrl
    (1) EMPTY -> .
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (41) CompSt -> . { DefList StmtList }
    (46) FlowCtrl -> . IF ( Exp ) Stmt
    (47) FlowCtrl -> . IF ( Exp ) Stmt ELSE Stmt
    (48) FlowCtrl -> . WHILE ( Exp ) Stmt
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    RETURN          shift and go to state 56
    PRINT           shift and go to state 59
    ;               shift and go to state 58
    }               reduce using rule 1 (EMPTY -> .)
    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    {               shift and go to state 28
    IF              shift and go to state 73
    WHILE           shift and go to state 74
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    StmtList                       shift and go to state 53
    Stmt                           shift and go to state 54
    EMPTY                          shift and go to state 55
    Exp                            shift and go to state 57
    CompSt                         shift and go to state 61
    FlowCtrl                       shift and go to state 62
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 41

    (53) DefList -> Def . ; DefList

    ;               shift and go to state 78


state 42

    (54) DefList -> EMPTY .

    RETURN          reduce using rule 54 (DefList -> EMPTY .)
    PRINT           reduce using rule 54 (DefList -> EMPTY .)
    ;               reduce using rule 54 (DefList -> EMPTY .)
    (               reduce using rule 54 (DefList -> EMPTY .)
    ID              reduce using rule 54 (DefList -> EMPTY .)
    NUMBER          reduce using rule 54 (DefList -> EMPTY .)
    DECIMAL         reduce using rule 54 (DefList -> EMPTY .)
    STRINGLITERAL   reduce using rule 54 (DefList -> EMPTY .)
    !               reduce using rule 54 (DefList -> EMPTY .)
    {               reduce using rule 54 (DefList -> EMPTY .)
    IF              reduce using rule 54 (DefList -> EMPTY .)
    WHILE           reduce using rule 54 (DefList -> EMPTY .)
    *               reduce using rule 54 (DefList -> EMPTY .)
    &               reduce using rule 54 (DefList -> EMPTY .)
    -               reduce using rule 54 (DefList -> EMPTY .)
    +               reduce using rule 54 (DefList -> EMPTY .)
    PLUSSLF         reduce using rule 54 (DefList -> EMPTY .)
    SUBSLF          reduce using rule 54 (DefList -> EMPTY .)
    }               reduce using rule 54 (DefList -> EMPTY .)


state 43

    (55) Def -> DecList .
    (58) DecList -> DecList . , Dec

    ;               reduce using rule 55 (Def -> DecList .)
    ,               shift and go to state 79


state 44

    (57) DecList -> DecHead .

    ,               reduce using rule 57 (DecList -> DecHead .)
    ;               reduce using rule 57 (DecList -> DecHead .)


state 45

    (56) DecHead -> Specifier . Dec
    (59) Dec -> . VarDec
    (60) Dec -> . VarDec = Exp
    (31) VarDec -> . ID
    (32) VarDec -> . ( VarDec )
    (33) VarDec -> . VarDec [ NUMBER ]
    (34) VarDec -> . FunDec
    (35) VarDec -> . * VarDec
    (36) FunDec -> . ID ( VarList )
    (37) FunDec -> . ID ( )

    ID              shift and go to state 34
    (               shift and go to state 25
    *               shift and go to state 26

    Dec                            shift and go to state 80
    VarDec                         shift and go to state 81
    FunDec                         shift and go to state 35

state 46

    (26) StructSpecifier -> STRUCT OptTag { . DefList }
    (53) DefList -> . Def ; DefList
    (54) DefList -> . EMPTY
    (55) Def -> . DecList
    (1) EMPTY -> .
    (57) DecList -> . DecHead
    (58) DecList -> . DecList , Dec
    (56) DecHead -> . Specifier Dec
    (24) Specifier -> . TYPE
    (25) Specifier -> . StructSpecifier
    (8) TYPE -> . INT
    (9) TYPE -> . SHORT
    (10) TYPE -> . CHAR
    (11) TYPE -> . LONG
    (12) TYPE -> . FLOAT
    (13) TYPE -> . DOUBLE
    (26) StructSpecifier -> . STRUCT OptTag { DefList }
    (27) StructSpecifier -> . STRUCT Tag

    }               reduce using rule 1 (EMPTY -> .)
    INT             shift and go to state 11
    SHORT           shift and go to state 12
    CHAR            shift and go to state 13
    LONG            shift and go to state 14
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 16
    STRUCT          shift and go to state 17

    DefList                        shift and go to state 82
    Def                            shift and go to state 41
    EMPTY                          shift and go to state 42
    DecList                        shift and go to state 43
    DecHead                        shift and go to state 44
    Specifier                      shift and go to state 45
    TYPE                           shift and go to state 9
    StructSpecifier                shift and go to state 10

state 47

    (33) VarDec -> VarDec [ NUMBER . ]

    ]               shift and go to state 83


state 48

    (36) FunDec -> ID ( VarList . )

    )               shift and go to state 84


state 49

    (37) FunDec -> ID ( ) .

    {               reduce using rule 37 (FunDec -> ID ( ) .)
    [               reduce using rule 37 (FunDec -> ID ( ) .)
    ;               reduce using rule 37 (FunDec -> ID ( ) .)
    ,               reduce using rule 37 (FunDec -> ID ( ) .)
    )               reduce using rule 37 (FunDec -> ID ( ) .)
    =               reduce using rule 37 (FunDec -> ID ( ) .)


state 50

    (38) VarList -> ParamDec . , VarList
    (39) VarList -> ParamDec .

    ,               shift and go to state 85
    )               reduce using rule 39 (VarList -> ParamDec .)


state 51

    (40) ParamDec -> Specifier . VarDec
    (31) VarDec -> . ID
    (32) VarDec -> . ( VarDec )
    (33) VarDec -> . VarDec [ NUMBER ]
    (34) VarDec -> . FunDec
    (35) VarDec -> . * VarDec
    (36) FunDec -> . ID ( VarList )
    (37) FunDec -> . ID ( )

    ID              shift and go to state 34
    (               shift and go to state 25
    *               shift and go to state 26

    VarDec                         shift and go to state 86
    FunDec                         shift and go to state 35

state 52

    (32) VarDec -> ( VarDec ) .

    [               reduce using rule 32 (VarDec -> ( VarDec ) .)
    ;               reduce using rule 32 (VarDec -> ( VarDec ) .)
    ,               reduce using rule 32 (VarDec -> ( VarDec ) .)
    )               reduce using rule 32 (VarDec -> ( VarDec ) .)
    =               reduce using rule 32 (VarDec -> ( VarDec ) .)


state 53

    (41) CompSt -> { DefList StmtList . }

    }               shift and go to state 87


state 54

    (42) StmtList -> Stmt . StmtList
    (42) StmtList -> . Stmt StmtList
    (43) StmtList -> . EMPTY
    (44) Stmt -> . RETURN Exp ;
    (45) Stmt -> . PRINT ( Exp ) ;
    (49) Stmt -> . Exp ;
    (50) Stmt -> . CompSt
    (51) Stmt -> . ;
    (52) Stmt -> . FlowCtrl
    (1) EMPTY -> .
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (41) CompSt -> . { DefList StmtList }
    (46) FlowCtrl -> . IF ( Exp ) Stmt
    (47) FlowCtrl -> . IF ( Exp ) Stmt ELSE Stmt
    (48) FlowCtrl -> . WHILE ( Exp ) Stmt
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    RETURN          shift and go to state 56
    PRINT           shift and go to state 59
    ;               shift and go to state 58
    }               reduce using rule 1 (EMPTY -> .)
    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    {               shift and go to state 28
    IF              shift and go to state 73
    WHILE           shift and go to state 74
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Stmt                           shift and go to state 54
    StmtList                       shift and go to state 88
    EMPTY                          shift and go to state 55
    Exp                            shift and go to state 57
    CompSt                         shift and go to state 61
    FlowCtrl                       shift and go to state 62
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 55

    (43) StmtList -> EMPTY .

    }               reduce using rule 43 (StmtList -> EMPTY .)


state 56

    (44) Stmt -> RETURN . Exp ;
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 89
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 57

    (49) Stmt -> Exp . ;
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               shift and go to state 90
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95
    BOOLAND         shift and go to state 96
    BOOLOR          shift and go to state 97
    [               shift and go to state 99
    .               shift and go to state 100
    >               shift and go to state 101
    <               shift and go to state 102
    GRTREQL         shift and go to state 103
    LESSEQL         shift and go to state 104
    EQUAL           shift and go to state 105
    NEQUAL          shift and go to state 106

    RELOP                          shift and go to state 98

state 58

    (51) Stmt -> ; .

    RETURN          reduce using rule 51 (Stmt -> ; .)
    PRINT           reduce using rule 51 (Stmt -> ; .)
    ;               reduce using rule 51 (Stmt -> ; .)
    (               reduce using rule 51 (Stmt -> ; .)
    ID              reduce using rule 51 (Stmt -> ; .)
    NUMBER          reduce using rule 51 (Stmt -> ; .)
    DECIMAL         reduce using rule 51 (Stmt -> ; .)
    STRINGLITERAL   reduce using rule 51 (Stmt -> ; .)
    !               reduce using rule 51 (Stmt -> ; .)
    {               reduce using rule 51 (Stmt -> ; .)
    IF              reduce using rule 51 (Stmt -> ; .)
    WHILE           reduce using rule 51 (Stmt -> ; .)
    *               reduce using rule 51 (Stmt -> ; .)
    &               reduce using rule 51 (Stmt -> ; .)
    -               reduce using rule 51 (Stmt -> ; .)
    +               reduce using rule 51 (Stmt -> ; .)
    PLUSSLF         reduce using rule 51 (Stmt -> ; .)
    SUBSLF          reduce using rule 51 (Stmt -> ; .)
    }               reduce using rule 51 (Stmt -> ; .)
    ELSE            reduce using rule 51 (Stmt -> ; .)


state 59

    (45) Stmt -> PRINT . ( Exp ) ;

    (               shift and go to state 107


state 60

    (77) Exp -> ( . Exp )
    (76) PrefixedExp -> ( . TypeSpecifier ) Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (69) TypeSpecifier -> . TYPE SubTypeSpecifier
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp
    (8) TYPE -> . INT
    (9) TYPE -> . SHORT
    (10) TYPE -> . CHAR
    (11) TYPE -> . LONG
    (12) TYPE -> . FLOAT
    (13) TYPE -> . DOUBLE

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77
    INT             shift and go to state 11
    SHORT           shift and go to state 12
    CHAR            shift and go to state 13
    LONG            shift and go to state 14
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 16

    Exp                            shift and go to state 108
    TypeSpecifier                  shift and go to state 109
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71
    TYPE                           shift and go to state 110

state 61

    (50) Stmt -> CompSt .

    RETURN          reduce using rule 50 (Stmt -> CompSt .)
    PRINT           reduce using rule 50 (Stmt -> CompSt .)
    ;               reduce using rule 50 (Stmt -> CompSt .)
    (               reduce using rule 50 (Stmt -> CompSt .)
    ID              reduce using rule 50 (Stmt -> CompSt .)
    NUMBER          reduce using rule 50 (Stmt -> CompSt .)
    DECIMAL         reduce using rule 50 (Stmt -> CompSt .)
    STRINGLITERAL   reduce using rule 50 (Stmt -> CompSt .)
    !               reduce using rule 50 (Stmt -> CompSt .)
    {               reduce using rule 50 (Stmt -> CompSt .)
    IF              reduce using rule 50 (Stmt -> CompSt .)
    WHILE           reduce using rule 50 (Stmt -> CompSt .)
    *               reduce using rule 50 (Stmt -> CompSt .)
    &               reduce using rule 50 (Stmt -> CompSt .)
    -               reduce using rule 50 (Stmt -> CompSt .)
    +               reduce using rule 50 (Stmt -> CompSt .)
    PLUSSLF         reduce using rule 50 (Stmt -> CompSt .)
    SUBSLF          reduce using rule 50 (Stmt -> CompSt .)
    }               reduce using rule 50 (Stmt -> CompSt .)
    ELSE            reduce using rule 50 (Stmt -> CompSt .)


state 62

    (52) Stmt -> FlowCtrl .

    RETURN          reduce using rule 52 (Stmt -> FlowCtrl .)
    PRINT           reduce using rule 52 (Stmt -> FlowCtrl .)
    ;               reduce using rule 52 (Stmt -> FlowCtrl .)
    (               reduce using rule 52 (Stmt -> FlowCtrl .)
    ID              reduce using rule 52 (Stmt -> FlowCtrl .)
    NUMBER          reduce using rule 52 (Stmt -> FlowCtrl .)
    DECIMAL         reduce using rule 52 (Stmt -> FlowCtrl .)
    STRINGLITERAL   reduce using rule 52 (Stmt -> FlowCtrl .)
    !               reduce using rule 52 (Stmt -> FlowCtrl .)
    {               reduce using rule 52 (Stmt -> FlowCtrl .)
    IF              reduce using rule 52 (Stmt -> FlowCtrl .)
    WHILE           reduce using rule 52 (Stmt -> FlowCtrl .)
    *               reduce using rule 52 (Stmt -> FlowCtrl .)
    &               reduce using rule 52 (Stmt -> FlowCtrl .)
    -               reduce using rule 52 (Stmt -> FlowCtrl .)
    +               reduce using rule 52 (Stmt -> FlowCtrl .)
    PLUSSLF         reduce using rule 52 (Stmt -> FlowCtrl .)
    SUBSLF          reduce using rule 52 (Stmt -> FlowCtrl .)
    }               reduce using rule 52 (Stmt -> FlowCtrl .)
    ELSE            reduce using rule 52 (Stmt -> FlowCtrl .)


state 63

    (78) Exp -> ID .
    (95) FuncCall -> ID . ( Args )
    (96) FuncCall -> ID . ( )

    ;               reduce using rule 78 (Exp -> ID .)
    =               reduce using rule 78 (Exp -> ID .)
    +               reduce using rule 78 (Exp -> ID .)
    -               reduce using rule 78 (Exp -> ID .)
    *               reduce using rule 78 (Exp -> ID .)
    /               reduce using rule 78 (Exp -> ID .)
    BOOLAND         reduce using rule 78 (Exp -> ID .)
    BOOLOR          reduce using rule 78 (Exp -> ID .)
    [               reduce using rule 78 (Exp -> ID .)
    .               reduce using rule 78 (Exp -> ID .)
    >               reduce using rule 78 (Exp -> ID .)
    <               reduce using rule 78 (Exp -> ID .)
    GRTREQL         reduce using rule 78 (Exp -> ID .)
    LESSEQL         reduce using rule 78 (Exp -> ID .)
    EQUAL           reduce using rule 78 (Exp -> ID .)
    NEQUAL          reduce using rule 78 (Exp -> ID .)
    )               reduce using rule 78 (Exp -> ID .)
    ]               reduce using rule 78 (Exp -> ID .)
    ,               reduce using rule 78 (Exp -> ID .)
    (               shift and go to state 111


state 64

    (79) Exp -> NUMBER .

    ;               reduce using rule 79 (Exp -> NUMBER .)
    =               reduce using rule 79 (Exp -> NUMBER .)
    +               reduce using rule 79 (Exp -> NUMBER .)
    -               reduce using rule 79 (Exp -> NUMBER .)
    *               reduce using rule 79 (Exp -> NUMBER .)
    /               reduce using rule 79 (Exp -> NUMBER .)
    BOOLAND         reduce using rule 79 (Exp -> NUMBER .)
    BOOLOR          reduce using rule 79 (Exp -> NUMBER .)
    [               reduce using rule 79 (Exp -> NUMBER .)
    .               reduce using rule 79 (Exp -> NUMBER .)
    >               reduce using rule 79 (Exp -> NUMBER .)
    <               reduce using rule 79 (Exp -> NUMBER .)
    GRTREQL         reduce using rule 79 (Exp -> NUMBER .)
    LESSEQL         reduce using rule 79 (Exp -> NUMBER .)
    EQUAL           reduce using rule 79 (Exp -> NUMBER .)
    NEQUAL          reduce using rule 79 (Exp -> NUMBER .)
    )               reduce using rule 79 (Exp -> NUMBER .)
    ]               reduce using rule 79 (Exp -> NUMBER .)
    ,               reduce using rule 79 (Exp -> NUMBER .)


state 65

    (80) Exp -> DECIMAL .

    ;               reduce using rule 80 (Exp -> DECIMAL .)
    =               reduce using rule 80 (Exp -> DECIMAL .)
    +               reduce using rule 80 (Exp -> DECIMAL .)
    -               reduce using rule 80 (Exp -> DECIMAL .)
    *               reduce using rule 80 (Exp -> DECIMAL .)
    /               reduce using rule 80 (Exp -> DECIMAL .)
    BOOLAND         reduce using rule 80 (Exp -> DECIMAL .)
    BOOLOR          reduce using rule 80 (Exp -> DECIMAL .)
    [               reduce using rule 80 (Exp -> DECIMAL .)
    .               reduce using rule 80 (Exp -> DECIMAL .)
    >               reduce using rule 80 (Exp -> DECIMAL .)
    <               reduce using rule 80 (Exp -> DECIMAL .)
    GRTREQL         reduce using rule 80 (Exp -> DECIMAL .)
    LESSEQL         reduce using rule 80 (Exp -> DECIMAL .)
    EQUAL           reduce using rule 80 (Exp -> DECIMAL .)
    NEQUAL          reduce using rule 80 (Exp -> DECIMAL .)
    )               reduce using rule 80 (Exp -> DECIMAL .)
    ]               reduce using rule 80 (Exp -> DECIMAL .)
    ,               reduce using rule 80 (Exp -> DECIMAL .)


state 66

    (81) Exp -> STRINGLITERAL .

    ;               reduce using rule 81 (Exp -> STRINGLITERAL .)
    =               reduce using rule 81 (Exp -> STRINGLITERAL .)
    +               reduce using rule 81 (Exp -> STRINGLITERAL .)
    -               reduce using rule 81 (Exp -> STRINGLITERAL .)
    *               reduce using rule 81 (Exp -> STRINGLITERAL .)
    /               reduce using rule 81 (Exp -> STRINGLITERAL .)
    BOOLAND         reduce using rule 81 (Exp -> STRINGLITERAL .)
    BOOLOR          reduce using rule 81 (Exp -> STRINGLITERAL .)
    [               reduce using rule 81 (Exp -> STRINGLITERAL .)
    .               reduce using rule 81 (Exp -> STRINGLITERAL .)
    >               reduce using rule 81 (Exp -> STRINGLITERAL .)
    <               reduce using rule 81 (Exp -> STRINGLITERAL .)
    GRTREQL         reduce using rule 81 (Exp -> STRINGLITERAL .)
    LESSEQL         reduce using rule 81 (Exp -> STRINGLITERAL .)
    EQUAL           reduce using rule 81 (Exp -> STRINGLITERAL .)
    NEQUAL          reduce using rule 81 (Exp -> STRINGLITERAL .)
    )               reduce using rule 81 (Exp -> STRINGLITERAL .)
    ]               reduce using rule 81 (Exp -> STRINGLITERAL .)
    ,               reduce using rule 81 (Exp -> STRINGLITERAL .)


state 67

    (73) PrefixedExp -> + . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 112
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 68

    (72) PrefixedExp -> - . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 113
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 69

    (61) PrefixedExp -> * . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 114
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 70

    (87) Exp -> FuncCall .

    ;               reduce using rule 87 (Exp -> FuncCall .)
    =               reduce using rule 87 (Exp -> FuncCall .)
    +               reduce using rule 87 (Exp -> FuncCall .)
    -               reduce using rule 87 (Exp -> FuncCall .)
    *               reduce using rule 87 (Exp -> FuncCall .)
    /               reduce using rule 87 (Exp -> FuncCall .)
    BOOLAND         reduce using rule 87 (Exp -> FuncCall .)
    BOOLOR          reduce using rule 87 (Exp -> FuncCall .)
    [               reduce using rule 87 (Exp -> FuncCall .)
    .               reduce using rule 87 (Exp -> FuncCall .)
    >               reduce using rule 87 (Exp -> FuncCall .)
    <               reduce using rule 87 (Exp -> FuncCall .)
    GRTREQL         reduce using rule 87 (Exp -> FuncCall .)
    LESSEQL         reduce using rule 87 (Exp -> FuncCall .)
    EQUAL           reduce using rule 87 (Exp -> FuncCall .)
    NEQUAL          reduce using rule 87 (Exp -> FuncCall .)
    )               reduce using rule 87 (Exp -> FuncCall .)
    ]               reduce using rule 87 (Exp -> FuncCall .)
    ,               reduce using rule 87 (Exp -> FuncCall .)


state 71

    (88) Exp -> PrefixedExp .

    ;               reduce using rule 88 (Exp -> PrefixedExp .)
    =               reduce using rule 88 (Exp -> PrefixedExp .)
    +               reduce using rule 88 (Exp -> PrefixedExp .)
    -               reduce using rule 88 (Exp -> PrefixedExp .)
    *               reduce using rule 88 (Exp -> PrefixedExp .)
    /               reduce using rule 88 (Exp -> PrefixedExp .)
    BOOLAND         reduce using rule 88 (Exp -> PrefixedExp .)
    BOOLOR          reduce using rule 88 (Exp -> PrefixedExp .)
    [               reduce using rule 88 (Exp -> PrefixedExp .)
    .               reduce using rule 88 (Exp -> PrefixedExp .)
    >               reduce using rule 88 (Exp -> PrefixedExp .)
    <               reduce using rule 88 (Exp -> PrefixedExp .)
    GRTREQL         reduce using rule 88 (Exp -> PrefixedExp .)
    LESSEQL         reduce using rule 88 (Exp -> PrefixedExp .)
    EQUAL           reduce using rule 88 (Exp -> PrefixedExp .)
    NEQUAL          reduce using rule 88 (Exp -> PrefixedExp .)
    )               reduce using rule 88 (Exp -> PrefixedExp .)
    ]               reduce using rule 88 (Exp -> PrefixedExp .)
    ,               reduce using rule 88 (Exp -> PrefixedExp .)


state 72

    (91) Exp -> ! . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 115
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 73

    (46) FlowCtrl -> IF . ( Exp ) Stmt
    (47) FlowCtrl -> IF . ( Exp ) Stmt ELSE Stmt

    (               shift and go to state 116


state 74

    (48) FlowCtrl -> WHILE . ( Exp ) Stmt

    (               shift and go to state 117


state 75

    (62) PrefixedExp -> & . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 118
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 76

    (74) PrefixedExp -> PLUSSLF . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 119
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 77

    (75) PrefixedExp -> SUBSLF . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 120
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 78

    (53) DefList -> Def ; . DefList
    (53) DefList -> . Def ; DefList
    (54) DefList -> . EMPTY
    (55) Def -> . DecList
    (1) EMPTY -> .
    (57) DecList -> . DecHead
    (58) DecList -> . DecList , Dec
    (56) DecHead -> . Specifier Dec
    (24) Specifier -> . TYPE
    (25) Specifier -> . StructSpecifier
    (8) TYPE -> . INT
    (9) TYPE -> . SHORT
    (10) TYPE -> . CHAR
    (11) TYPE -> . LONG
    (12) TYPE -> . FLOAT
    (13) TYPE -> . DOUBLE
    (26) StructSpecifier -> . STRUCT OptTag { DefList }
    (27) StructSpecifier -> . STRUCT Tag

    RETURN          reduce using rule 1 (EMPTY -> .)
    PRINT           reduce using rule 1 (EMPTY -> .)
    ;               reduce using rule 1 (EMPTY -> .)
    (               reduce using rule 1 (EMPTY -> .)
    ID              reduce using rule 1 (EMPTY -> .)
    NUMBER          reduce using rule 1 (EMPTY -> .)
    DECIMAL         reduce using rule 1 (EMPTY -> .)
    STRINGLITERAL   reduce using rule 1 (EMPTY -> .)
    !               reduce using rule 1 (EMPTY -> .)
    {               reduce using rule 1 (EMPTY -> .)
    IF              reduce using rule 1 (EMPTY -> .)
    WHILE           reduce using rule 1 (EMPTY -> .)
    *               reduce using rule 1 (EMPTY -> .)
    &               reduce using rule 1 (EMPTY -> .)
    -               reduce using rule 1 (EMPTY -> .)
    +               reduce using rule 1 (EMPTY -> .)
    PLUSSLF         reduce using rule 1 (EMPTY -> .)
    SUBSLF          reduce using rule 1 (EMPTY -> .)
    }               reduce using rule 1 (EMPTY -> .)
    INT             shift and go to state 11
    SHORT           shift and go to state 12
    CHAR            shift and go to state 13
    LONG            shift and go to state 14
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 16
    STRUCT          shift and go to state 17

    Def                            shift and go to state 41
    DefList                        shift and go to state 121
    EMPTY                          shift and go to state 42
    DecList                        shift and go to state 43
    DecHead                        shift and go to state 44
    Specifier                      shift and go to state 45
    TYPE                           shift and go to state 9
    StructSpecifier                shift and go to state 10

state 79

    (58) DecList -> DecList , . Dec
    (59) Dec -> . VarDec
    (60) Dec -> . VarDec = Exp
    (31) VarDec -> . ID
    (32) VarDec -> . ( VarDec )
    (33) VarDec -> . VarDec [ NUMBER ]
    (34) VarDec -> . FunDec
    (35) VarDec -> . * VarDec
    (36) FunDec -> . ID ( VarList )
    (37) FunDec -> . ID ( )

    ID              shift and go to state 34
    (               shift and go to state 25
    *               shift and go to state 26

    Dec                            shift and go to state 122
    VarDec                         shift and go to state 81
    FunDec                         shift and go to state 35

state 80

    (56) DecHead -> Specifier Dec .

    ,               reduce using rule 56 (DecHead -> Specifier Dec .)
    ;               reduce using rule 56 (DecHead -> Specifier Dec .)


state 81

    (59) Dec -> VarDec .
    (60) Dec -> VarDec . = Exp
    (33) VarDec -> VarDec . [ NUMBER ]

    ,               reduce using rule 59 (Dec -> VarDec .)
    ;               reduce using rule 59 (Dec -> VarDec .)
    =               shift and go to state 123
    [               shift and go to state 36


state 82

    (26) StructSpecifier -> STRUCT OptTag { DefList . }

    }               shift and go to state 124


state 83

    (33) VarDec -> VarDec [ NUMBER ] .

    [               reduce using rule 33 (VarDec -> VarDec [ NUMBER ] .)
    ;               reduce using rule 33 (VarDec -> VarDec [ NUMBER ] .)
    ,               reduce using rule 33 (VarDec -> VarDec [ NUMBER ] .)
    )               reduce using rule 33 (VarDec -> VarDec [ NUMBER ] .)
    =               reduce using rule 33 (VarDec -> VarDec [ NUMBER ] .)


state 84

    (36) FunDec -> ID ( VarList ) .

    {               reduce using rule 36 (FunDec -> ID ( VarList ) .)
    [               reduce using rule 36 (FunDec -> ID ( VarList ) .)
    ;               reduce using rule 36 (FunDec -> ID ( VarList ) .)
    ,               reduce using rule 36 (FunDec -> ID ( VarList ) .)
    )               reduce using rule 36 (FunDec -> ID ( VarList ) .)
    =               reduce using rule 36 (FunDec -> ID ( VarList ) .)


state 85

    (38) VarList -> ParamDec , . VarList
    (38) VarList -> . ParamDec , VarList
    (39) VarList -> . ParamDec
    (40) ParamDec -> . Specifier VarDec
    (24) Specifier -> . TYPE
    (25) Specifier -> . StructSpecifier
    (8) TYPE -> . INT
    (9) TYPE -> . SHORT
    (10) TYPE -> . CHAR
    (11) TYPE -> . LONG
    (12) TYPE -> . FLOAT
    (13) TYPE -> . DOUBLE
    (26) StructSpecifier -> . STRUCT OptTag { DefList }
    (27) StructSpecifier -> . STRUCT Tag

    INT             shift and go to state 11
    SHORT           shift and go to state 12
    CHAR            shift and go to state 13
    LONG            shift and go to state 14
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 16
    STRUCT          shift and go to state 17

    ParamDec                       shift and go to state 50
    VarList                        shift and go to state 125
    Specifier                      shift and go to state 51
    TYPE                           shift and go to state 9
    StructSpecifier                shift and go to state 10

state 86

    (40) ParamDec -> Specifier VarDec .
    (33) VarDec -> VarDec . [ NUMBER ]

    ,               reduce using rule 40 (ParamDec -> Specifier VarDec .)
    )               reduce using rule 40 (ParamDec -> Specifier VarDec .)
    [               shift and go to state 36


state 87

    (41) CompSt -> { DefList StmtList } .

    INT             reduce using rule 41 (CompSt -> { DefList StmtList } .)
    SHORT           reduce using rule 41 (CompSt -> { DefList StmtList } .)
    CHAR            reduce using rule 41 (CompSt -> { DefList StmtList } .)
    LONG            reduce using rule 41 (CompSt -> { DefList StmtList } .)
    FLOAT           reduce using rule 41 (CompSt -> { DefList StmtList } .)
    DOUBLE          reduce using rule 41 (CompSt -> { DefList StmtList } .)
    STRUCT          reduce using rule 41 (CompSt -> { DefList StmtList } .)
    $end            reduce using rule 41 (CompSt -> { DefList StmtList } .)
    RETURN          reduce using rule 41 (CompSt -> { DefList StmtList } .)
    PRINT           reduce using rule 41 (CompSt -> { DefList StmtList } .)
    ;               reduce using rule 41 (CompSt -> { DefList StmtList } .)
    (               reduce using rule 41 (CompSt -> { DefList StmtList } .)
    ID              reduce using rule 41 (CompSt -> { DefList StmtList } .)
    NUMBER          reduce using rule 41 (CompSt -> { DefList StmtList } .)
    DECIMAL         reduce using rule 41 (CompSt -> { DefList StmtList } .)
    STRINGLITERAL   reduce using rule 41 (CompSt -> { DefList StmtList } .)
    !               reduce using rule 41 (CompSt -> { DefList StmtList } .)
    {               reduce using rule 41 (CompSt -> { DefList StmtList } .)
    IF              reduce using rule 41 (CompSt -> { DefList StmtList } .)
    WHILE           reduce using rule 41 (CompSt -> { DefList StmtList } .)
    *               reduce using rule 41 (CompSt -> { DefList StmtList } .)
    &               reduce using rule 41 (CompSt -> { DefList StmtList } .)
    -               reduce using rule 41 (CompSt -> { DefList StmtList } .)
    +               reduce using rule 41 (CompSt -> { DefList StmtList } .)
    PLUSSLF         reduce using rule 41 (CompSt -> { DefList StmtList } .)
    SUBSLF          reduce using rule 41 (CompSt -> { DefList StmtList } .)
    }               reduce using rule 41 (CompSt -> { DefList StmtList } .)
    ELSE            reduce using rule 41 (CompSt -> { DefList StmtList } .)


state 88

    (42) StmtList -> Stmt StmtList .

    }               reduce using rule 42 (StmtList -> Stmt StmtList .)


state 89

    (44) Stmt -> RETURN Exp . ;
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               shift and go to state 126
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95
    BOOLAND         shift and go to state 96
    BOOLOR          shift and go to state 97
    [               shift and go to state 99
    .               shift and go to state 100
    >               shift and go to state 101
    <               shift and go to state 102
    GRTREQL         shift and go to state 103
    LESSEQL         shift and go to state 104
    EQUAL           shift and go to state 105
    NEQUAL          shift and go to state 106

    RELOP                          shift and go to state 98

state 90

    (49) Stmt -> Exp ; .

    RETURN          reduce using rule 49 (Stmt -> Exp ; .)
    PRINT           reduce using rule 49 (Stmt -> Exp ; .)
    ;               reduce using rule 49 (Stmt -> Exp ; .)
    (               reduce using rule 49 (Stmt -> Exp ; .)
    ID              reduce using rule 49 (Stmt -> Exp ; .)
    NUMBER          reduce using rule 49 (Stmt -> Exp ; .)
    DECIMAL         reduce using rule 49 (Stmt -> Exp ; .)
    STRINGLITERAL   reduce using rule 49 (Stmt -> Exp ; .)
    !               reduce using rule 49 (Stmt -> Exp ; .)
    {               reduce using rule 49 (Stmt -> Exp ; .)
    IF              reduce using rule 49 (Stmt -> Exp ; .)
    WHILE           reduce using rule 49 (Stmt -> Exp ; .)
    *               reduce using rule 49 (Stmt -> Exp ; .)
    &               reduce using rule 49 (Stmt -> Exp ; .)
    -               reduce using rule 49 (Stmt -> Exp ; .)
    +               reduce using rule 49 (Stmt -> Exp ; .)
    PLUSSLF         reduce using rule 49 (Stmt -> Exp ; .)
    SUBSLF          reduce using rule 49 (Stmt -> Exp ; .)
    }               reduce using rule 49 (Stmt -> Exp ; .)
    ELSE            reduce using rule 49 (Stmt -> Exp ; .)


state 91

    (82) Exp -> Exp = . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 127
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 92

    (83) Exp -> Exp + . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 128
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 93

    (84) Exp -> Exp - . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 129
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 94

    (85) Exp -> Exp * . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 130
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 95

    (86) Exp -> Exp / . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 131
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 96

    (89) Exp -> Exp BOOLAND . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 132
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 97

    (90) Exp -> Exp BOOLOR . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 133
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 98

    (92) Exp -> Exp RELOP . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 134
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 99

    (93) Exp -> Exp [ . Exp ]
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 135
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 100

    (94) Exp -> Exp . . ID

    ID              shift and go to state 136


state 101

    (2) RELOP -> > .

    (               reduce using rule 2 (RELOP -> > .)
    ID              reduce using rule 2 (RELOP -> > .)
    NUMBER          reduce using rule 2 (RELOP -> > .)
    DECIMAL         reduce using rule 2 (RELOP -> > .)
    STRINGLITERAL   reduce using rule 2 (RELOP -> > .)
    !               reduce using rule 2 (RELOP -> > .)
    *               reduce using rule 2 (RELOP -> > .)
    &               reduce using rule 2 (RELOP -> > .)
    -               reduce using rule 2 (RELOP -> > .)
    +               reduce using rule 2 (RELOP -> > .)
    PLUSSLF         reduce using rule 2 (RELOP -> > .)
    SUBSLF          reduce using rule 2 (RELOP -> > .)


state 102

    (3) RELOP -> < .

    (               reduce using rule 3 (RELOP -> < .)
    ID              reduce using rule 3 (RELOP -> < .)
    NUMBER          reduce using rule 3 (RELOP -> < .)
    DECIMAL         reduce using rule 3 (RELOP -> < .)
    STRINGLITERAL   reduce using rule 3 (RELOP -> < .)
    !               reduce using rule 3 (RELOP -> < .)
    *               reduce using rule 3 (RELOP -> < .)
    &               reduce using rule 3 (RELOP -> < .)
    -               reduce using rule 3 (RELOP -> < .)
    +               reduce using rule 3 (RELOP -> < .)
    PLUSSLF         reduce using rule 3 (RELOP -> < .)
    SUBSLF          reduce using rule 3 (RELOP -> < .)


state 103

    (4) RELOP -> GRTREQL .

    (               reduce using rule 4 (RELOP -> GRTREQL .)
    ID              reduce using rule 4 (RELOP -> GRTREQL .)
    NUMBER          reduce using rule 4 (RELOP -> GRTREQL .)
    DECIMAL         reduce using rule 4 (RELOP -> GRTREQL .)
    STRINGLITERAL   reduce using rule 4 (RELOP -> GRTREQL .)
    !               reduce using rule 4 (RELOP -> GRTREQL .)
    *               reduce using rule 4 (RELOP -> GRTREQL .)
    &               reduce using rule 4 (RELOP -> GRTREQL .)
    -               reduce using rule 4 (RELOP -> GRTREQL .)
    +               reduce using rule 4 (RELOP -> GRTREQL .)
    PLUSSLF         reduce using rule 4 (RELOP -> GRTREQL .)
    SUBSLF          reduce using rule 4 (RELOP -> GRTREQL .)


state 104

    (5) RELOP -> LESSEQL .

    (               reduce using rule 5 (RELOP -> LESSEQL .)
    ID              reduce using rule 5 (RELOP -> LESSEQL .)
    NUMBER          reduce using rule 5 (RELOP -> LESSEQL .)
    DECIMAL         reduce using rule 5 (RELOP -> LESSEQL .)
    STRINGLITERAL   reduce using rule 5 (RELOP -> LESSEQL .)
    !               reduce using rule 5 (RELOP -> LESSEQL .)
    *               reduce using rule 5 (RELOP -> LESSEQL .)
    &               reduce using rule 5 (RELOP -> LESSEQL .)
    -               reduce using rule 5 (RELOP -> LESSEQL .)
    +               reduce using rule 5 (RELOP -> LESSEQL .)
    PLUSSLF         reduce using rule 5 (RELOP -> LESSEQL .)
    SUBSLF          reduce using rule 5 (RELOP -> LESSEQL .)


state 105

    (6) RELOP -> EQUAL .

    (               reduce using rule 6 (RELOP -> EQUAL .)
    ID              reduce using rule 6 (RELOP -> EQUAL .)
    NUMBER          reduce using rule 6 (RELOP -> EQUAL .)
    DECIMAL         reduce using rule 6 (RELOP -> EQUAL .)
    STRINGLITERAL   reduce using rule 6 (RELOP -> EQUAL .)
    !               reduce using rule 6 (RELOP -> EQUAL .)
    *               reduce using rule 6 (RELOP -> EQUAL .)
    &               reduce using rule 6 (RELOP -> EQUAL .)
    -               reduce using rule 6 (RELOP -> EQUAL .)
    +               reduce using rule 6 (RELOP -> EQUAL .)
    PLUSSLF         reduce using rule 6 (RELOP -> EQUAL .)
    SUBSLF          reduce using rule 6 (RELOP -> EQUAL .)


state 106

    (7) RELOP -> NEQUAL .

    (               reduce using rule 7 (RELOP -> NEQUAL .)
    ID              reduce using rule 7 (RELOP -> NEQUAL .)
    NUMBER          reduce using rule 7 (RELOP -> NEQUAL .)
    DECIMAL         reduce using rule 7 (RELOP -> NEQUAL .)
    STRINGLITERAL   reduce using rule 7 (RELOP -> NEQUAL .)
    !               reduce using rule 7 (RELOP -> NEQUAL .)
    *               reduce using rule 7 (RELOP -> NEQUAL .)
    &               reduce using rule 7 (RELOP -> NEQUAL .)
    -               reduce using rule 7 (RELOP -> NEQUAL .)
    +               reduce using rule 7 (RELOP -> NEQUAL .)
    PLUSSLF         reduce using rule 7 (RELOP -> NEQUAL .)
    SUBSLF          reduce using rule 7 (RELOP -> NEQUAL .)


state 107

    (45) Stmt -> PRINT ( . Exp ) ;
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 137
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 108

    (77) Exp -> ( Exp . )
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    )               shift and go to state 138
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95
    BOOLAND         shift and go to state 96
    BOOLOR          shift and go to state 97
    [               shift and go to state 99
    .               shift and go to state 100
    >               shift and go to state 101
    <               shift and go to state 102
    GRTREQL         shift and go to state 103
    LESSEQL         shift and go to state 104
    EQUAL           shift and go to state 105
    NEQUAL          shift and go to state 106

    RELOP                          shift and go to state 98

state 109

    (76) PrefixedExp -> ( TypeSpecifier . ) Exp

    )               shift and go to state 139


state 110

    (69) TypeSpecifier -> TYPE . SubTypeSpecifier
    (63) SubTypeSpecifier -> . EMPTY
    (64) SubTypeSpecifier -> . ( SubTypeSpecifier )
    (65) SubTypeSpecifier -> . * SubTypeSpecifier
    (66) SubTypeSpecifier -> . SubTypeSpecifier [ NUMBER ]
    (67) SubTypeSpecifier -> . SubTypeSpecifier ( TypeList )
    (68) SubTypeSpecifier -> . SubTypeSpecifier ( )
    (1) EMPTY -> .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 142
    *               shift and go to state 143
    [               reduce using rule 1 (EMPTY -> .)
    )               reduce using rule 1 (EMPTY -> .)
    ,               reduce using rule 1 (EMPTY -> .)

  ! (               [ reduce using rule 1 (EMPTY -> .) ]

    SubTypeSpecifier               shift and go to state 140
    EMPTY                          shift and go to state 141

state 111

    (95) FuncCall -> ID ( . Args )
    (96) FuncCall -> ID ( . )
    (97) Args -> . Exp , Args
    (98) Args -> . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    )               shift and go to state 145
    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Args                           shift and go to state 144
    Exp                            shift and go to state 146
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 112

    (73) PrefixedExp -> + Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 73 (PrefixedExp -> + Exp .)
    BOOLAND         reduce using rule 73 (PrefixedExp -> + Exp .)
    BOOLOR          reduce using rule 73 (PrefixedExp -> + Exp .)
    [               reduce using rule 73 (PrefixedExp -> + Exp .)
    .               reduce using rule 73 (PrefixedExp -> + Exp .)
    >               reduce using rule 73 (PrefixedExp -> + Exp .)
    <               reduce using rule 73 (PrefixedExp -> + Exp .)
    GRTREQL         reduce using rule 73 (PrefixedExp -> + Exp .)
    LESSEQL         reduce using rule 73 (PrefixedExp -> + Exp .)
    EQUAL           reduce using rule 73 (PrefixedExp -> + Exp .)
    NEQUAL          reduce using rule 73 (PrefixedExp -> + Exp .)
    )               reduce using rule 73 (PrefixedExp -> + Exp .)
    ]               reduce using rule 73 (PrefixedExp -> + Exp .)
    ,               reduce using rule 73 (PrefixedExp -> + Exp .)
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95

  ! =               [ reduce using rule 73 (PrefixedExp -> + Exp .) ]
  ! +               [ reduce using rule 73 (PrefixedExp -> + Exp .) ]
  ! -               [ reduce using rule 73 (PrefixedExp -> + Exp .) ]
  ! *               [ reduce using rule 73 (PrefixedExp -> + Exp .) ]
  ! /               [ reduce using rule 73 (PrefixedExp -> + Exp .) ]
  ! BOOLAND         [ shift and go to state 96 ]
  ! BOOLOR          [ shift and go to state 97 ]
  ! [               [ shift and go to state 99 ]
  ! .               [ shift and go to state 100 ]
  ! >               [ shift and go to state 101 ]
  ! <               [ shift and go to state 102 ]
  ! GRTREQL         [ shift and go to state 103 ]
  ! LESSEQL         [ shift and go to state 104 ]
  ! EQUAL           [ shift and go to state 105 ]
  ! NEQUAL          [ shift and go to state 106 ]

    RELOP                          shift and go to state 98

state 113

    (72) PrefixedExp -> - Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 72 (PrefixedExp -> - Exp .)
    BOOLAND         reduce using rule 72 (PrefixedExp -> - Exp .)
    BOOLOR          reduce using rule 72 (PrefixedExp -> - Exp .)
    [               reduce using rule 72 (PrefixedExp -> - Exp .)
    .               reduce using rule 72 (PrefixedExp -> - Exp .)
    >               reduce using rule 72 (PrefixedExp -> - Exp .)
    <               reduce using rule 72 (PrefixedExp -> - Exp .)
    GRTREQL         reduce using rule 72 (PrefixedExp -> - Exp .)
    LESSEQL         reduce using rule 72 (PrefixedExp -> - Exp .)
    EQUAL           reduce using rule 72 (PrefixedExp -> - Exp .)
    NEQUAL          reduce using rule 72 (PrefixedExp -> - Exp .)
    )               reduce using rule 72 (PrefixedExp -> - Exp .)
    ]               reduce using rule 72 (PrefixedExp -> - Exp .)
    ,               reduce using rule 72 (PrefixedExp -> - Exp .)
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95

  ! =               [ reduce using rule 72 (PrefixedExp -> - Exp .) ]
  ! +               [ reduce using rule 72 (PrefixedExp -> - Exp .) ]
  ! -               [ reduce using rule 72 (PrefixedExp -> - Exp .) ]
  ! *               [ reduce using rule 72 (PrefixedExp -> - Exp .) ]
  ! /               [ reduce using rule 72 (PrefixedExp -> - Exp .) ]
  ! BOOLAND         [ shift and go to state 96 ]
  ! BOOLOR          [ shift and go to state 97 ]
  ! [               [ shift and go to state 99 ]
  ! .               [ shift and go to state 100 ]
  ! >               [ shift and go to state 101 ]
  ! <               [ shift and go to state 102 ]
  ! GRTREQL         [ shift and go to state 103 ]
  ! LESSEQL         [ shift and go to state 104 ]
  ! EQUAL           [ shift and go to state 105 ]
  ! NEQUAL          [ shift and go to state 106 ]

    RELOP                          shift and go to state 98

state 114

    (61) PrefixedExp -> * Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 61 (PrefixedExp -> * Exp .)
    BOOLAND         reduce using rule 61 (PrefixedExp -> * Exp .)
    BOOLOR          reduce using rule 61 (PrefixedExp -> * Exp .)
    [               reduce using rule 61 (PrefixedExp -> * Exp .)
    .               reduce using rule 61 (PrefixedExp -> * Exp .)
    >               reduce using rule 61 (PrefixedExp -> * Exp .)
    <               reduce using rule 61 (PrefixedExp -> * Exp .)
    GRTREQL         reduce using rule 61 (PrefixedExp -> * Exp .)
    LESSEQL         reduce using rule 61 (PrefixedExp -> * Exp .)
    EQUAL           reduce using rule 61 (PrefixedExp -> * Exp .)
    NEQUAL          reduce using rule 61 (PrefixedExp -> * Exp .)
    )               reduce using rule 61 (PrefixedExp -> * Exp .)
    ]               reduce using rule 61 (PrefixedExp -> * Exp .)
    ,               reduce using rule 61 (PrefixedExp -> * Exp .)
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95

  ! =               [ reduce using rule 61 (PrefixedExp -> * Exp .) ]
  ! +               [ reduce using rule 61 (PrefixedExp -> * Exp .) ]
  ! -               [ reduce using rule 61 (PrefixedExp -> * Exp .) ]
  ! *               [ reduce using rule 61 (PrefixedExp -> * Exp .) ]
  ! /               [ reduce using rule 61 (PrefixedExp -> * Exp .) ]
  ! BOOLAND         [ shift and go to state 96 ]
  ! BOOLOR          [ shift and go to state 97 ]
  ! [               [ shift and go to state 99 ]
  ! .               [ shift and go to state 100 ]
  ! >               [ shift and go to state 101 ]
  ! <               [ shift and go to state 102 ]
  ! GRTREQL         [ shift and go to state 103 ]
  ! LESSEQL         [ shift and go to state 104 ]
  ! EQUAL           [ shift and go to state 105 ]
  ! NEQUAL          [ shift and go to state 106 ]

    RELOP                          shift and go to state 98

state 115

    (91) Exp -> ! Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for BOOLAND resolved as shift
  ! shift/reduce conflict for BOOLOR resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GRTREQL resolved as shift
  ! shift/reduce conflict for LESSEQL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
    ;               reduce using rule 91 (Exp -> ! Exp .)
    )               reduce using rule 91 (Exp -> ! Exp .)
    ]               reduce using rule 91 (Exp -> ! Exp .)
    ,               reduce using rule 91 (Exp -> ! Exp .)
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95
    BOOLAND         shift and go to state 96
    BOOLOR          shift and go to state 97
    [               shift and go to state 99
    .               shift and go to state 100
    >               shift and go to state 101
    <               shift and go to state 102
    GRTREQL         shift and go to state 103
    LESSEQL         shift and go to state 104
    EQUAL           shift and go to state 105
    NEQUAL          shift and go to state 106

  ! =               [ reduce using rule 91 (Exp -> ! Exp .) ]
  ! +               [ reduce using rule 91 (Exp -> ! Exp .) ]
  ! -               [ reduce using rule 91 (Exp -> ! Exp .) ]
  ! *               [ reduce using rule 91 (Exp -> ! Exp .) ]
  ! /               [ reduce using rule 91 (Exp -> ! Exp .) ]
  ! BOOLAND         [ reduce using rule 91 (Exp -> ! Exp .) ]
  ! BOOLOR          [ reduce using rule 91 (Exp -> ! Exp .) ]
  ! [               [ reduce using rule 91 (Exp -> ! Exp .) ]
  ! .               [ reduce using rule 91 (Exp -> ! Exp .) ]
  ! >               [ reduce using rule 91 (Exp -> ! Exp .) ]
  ! <               [ reduce using rule 91 (Exp -> ! Exp .) ]
  ! GRTREQL         [ reduce using rule 91 (Exp -> ! Exp .) ]
  ! LESSEQL         [ reduce using rule 91 (Exp -> ! Exp .) ]
  ! EQUAL           [ reduce using rule 91 (Exp -> ! Exp .) ]
  ! NEQUAL          [ reduce using rule 91 (Exp -> ! Exp .) ]

    RELOP                          shift and go to state 98

state 116

    (46) FlowCtrl -> IF ( . Exp ) Stmt
    (47) FlowCtrl -> IF ( . Exp ) Stmt ELSE Stmt
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 147
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 117

    (48) FlowCtrl -> WHILE ( . Exp ) Stmt
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 148
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 118

    (62) PrefixedExp -> & Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 62 (PrefixedExp -> & Exp .)
    BOOLAND         reduce using rule 62 (PrefixedExp -> & Exp .)
    BOOLOR          reduce using rule 62 (PrefixedExp -> & Exp .)
    [               reduce using rule 62 (PrefixedExp -> & Exp .)
    .               reduce using rule 62 (PrefixedExp -> & Exp .)
    >               reduce using rule 62 (PrefixedExp -> & Exp .)
    <               reduce using rule 62 (PrefixedExp -> & Exp .)
    GRTREQL         reduce using rule 62 (PrefixedExp -> & Exp .)
    LESSEQL         reduce using rule 62 (PrefixedExp -> & Exp .)
    EQUAL           reduce using rule 62 (PrefixedExp -> & Exp .)
    NEQUAL          reduce using rule 62 (PrefixedExp -> & Exp .)
    )               reduce using rule 62 (PrefixedExp -> & Exp .)
    ]               reduce using rule 62 (PrefixedExp -> & Exp .)
    ,               reduce using rule 62 (PrefixedExp -> & Exp .)
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95

  ! =               [ reduce using rule 62 (PrefixedExp -> & Exp .) ]
  ! +               [ reduce using rule 62 (PrefixedExp -> & Exp .) ]
  ! -               [ reduce using rule 62 (PrefixedExp -> & Exp .) ]
  ! *               [ reduce using rule 62 (PrefixedExp -> & Exp .) ]
  ! /               [ reduce using rule 62 (PrefixedExp -> & Exp .) ]
  ! BOOLAND         [ shift and go to state 96 ]
  ! BOOLOR          [ shift and go to state 97 ]
  ! [               [ shift and go to state 99 ]
  ! .               [ shift and go to state 100 ]
  ! >               [ shift and go to state 101 ]
  ! <               [ shift and go to state 102 ]
  ! GRTREQL         [ shift and go to state 103 ]
  ! LESSEQL         [ shift and go to state 104 ]
  ! EQUAL           [ shift and go to state 105 ]
  ! NEQUAL          [ shift and go to state 106 ]

    RELOP                          shift and go to state 98

state 119

    (74) PrefixedExp -> PLUSSLF Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .)
    BOOLAND         reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .)
    BOOLOR          reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .)
    [               reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .)
    .               reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .)
    >               reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .)
    <               reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .)
    GRTREQL         reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .)
    LESSEQL         reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .)
    EQUAL           reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .)
    NEQUAL          reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .)
    )               reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .)
    ]               reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .)
    ,               reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .)
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95

  ! =               [ reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .) ]
  ! +               [ reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .) ]
  ! -               [ reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .) ]
  ! *               [ reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .) ]
  ! /               [ reduce using rule 74 (PrefixedExp -> PLUSSLF Exp .) ]
  ! BOOLAND         [ shift and go to state 96 ]
  ! BOOLOR          [ shift and go to state 97 ]
  ! [               [ shift and go to state 99 ]
  ! .               [ shift and go to state 100 ]
  ! >               [ shift and go to state 101 ]
  ! <               [ shift and go to state 102 ]
  ! GRTREQL         [ shift and go to state 103 ]
  ! LESSEQL         [ shift and go to state 104 ]
  ! EQUAL           [ shift and go to state 105 ]
  ! NEQUAL          [ shift and go to state 106 ]

    RELOP                          shift and go to state 98

state 120

    (75) PrefixedExp -> SUBSLF Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 75 (PrefixedExp -> SUBSLF Exp .)
    BOOLAND         reduce using rule 75 (PrefixedExp -> SUBSLF Exp .)
    BOOLOR          reduce using rule 75 (PrefixedExp -> SUBSLF Exp .)
    [               reduce using rule 75 (PrefixedExp -> SUBSLF Exp .)
    .               reduce using rule 75 (PrefixedExp -> SUBSLF Exp .)
    >               reduce using rule 75 (PrefixedExp -> SUBSLF Exp .)
    <               reduce using rule 75 (PrefixedExp -> SUBSLF Exp .)
    GRTREQL         reduce using rule 75 (PrefixedExp -> SUBSLF Exp .)
    LESSEQL         reduce using rule 75 (PrefixedExp -> SUBSLF Exp .)
    EQUAL           reduce using rule 75 (PrefixedExp -> SUBSLF Exp .)
    NEQUAL          reduce using rule 75 (PrefixedExp -> SUBSLF Exp .)
    )               reduce using rule 75 (PrefixedExp -> SUBSLF Exp .)
    ]               reduce using rule 75 (PrefixedExp -> SUBSLF Exp .)
    ,               reduce using rule 75 (PrefixedExp -> SUBSLF Exp .)
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95

  ! =               [ reduce using rule 75 (PrefixedExp -> SUBSLF Exp .) ]
  ! +               [ reduce using rule 75 (PrefixedExp -> SUBSLF Exp .) ]
  ! -               [ reduce using rule 75 (PrefixedExp -> SUBSLF Exp .) ]
  ! *               [ reduce using rule 75 (PrefixedExp -> SUBSLF Exp .) ]
  ! /               [ reduce using rule 75 (PrefixedExp -> SUBSLF Exp .) ]
  ! BOOLAND         [ shift and go to state 96 ]
  ! BOOLOR          [ shift and go to state 97 ]
  ! [               [ shift and go to state 99 ]
  ! .               [ shift and go to state 100 ]
  ! >               [ shift and go to state 101 ]
  ! <               [ shift and go to state 102 ]
  ! GRTREQL         [ shift and go to state 103 ]
  ! LESSEQL         [ shift and go to state 104 ]
  ! EQUAL           [ shift and go to state 105 ]
  ! NEQUAL          [ shift and go to state 106 ]

    RELOP                          shift and go to state 98

state 121

    (53) DefList -> Def ; DefList .

    RETURN          reduce using rule 53 (DefList -> Def ; DefList .)
    PRINT           reduce using rule 53 (DefList -> Def ; DefList .)
    ;               reduce using rule 53 (DefList -> Def ; DefList .)
    (               reduce using rule 53 (DefList -> Def ; DefList .)
    ID              reduce using rule 53 (DefList -> Def ; DefList .)
    NUMBER          reduce using rule 53 (DefList -> Def ; DefList .)
    DECIMAL         reduce using rule 53 (DefList -> Def ; DefList .)
    STRINGLITERAL   reduce using rule 53 (DefList -> Def ; DefList .)
    !               reduce using rule 53 (DefList -> Def ; DefList .)
    {               reduce using rule 53 (DefList -> Def ; DefList .)
    IF              reduce using rule 53 (DefList -> Def ; DefList .)
    WHILE           reduce using rule 53 (DefList -> Def ; DefList .)
    *               reduce using rule 53 (DefList -> Def ; DefList .)
    &               reduce using rule 53 (DefList -> Def ; DefList .)
    -               reduce using rule 53 (DefList -> Def ; DefList .)
    +               reduce using rule 53 (DefList -> Def ; DefList .)
    PLUSSLF         reduce using rule 53 (DefList -> Def ; DefList .)
    SUBSLF          reduce using rule 53 (DefList -> Def ; DefList .)
    }               reduce using rule 53 (DefList -> Def ; DefList .)


state 122

    (58) DecList -> DecList , Dec .

    ,               reduce using rule 58 (DecList -> DecList , Dec .)
    ;               reduce using rule 58 (DecList -> DecList , Dec .)


state 123

    (60) Dec -> VarDec = . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 149
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 124

    (26) StructSpecifier -> STRUCT OptTag { DefList } .

    ;               reduce using rule 26 (StructSpecifier -> STRUCT OptTag { DefList } .)
    ID              reduce using rule 26 (StructSpecifier -> STRUCT OptTag { DefList } .)
    (               reduce using rule 26 (StructSpecifier -> STRUCT OptTag { DefList } .)
    *               reduce using rule 26 (StructSpecifier -> STRUCT OptTag { DefList } .)


state 125

    (38) VarList -> ParamDec , VarList .

    )               reduce using rule 38 (VarList -> ParamDec , VarList .)


state 126

    (44) Stmt -> RETURN Exp ; .

    RETURN          reduce using rule 44 (Stmt -> RETURN Exp ; .)
    PRINT           reduce using rule 44 (Stmt -> RETURN Exp ; .)
    ;               reduce using rule 44 (Stmt -> RETURN Exp ; .)
    (               reduce using rule 44 (Stmt -> RETURN Exp ; .)
    ID              reduce using rule 44 (Stmt -> RETURN Exp ; .)
    NUMBER          reduce using rule 44 (Stmt -> RETURN Exp ; .)
    DECIMAL         reduce using rule 44 (Stmt -> RETURN Exp ; .)
    STRINGLITERAL   reduce using rule 44 (Stmt -> RETURN Exp ; .)
    !               reduce using rule 44 (Stmt -> RETURN Exp ; .)
    {               reduce using rule 44 (Stmt -> RETURN Exp ; .)
    IF              reduce using rule 44 (Stmt -> RETURN Exp ; .)
    WHILE           reduce using rule 44 (Stmt -> RETURN Exp ; .)
    *               reduce using rule 44 (Stmt -> RETURN Exp ; .)
    &               reduce using rule 44 (Stmt -> RETURN Exp ; .)
    -               reduce using rule 44 (Stmt -> RETURN Exp ; .)
    +               reduce using rule 44 (Stmt -> RETURN Exp ; .)
    PLUSSLF         reduce using rule 44 (Stmt -> RETURN Exp ; .)
    SUBSLF          reduce using rule 44 (Stmt -> RETURN Exp ; .)
    }               reduce using rule 44 (Stmt -> RETURN Exp ; .)
    ELSE            reduce using rule 44 (Stmt -> RETURN Exp ; .)


state 127

    (82) Exp -> Exp = Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 82 (Exp -> Exp = Exp .)
    +               reduce using rule 82 (Exp -> Exp = Exp .)
    -               reduce using rule 82 (Exp -> Exp = Exp .)
    *               reduce using rule 82 (Exp -> Exp = Exp .)
    /               reduce using rule 82 (Exp -> Exp = Exp .)
    BOOLAND         reduce using rule 82 (Exp -> Exp = Exp .)
    BOOLOR          reduce using rule 82 (Exp -> Exp = Exp .)
    [               reduce using rule 82 (Exp -> Exp = Exp .)
    .               reduce using rule 82 (Exp -> Exp = Exp .)
    >               reduce using rule 82 (Exp -> Exp = Exp .)
    <               reduce using rule 82 (Exp -> Exp = Exp .)
    GRTREQL         reduce using rule 82 (Exp -> Exp = Exp .)
    LESSEQL         reduce using rule 82 (Exp -> Exp = Exp .)
    EQUAL           reduce using rule 82 (Exp -> Exp = Exp .)
    NEQUAL          reduce using rule 82 (Exp -> Exp = Exp .)
    )               reduce using rule 82 (Exp -> Exp = Exp .)
    ]               reduce using rule 82 (Exp -> Exp = Exp .)
    ,               reduce using rule 82 (Exp -> Exp = Exp .)
    =               shift and go to state 91

  ! =               [ reduce using rule 82 (Exp -> Exp = Exp .) ]
  ! +               [ shift and go to state 92 ]
  ! -               [ shift and go to state 93 ]
  ! *               [ shift and go to state 94 ]
  ! /               [ shift and go to state 95 ]
  ! BOOLAND         [ shift and go to state 96 ]
  ! BOOLOR          [ shift and go to state 97 ]
  ! [               [ shift and go to state 99 ]
  ! .               [ shift and go to state 100 ]
  ! >               [ shift and go to state 101 ]
  ! <               [ shift and go to state 102 ]
  ! GRTREQL         [ shift and go to state 103 ]
  ! LESSEQL         [ shift and go to state 104 ]
  ! EQUAL           [ shift and go to state 105 ]
  ! NEQUAL          [ shift and go to state 106 ]

    RELOP                          shift and go to state 98

state 128

    (83) Exp -> Exp + Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 83 (Exp -> Exp + Exp .)
    +               reduce using rule 83 (Exp -> Exp + Exp .)
    -               reduce using rule 83 (Exp -> Exp + Exp .)
    BOOLAND         reduce using rule 83 (Exp -> Exp + Exp .)
    BOOLOR          reduce using rule 83 (Exp -> Exp + Exp .)
    [               reduce using rule 83 (Exp -> Exp + Exp .)
    .               reduce using rule 83 (Exp -> Exp + Exp .)
    >               reduce using rule 83 (Exp -> Exp + Exp .)
    <               reduce using rule 83 (Exp -> Exp + Exp .)
    GRTREQL         reduce using rule 83 (Exp -> Exp + Exp .)
    LESSEQL         reduce using rule 83 (Exp -> Exp + Exp .)
    EQUAL           reduce using rule 83 (Exp -> Exp + Exp .)
    NEQUAL          reduce using rule 83 (Exp -> Exp + Exp .)
    )               reduce using rule 83 (Exp -> Exp + Exp .)
    ]               reduce using rule 83 (Exp -> Exp + Exp .)
    ,               reduce using rule 83 (Exp -> Exp + Exp .)
    =               shift and go to state 91
    *               shift and go to state 94
    /               shift and go to state 95

  ! =               [ reduce using rule 83 (Exp -> Exp + Exp .) ]
  ! *               [ reduce using rule 83 (Exp -> Exp + Exp .) ]
  ! /               [ reduce using rule 83 (Exp -> Exp + Exp .) ]
  ! +               [ shift and go to state 92 ]
  ! -               [ shift and go to state 93 ]
  ! BOOLAND         [ shift and go to state 96 ]
  ! BOOLOR          [ shift and go to state 97 ]
  ! [               [ shift and go to state 99 ]
  ! .               [ shift and go to state 100 ]
  ! >               [ shift and go to state 101 ]
  ! <               [ shift and go to state 102 ]
  ! GRTREQL         [ shift and go to state 103 ]
  ! LESSEQL         [ shift and go to state 104 ]
  ! EQUAL           [ shift and go to state 105 ]
  ! NEQUAL          [ shift and go to state 106 ]

    RELOP                          shift and go to state 98

state 129

    (84) Exp -> Exp - Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 84 (Exp -> Exp - Exp .)
    +               reduce using rule 84 (Exp -> Exp - Exp .)
    -               reduce using rule 84 (Exp -> Exp - Exp .)
    BOOLAND         reduce using rule 84 (Exp -> Exp - Exp .)
    BOOLOR          reduce using rule 84 (Exp -> Exp - Exp .)
    [               reduce using rule 84 (Exp -> Exp - Exp .)
    .               reduce using rule 84 (Exp -> Exp - Exp .)
    >               reduce using rule 84 (Exp -> Exp - Exp .)
    <               reduce using rule 84 (Exp -> Exp - Exp .)
    GRTREQL         reduce using rule 84 (Exp -> Exp - Exp .)
    LESSEQL         reduce using rule 84 (Exp -> Exp - Exp .)
    EQUAL           reduce using rule 84 (Exp -> Exp - Exp .)
    NEQUAL          reduce using rule 84 (Exp -> Exp - Exp .)
    )               reduce using rule 84 (Exp -> Exp - Exp .)
    ]               reduce using rule 84 (Exp -> Exp - Exp .)
    ,               reduce using rule 84 (Exp -> Exp - Exp .)
    =               shift and go to state 91
    *               shift and go to state 94
    /               shift and go to state 95

  ! =               [ reduce using rule 84 (Exp -> Exp - Exp .) ]
  ! *               [ reduce using rule 84 (Exp -> Exp - Exp .) ]
  ! /               [ reduce using rule 84 (Exp -> Exp - Exp .) ]
  ! +               [ shift and go to state 92 ]
  ! -               [ shift and go to state 93 ]
  ! BOOLAND         [ shift and go to state 96 ]
  ! BOOLOR          [ shift and go to state 97 ]
  ! [               [ shift and go to state 99 ]
  ! .               [ shift and go to state 100 ]
  ! >               [ shift and go to state 101 ]
  ! <               [ shift and go to state 102 ]
  ! GRTREQL         [ shift and go to state 103 ]
  ! LESSEQL         [ shift and go to state 104 ]
  ! EQUAL           [ shift and go to state 105 ]
  ! NEQUAL          [ shift and go to state 106 ]

    RELOP                          shift and go to state 98

state 130

    (85) Exp -> Exp * Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 85 (Exp -> Exp * Exp .)
    +               reduce using rule 85 (Exp -> Exp * Exp .)
    -               reduce using rule 85 (Exp -> Exp * Exp .)
    *               reduce using rule 85 (Exp -> Exp * Exp .)
    /               reduce using rule 85 (Exp -> Exp * Exp .)
    BOOLAND         reduce using rule 85 (Exp -> Exp * Exp .)
    BOOLOR          reduce using rule 85 (Exp -> Exp * Exp .)
    [               reduce using rule 85 (Exp -> Exp * Exp .)
    .               reduce using rule 85 (Exp -> Exp * Exp .)
    >               reduce using rule 85 (Exp -> Exp * Exp .)
    <               reduce using rule 85 (Exp -> Exp * Exp .)
    GRTREQL         reduce using rule 85 (Exp -> Exp * Exp .)
    LESSEQL         reduce using rule 85 (Exp -> Exp * Exp .)
    EQUAL           reduce using rule 85 (Exp -> Exp * Exp .)
    NEQUAL          reduce using rule 85 (Exp -> Exp * Exp .)
    )               reduce using rule 85 (Exp -> Exp * Exp .)
    ]               reduce using rule 85 (Exp -> Exp * Exp .)
    ,               reduce using rule 85 (Exp -> Exp * Exp .)
    =               shift and go to state 91

  ! =               [ reduce using rule 85 (Exp -> Exp * Exp .) ]
  ! +               [ shift and go to state 92 ]
  ! -               [ shift and go to state 93 ]
  ! *               [ shift and go to state 94 ]
  ! /               [ shift and go to state 95 ]
  ! BOOLAND         [ shift and go to state 96 ]
  ! BOOLOR          [ shift and go to state 97 ]
  ! [               [ shift and go to state 99 ]
  ! .               [ shift and go to state 100 ]
  ! >               [ shift and go to state 101 ]
  ! <               [ shift and go to state 102 ]
  ! GRTREQL         [ shift and go to state 103 ]
  ! LESSEQL         [ shift and go to state 104 ]
  ! EQUAL           [ shift and go to state 105 ]
  ! NEQUAL          [ shift and go to state 106 ]

    RELOP                          shift and go to state 98

state 131

    (86) Exp -> Exp / Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ;               reduce using rule 86 (Exp -> Exp / Exp .)
    +               reduce using rule 86 (Exp -> Exp / Exp .)
    -               reduce using rule 86 (Exp -> Exp / Exp .)
    *               reduce using rule 86 (Exp -> Exp / Exp .)
    /               reduce using rule 86 (Exp -> Exp / Exp .)
    BOOLAND         reduce using rule 86 (Exp -> Exp / Exp .)
    BOOLOR          reduce using rule 86 (Exp -> Exp / Exp .)
    [               reduce using rule 86 (Exp -> Exp / Exp .)
    .               reduce using rule 86 (Exp -> Exp / Exp .)
    >               reduce using rule 86 (Exp -> Exp / Exp .)
    <               reduce using rule 86 (Exp -> Exp / Exp .)
    GRTREQL         reduce using rule 86 (Exp -> Exp / Exp .)
    LESSEQL         reduce using rule 86 (Exp -> Exp / Exp .)
    EQUAL           reduce using rule 86 (Exp -> Exp / Exp .)
    NEQUAL          reduce using rule 86 (Exp -> Exp / Exp .)
    )               reduce using rule 86 (Exp -> Exp / Exp .)
    ]               reduce using rule 86 (Exp -> Exp / Exp .)
    ,               reduce using rule 86 (Exp -> Exp / Exp .)
    =               shift and go to state 91

  ! =               [ reduce using rule 86 (Exp -> Exp / Exp .) ]
  ! +               [ shift and go to state 92 ]
  ! -               [ shift and go to state 93 ]
  ! *               [ shift and go to state 94 ]
  ! /               [ shift and go to state 95 ]
  ! BOOLAND         [ shift and go to state 96 ]
  ! BOOLOR          [ shift and go to state 97 ]
  ! [               [ shift and go to state 99 ]
  ! .               [ shift and go to state 100 ]
  ! >               [ shift and go to state 101 ]
  ! <               [ shift and go to state 102 ]
  ! GRTREQL         [ shift and go to state 103 ]
  ! LESSEQL         [ shift and go to state 104 ]
  ! EQUAL           [ shift and go to state 105 ]
  ! NEQUAL          [ shift and go to state 106 ]

    RELOP                          shift and go to state 98

state 132

    (89) Exp -> Exp BOOLAND Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for BOOLAND resolved as shift
  ! shift/reduce conflict for BOOLOR resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GRTREQL resolved as shift
  ! shift/reduce conflict for LESSEQL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
    ;               reduce using rule 89 (Exp -> Exp BOOLAND Exp .)
    )               reduce using rule 89 (Exp -> Exp BOOLAND Exp .)
    ]               reduce using rule 89 (Exp -> Exp BOOLAND Exp .)
    ,               reduce using rule 89 (Exp -> Exp BOOLAND Exp .)
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95
    BOOLAND         shift and go to state 96
    BOOLOR          shift and go to state 97
    [               shift and go to state 99
    .               shift and go to state 100
    >               shift and go to state 101
    <               shift and go to state 102
    GRTREQL         shift and go to state 103
    LESSEQL         shift and go to state 104
    EQUAL           shift and go to state 105
    NEQUAL          shift and go to state 106

  ! =               [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]
  ! +               [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]
  ! -               [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]
  ! *               [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]
  ! /               [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]
  ! BOOLAND         [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]
  ! BOOLOR          [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]
  ! [               [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]
  ! .               [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]
  ! >               [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]
  ! <               [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]
  ! GRTREQL         [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]
  ! LESSEQL         [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]
  ! EQUAL           [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]
  ! NEQUAL          [ reduce using rule 89 (Exp -> Exp BOOLAND Exp .) ]

    RELOP                          shift and go to state 98

state 133

    (90) Exp -> Exp BOOLOR Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for BOOLAND resolved as shift
  ! shift/reduce conflict for BOOLOR resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GRTREQL resolved as shift
  ! shift/reduce conflict for LESSEQL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
    ;               reduce using rule 90 (Exp -> Exp BOOLOR Exp .)
    )               reduce using rule 90 (Exp -> Exp BOOLOR Exp .)
    ]               reduce using rule 90 (Exp -> Exp BOOLOR Exp .)
    ,               reduce using rule 90 (Exp -> Exp BOOLOR Exp .)
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95
    BOOLAND         shift and go to state 96
    BOOLOR          shift and go to state 97
    [               shift and go to state 99
    .               shift and go to state 100
    >               shift and go to state 101
    <               shift and go to state 102
    GRTREQL         shift and go to state 103
    LESSEQL         shift and go to state 104
    EQUAL           shift and go to state 105
    NEQUAL          shift and go to state 106

  ! =               [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]
  ! +               [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]
  ! -               [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]
  ! *               [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]
  ! /               [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]
  ! BOOLAND         [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]
  ! BOOLOR          [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]
  ! [               [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]
  ! .               [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]
  ! >               [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]
  ! <               [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]
  ! GRTREQL         [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]
  ! LESSEQL         [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]
  ! EQUAL           [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]
  ! NEQUAL          [ reduce using rule 90 (Exp -> Exp BOOLOR Exp .) ]

    RELOP                          shift and go to state 98

state 134

    (92) Exp -> Exp RELOP Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for BOOLAND resolved as shift
  ! shift/reduce conflict for BOOLOR resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GRTREQL resolved as shift
  ! shift/reduce conflict for LESSEQL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
    ;               reduce using rule 92 (Exp -> Exp RELOP Exp .)
    )               reduce using rule 92 (Exp -> Exp RELOP Exp .)
    ]               reduce using rule 92 (Exp -> Exp RELOP Exp .)
    ,               reduce using rule 92 (Exp -> Exp RELOP Exp .)
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95
    BOOLAND         shift and go to state 96
    BOOLOR          shift and go to state 97
    [               shift and go to state 99
    .               shift and go to state 100
    >               shift and go to state 101
    <               shift and go to state 102
    GRTREQL         shift and go to state 103
    LESSEQL         shift and go to state 104
    EQUAL           shift and go to state 105
    NEQUAL          shift and go to state 106

  ! =               [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]
  ! +               [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]
  ! -               [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]
  ! *               [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]
  ! /               [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]
  ! BOOLAND         [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]
  ! BOOLOR          [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]
  ! [               [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]
  ! .               [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]
  ! >               [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]
  ! <               [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]
  ! GRTREQL         [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]
  ! LESSEQL         [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]
  ! EQUAL           [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]
  ! NEQUAL          [ reduce using rule 92 (Exp -> Exp RELOP Exp .) ]

    RELOP                          shift and go to state 98

state 135

    (93) Exp -> Exp [ Exp . ]
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ]               shift and go to state 150
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95
    BOOLAND         shift and go to state 96
    BOOLOR          shift and go to state 97
    [               shift and go to state 99
    .               shift and go to state 100
    >               shift and go to state 101
    <               shift and go to state 102
    GRTREQL         shift and go to state 103
    LESSEQL         shift and go to state 104
    EQUAL           shift and go to state 105
    NEQUAL          shift and go to state 106

    RELOP                          shift and go to state 98

state 136

    (94) Exp -> Exp . ID .

    ;               reduce using rule 94 (Exp -> Exp . ID .)
    =               reduce using rule 94 (Exp -> Exp . ID .)
    +               reduce using rule 94 (Exp -> Exp . ID .)
    -               reduce using rule 94 (Exp -> Exp . ID .)
    *               reduce using rule 94 (Exp -> Exp . ID .)
    /               reduce using rule 94 (Exp -> Exp . ID .)
    BOOLAND         reduce using rule 94 (Exp -> Exp . ID .)
    BOOLOR          reduce using rule 94 (Exp -> Exp . ID .)
    [               reduce using rule 94 (Exp -> Exp . ID .)
    .               reduce using rule 94 (Exp -> Exp . ID .)
    >               reduce using rule 94 (Exp -> Exp . ID .)
    <               reduce using rule 94 (Exp -> Exp . ID .)
    GRTREQL         reduce using rule 94 (Exp -> Exp . ID .)
    LESSEQL         reduce using rule 94 (Exp -> Exp . ID .)
    EQUAL           reduce using rule 94 (Exp -> Exp . ID .)
    NEQUAL          reduce using rule 94 (Exp -> Exp . ID .)
    )               reduce using rule 94 (Exp -> Exp . ID .)
    ]               reduce using rule 94 (Exp -> Exp . ID .)
    ,               reduce using rule 94 (Exp -> Exp . ID .)


state 137

    (45) Stmt -> PRINT ( Exp . ) ;
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    )               shift and go to state 151
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95
    BOOLAND         shift and go to state 96
    BOOLOR          shift and go to state 97
    [               shift and go to state 99
    .               shift and go to state 100
    >               shift and go to state 101
    <               shift and go to state 102
    GRTREQL         shift and go to state 103
    LESSEQL         shift and go to state 104
    EQUAL           shift and go to state 105
    NEQUAL          shift and go to state 106

    RELOP                          shift and go to state 98

state 138

    (77) Exp -> ( Exp ) .

    ;               reduce using rule 77 (Exp -> ( Exp ) .)
    =               reduce using rule 77 (Exp -> ( Exp ) .)
    +               reduce using rule 77 (Exp -> ( Exp ) .)
    -               reduce using rule 77 (Exp -> ( Exp ) .)
    *               reduce using rule 77 (Exp -> ( Exp ) .)
    /               reduce using rule 77 (Exp -> ( Exp ) .)
    BOOLAND         reduce using rule 77 (Exp -> ( Exp ) .)
    BOOLOR          reduce using rule 77 (Exp -> ( Exp ) .)
    [               reduce using rule 77 (Exp -> ( Exp ) .)
    .               reduce using rule 77 (Exp -> ( Exp ) .)
    >               reduce using rule 77 (Exp -> ( Exp ) .)
    <               reduce using rule 77 (Exp -> ( Exp ) .)
    GRTREQL         reduce using rule 77 (Exp -> ( Exp ) .)
    LESSEQL         reduce using rule 77 (Exp -> ( Exp ) .)
    EQUAL           reduce using rule 77 (Exp -> ( Exp ) .)
    NEQUAL          reduce using rule 77 (Exp -> ( Exp ) .)
    )               reduce using rule 77 (Exp -> ( Exp ) .)
    ]               reduce using rule 77 (Exp -> ( Exp ) .)
    ,               reduce using rule 77 (Exp -> ( Exp ) .)


state 139

    (76) PrefixedExp -> ( TypeSpecifier ) . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 152
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 140

    (69) TypeSpecifier -> TYPE SubTypeSpecifier .
    (66) SubTypeSpecifier -> SubTypeSpecifier . [ NUMBER ]
    (67) SubTypeSpecifier -> SubTypeSpecifier . ( TypeList )
    (68) SubTypeSpecifier -> SubTypeSpecifier . ( )

    )               reduce using rule 69 (TypeSpecifier -> TYPE SubTypeSpecifier .)
    ,               reduce using rule 69 (TypeSpecifier -> TYPE SubTypeSpecifier .)
    [               shift and go to state 153
    (               shift and go to state 154


state 141

    (63) SubTypeSpecifier -> EMPTY .

    [               reduce using rule 63 (SubTypeSpecifier -> EMPTY .)
    (               reduce using rule 63 (SubTypeSpecifier -> EMPTY .)
    )               reduce using rule 63 (SubTypeSpecifier -> EMPTY .)
    ,               reduce using rule 63 (SubTypeSpecifier -> EMPTY .)


state 142

    (64) SubTypeSpecifier -> ( . SubTypeSpecifier )
    (63) SubTypeSpecifier -> . EMPTY
    (64) SubTypeSpecifier -> . ( SubTypeSpecifier )
    (65) SubTypeSpecifier -> . * SubTypeSpecifier
    (66) SubTypeSpecifier -> . SubTypeSpecifier [ NUMBER ]
    (67) SubTypeSpecifier -> . SubTypeSpecifier ( TypeList )
    (68) SubTypeSpecifier -> . SubTypeSpecifier ( )
    (1) EMPTY -> .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 142
    *               shift and go to state 143
    )               reduce using rule 1 (EMPTY -> .)
    [               reduce using rule 1 (EMPTY -> .)

  ! (               [ reduce using rule 1 (EMPTY -> .) ]

    SubTypeSpecifier               shift and go to state 155
    EMPTY                          shift and go to state 141

state 143

    (65) SubTypeSpecifier -> * . SubTypeSpecifier
    (63) SubTypeSpecifier -> . EMPTY
    (64) SubTypeSpecifier -> . ( SubTypeSpecifier )
    (65) SubTypeSpecifier -> . * SubTypeSpecifier
    (66) SubTypeSpecifier -> . SubTypeSpecifier [ NUMBER ]
    (67) SubTypeSpecifier -> . SubTypeSpecifier ( TypeList )
    (68) SubTypeSpecifier -> . SubTypeSpecifier ( )
    (1) EMPTY -> .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 142
    *               shift and go to state 143
    [               reduce using rule 1 (EMPTY -> .)
    )               reduce using rule 1 (EMPTY -> .)
    ,               reduce using rule 1 (EMPTY -> .)

  ! (               [ reduce using rule 1 (EMPTY -> .) ]

    SubTypeSpecifier               shift and go to state 156
    EMPTY                          shift and go to state 141

state 144

    (95) FuncCall -> ID ( Args . )

    )               shift and go to state 157


state 145

    (96) FuncCall -> ID ( ) .

    ;               reduce using rule 96 (FuncCall -> ID ( ) .)
    =               reduce using rule 96 (FuncCall -> ID ( ) .)
    +               reduce using rule 96 (FuncCall -> ID ( ) .)
    -               reduce using rule 96 (FuncCall -> ID ( ) .)
    *               reduce using rule 96 (FuncCall -> ID ( ) .)
    /               reduce using rule 96 (FuncCall -> ID ( ) .)
    BOOLAND         reduce using rule 96 (FuncCall -> ID ( ) .)
    BOOLOR          reduce using rule 96 (FuncCall -> ID ( ) .)
    [               reduce using rule 96 (FuncCall -> ID ( ) .)
    .               reduce using rule 96 (FuncCall -> ID ( ) .)
    >               reduce using rule 96 (FuncCall -> ID ( ) .)
    <               reduce using rule 96 (FuncCall -> ID ( ) .)
    GRTREQL         reduce using rule 96 (FuncCall -> ID ( ) .)
    LESSEQL         reduce using rule 96 (FuncCall -> ID ( ) .)
    EQUAL           reduce using rule 96 (FuncCall -> ID ( ) .)
    NEQUAL          reduce using rule 96 (FuncCall -> ID ( ) .)
    )               reduce using rule 96 (FuncCall -> ID ( ) .)
    ]               reduce using rule 96 (FuncCall -> ID ( ) .)
    ,               reduce using rule 96 (FuncCall -> ID ( ) .)


state 146

    (97) Args -> Exp . , Args
    (98) Args -> Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ,               shift and go to state 158
    )               reduce using rule 98 (Args -> Exp .)
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95
    BOOLAND         shift and go to state 96
    BOOLOR          shift and go to state 97
    [               shift and go to state 99
    .               shift and go to state 100
    >               shift and go to state 101
    <               shift and go to state 102
    GRTREQL         shift and go to state 103
    LESSEQL         shift and go to state 104
    EQUAL           shift and go to state 105
    NEQUAL          shift and go to state 106

    RELOP                          shift and go to state 98

state 147

    (46) FlowCtrl -> IF ( Exp . ) Stmt
    (47) FlowCtrl -> IF ( Exp . ) Stmt ELSE Stmt
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    )               shift and go to state 159
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95
    BOOLAND         shift and go to state 96
    BOOLOR          shift and go to state 97
    [               shift and go to state 99
    .               shift and go to state 100
    >               shift and go to state 101
    <               shift and go to state 102
    GRTREQL         shift and go to state 103
    LESSEQL         shift and go to state 104
    EQUAL           shift and go to state 105
    NEQUAL          shift and go to state 106

    RELOP                          shift and go to state 98

state 148

    (48) FlowCtrl -> WHILE ( Exp . ) Stmt
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    )               shift and go to state 160
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95
    BOOLAND         shift and go to state 96
    BOOLOR          shift and go to state 97
    [               shift and go to state 99
    .               shift and go to state 100
    >               shift and go to state 101
    <               shift and go to state 102
    GRTREQL         shift and go to state 103
    LESSEQL         shift and go to state 104
    EQUAL           shift and go to state 105
    NEQUAL          shift and go to state 106

    RELOP                          shift and go to state 98

state 149

    (60) Dec -> VarDec = Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

    ,               reduce using rule 60 (Dec -> VarDec = Exp .)
    ;               reduce using rule 60 (Dec -> VarDec = Exp .)
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95
    BOOLAND         shift and go to state 96
    BOOLOR          shift and go to state 97
    [               shift and go to state 99
    .               shift and go to state 100
    >               shift and go to state 101
    <               shift and go to state 102
    GRTREQL         shift and go to state 103
    LESSEQL         shift and go to state 104
    EQUAL           shift and go to state 105
    NEQUAL          shift and go to state 106

    RELOP                          shift and go to state 98

state 150

    (93) Exp -> Exp [ Exp ] .

    ;               reduce using rule 93 (Exp -> Exp [ Exp ] .)
    =               reduce using rule 93 (Exp -> Exp [ Exp ] .)
    +               reduce using rule 93 (Exp -> Exp [ Exp ] .)
    -               reduce using rule 93 (Exp -> Exp [ Exp ] .)
    *               reduce using rule 93 (Exp -> Exp [ Exp ] .)
    /               reduce using rule 93 (Exp -> Exp [ Exp ] .)
    BOOLAND         reduce using rule 93 (Exp -> Exp [ Exp ] .)
    BOOLOR          reduce using rule 93 (Exp -> Exp [ Exp ] .)
    [               reduce using rule 93 (Exp -> Exp [ Exp ] .)
    .               reduce using rule 93 (Exp -> Exp [ Exp ] .)
    >               reduce using rule 93 (Exp -> Exp [ Exp ] .)
    <               reduce using rule 93 (Exp -> Exp [ Exp ] .)
    GRTREQL         reduce using rule 93 (Exp -> Exp [ Exp ] .)
    LESSEQL         reduce using rule 93 (Exp -> Exp [ Exp ] .)
    EQUAL           reduce using rule 93 (Exp -> Exp [ Exp ] .)
    NEQUAL          reduce using rule 93 (Exp -> Exp [ Exp ] .)
    )               reduce using rule 93 (Exp -> Exp [ Exp ] .)
    ]               reduce using rule 93 (Exp -> Exp [ Exp ] .)
    ,               reduce using rule 93 (Exp -> Exp [ Exp ] .)


state 151

    (45) Stmt -> PRINT ( Exp ) . ;

    ;               shift and go to state 161


state 152

    (76) PrefixedExp -> ( TypeSpecifier ) Exp .
    (82) Exp -> Exp . = Exp
    (83) Exp -> Exp . + Exp
    (84) Exp -> Exp . - Exp
    (85) Exp -> Exp . * Exp
    (86) Exp -> Exp . / Exp
    (89) Exp -> Exp . BOOLAND Exp
    (90) Exp -> Exp . BOOLOR Exp
    (92) Exp -> Exp . RELOP Exp
    (93) Exp -> Exp . [ Exp ]
    (94) Exp -> Exp . . ID
    (2) RELOP -> . >
    (3) RELOP -> . <
    (4) RELOP -> . GRTREQL
    (5) RELOP -> . LESSEQL
    (6) RELOP -> . EQUAL
    (7) RELOP -> . NEQUAL

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for BOOLAND resolved as shift
  ! shift/reduce conflict for BOOLOR resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for . resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for GRTREQL resolved as shift
  ! shift/reduce conflict for LESSEQL resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NEQUAL resolved as shift
    ;               reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .)
    )               reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .)
    ]               reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .)
    ,               reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .)
    =               shift and go to state 91
    +               shift and go to state 92
    -               shift and go to state 93
    *               shift and go to state 94
    /               shift and go to state 95
    BOOLAND         shift and go to state 96
    BOOLOR          shift and go to state 97
    [               shift and go to state 99
    .               shift and go to state 100
    >               shift and go to state 101
    <               shift and go to state 102
    GRTREQL         shift and go to state 103
    LESSEQL         shift and go to state 104
    EQUAL           shift and go to state 105
    NEQUAL          shift and go to state 106

  ! =               [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]
  ! +               [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]
  ! -               [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]
  ! *               [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]
  ! /               [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]
  ! BOOLAND         [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]
  ! BOOLOR          [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]
  ! [               [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]
  ! .               [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]
  ! >               [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]
  ! <               [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]
  ! GRTREQL         [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]
  ! LESSEQL         [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]
  ! EQUAL           [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]
  ! NEQUAL          [ reduce using rule 76 (PrefixedExp -> ( TypeSpecifier ) Exp .) ]

    RELOP                          shift and go to state 98

state 153

    (66) SubTypeSpecifier -> SubTypeSpecifier [ . NUMBER ]

    NUMBER          shift and go to state 162


state 154

    (67) SubTypeSpecifier -> SubTypeSpecifier ( . TypeList )
    (68) SubTypeSpecifier -> SubTypeSpecifier ( . )
    (70) TypeList -> . TypeSpecifier
    (71) TypeList -> . TypeList , TypeSpecifier
    (69) TypeSpecifier -> . TYPE SubTypeSpecifier
    (8) TYPE -> . INT
    (9) TYPE -> . SHORT
    (10) TYPE -> . CHAR
    (11) TYPE -> . LONG
    (12) TYPE -> . FLOAT
    (13) TYPE -> . DOUBLE

    )               shift and go to state 164
    INT             shift and go to state 11
    SHORT           shift and go to state 12
    CHAR            shift and go to state 13
    LONG            shift and go to state 14
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 16

    TypeList                       shift and go to state 163
    TypeSpecifier                  shift and go to state 165
    TYPE                           shift and go to state 110

state 155

    (64) SubTypeSpecifier -> ( SubTypeSpecifier . )
    (66) SubTypeSpecifier -> SubTypeSpecifier . [ NUMBER ]
    (67) SubTypeSpecifier -> SubTypeSpecifier . ( TypeList )
    (68) SubTypeSpecifier -> SubTypeSpecifier . ( )

    )               shift and go to state 166
    [               shift and go to state 153
    (               shift and go to state 154


state 156

    (65) SubTypeSpecifier -> * SubTypeSpecifier .
    (66) SubTypeSpecifier -> SubTypeSpecifier . [ NUMBER ]
    (67) SubTypeSpecifier -> SubTypeSpecifier . ( TypeList )
    (68) SubTypeSpecifier -> SubTypeSpecifier . ( )

    [               reduce using rule 65 (SubTypeSpecifier -> * SubTypeSpecifier .)
    (               reduce using rule 65 (SubTypeSpecifier -> * SubTypeSpecifier .)
    )               reduce using rule 65 (SubTypeSpecifier -> * SubTypeSpecifier .)
    ,               reduce using rule 65 (SubTypeSpecifier -> * SubTypeSpecifier .)

  ! [               [ shift and go to state 153 ]
  ! (               [ shift and go to state 154 ]


state 157

    (95) FuncCall -> ID ( Args ) .

    ;               reduce using rule 95 (FuncCall -> ID ( Args ) .)
    =               reduce using rule 95 (FuncCall -> ID ( Args ) .)
    +               reduce using rule 95 (FuncCall -> ID ( Args ) .)
    -               reduce using rule 95 (FuncCall -> ID ( Args ) .)
    *               reduce using rule 95 (FuncCall -> ID ( Args ) .)
    /               reduce using rule 95 (FuncCall -> ID ( Args ) .)
    BOOLAND         reduce using rule 95 (FuncCall -> ID ( Args ) .)
    BOOLOR          reduce using rule 95 (FuncCall -> ID ( Args ) .)
    [               reduce using rule 95 (FuncCall -> ID ( Args ) .)
    .               reduce using rule 95 (FuncCall -> ID ( Args ) .)
    >               reduce using rule 95 (FuncCall -> ID ( Args ) .)
    <               reduce using rule 95 (FuncCall -> ID ( Args ) .)
    GRTREQL         reduce using rule 95 (FuncCall -> ID ( Args ) .)
    LESSEQL         reduce using rule 95 (FuncCall -> ID ( Args ) .)
    EQUAL           reduce using rule 95 (FuncCall -> ID ( Args ) .)
    NEQUAL          reduce using rule 95 (FuncCall -> ID ( Args ) .)
    )               reduce using rule 95 (FuncCall -> ID ( Args ) .)
    ]               reduce using rule 95 (FuncCall -> ID ( Args ) .)
    ,               reduce using rule 95 (FuncCall -> ID ( Args ) .)


state 158

    (97) Args -> Exp , . Args
    (97) Args -> . Exp , Args
    (98) Args -> . Exp
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 146
    Args                           shift and go to state 167
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 159

    (46) FlowCtrl -> IF ( Exp ) . Stmt
    (47) FlowCtrl -> IF ( Exp ) . Stmt ELSE Stmt
    (44) Stmt -> . RETURN Exp ;
    (45) Stmt -> . PRINT ( Exp ) ;
    (49) Stmt -> . Exp ;
    (50) Stmt -> . CompSt
    (51) Stmt -> . ;
    (52) Stmt -> . FlowCtrl
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (41) CompSt -> . { DefList StmtList }
    (46) FlowCtrl -> . IF ( Exp ) Stmt
    (47) FlowCtrl -> . IF ( Exp ) Stmt ELSE Stmt
    (48) FlowCtrl -> . WHILE ( Exp ) Stmt
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    RETURN          shift and go to state 56
    PRINT           shift and go to state 59
    ;               shift and go to state 58
    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    {               shift and go to state 28
    IF              shift and go to state 73
    WHILE           shift and go to state 74
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 57
    Stmt                           shift and go to state 168
    CompSt                         shift and go to state 61
    FlowCtrl                       shift and go to state 62
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 160

    (48) FlowCtrl -> WHILE ( Exp ) . Stmt
    (44) Stmt -> . RETURN Exp ;
    (45) Stmt -> . PRINT ( Exp ) ;
    (49) Stmt -> . Exp ;
    (50) Stmt -> . CompSt
    (51) Stmt -> . ;
    (52) Stmt -> . FlowCtrl
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (41) CompSt -> . { DefList StmtList }
    (46) FlowCtrl -> . IF ( Exp ) Stmt
    (47) FlowCtrl -> . IF ( Exp ) Stmt ELSE Stmt
    (48) FlowCtrl -> . WHILE ( Exp ) Stmt
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    RETURN          shift and go to state 56
    PRINT           shift and go to state 59
    ;               shift and go to state 58
    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    {               shift and go to state 28
    IF              shift and go to state 73
    WHILE           shift and go to state 74
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 57
    Stmt                           shift and go to state 169
    CompSt                         shift and go to state 61
    FlowCtrl                       shift and go to state 62
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 161

    (45) Stmt -> PRINT ( Exp ) ; .

    RETURN          reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    PRINT           reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    ;               reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    (               reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    ID              reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    NUMBER          reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    DECIMAL         reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    STRINGLITERAL   reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    !               reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    {               reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    IF              reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    WHILE           reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    *               reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    &               reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    -               reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    +               reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    PLUSSLF         reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    SUBSLF          reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    }               reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)
    ELSE            reduce using rule 45 (Stmt -> PRINT ( Exp ) ; .)


state 162

    (66) SubTypeSpecifier -> SubTypeSpecifier [ NUMBER . ]

    ]               shift and go to state 170


state 163

    (67) SubTypeSpecifier -> SubTypeSpecifier ( TypeList . )
    (71) TypeList -> TypeList . , TypeSpecifier

    )               shift and go to state 171
    ,               shift and go to state 172


state 164

    (68) SubTypeSpecifier -> SubTypeSpecifier ( ) .

    [               reduce using rule 68 (SubTypeSpecifier -> SubTypeSpecifier ( ) .)
    (               reduce using rule 68 (SubTypeSpecifier -> SubTypeSpecifier ( ) .)
    )               reduce using rule 68 (SubTypeSpecifier -> SubTypeSpecifier ( ) .)
    ,               reduce using rule 68 (SubTypeSpecifier -> SubTypeSpecifier ( ) .)


state 165

    (70) TypeList -> TypeSpecifier .

    )               reduce using rule 70 (TypeList -> TypeSpecifier .)
    ,               reduce using rule 70 (TypeList -> TypeSpecifier .)


state 166

    (64) SubTypeSpecifier -> ( SubTypeSpecifier ) .

    [               reduce using rule 64 (SubTypeSpecifier -> ( SubTypeSpecifier ) .)
    (               reduce using rule 64 (SubTypeSpecifier -> ( SubTypeSpecifier ) .)
    )               reduce using rule 64 (SubTypeSpecifier -> ( SubTypeSpecifier ) .)
    ,               reduce using rule 64 (SubTypeSpecifier -> ( SubTypeSpecifier ) .)


state 167

    (97) Args -> Exp , Args .

    )               reduce using rule 97 (Args -> Exp , Args .)


state 168

    (46) FlowCtrl -> IF ( Exp ) Stmt .
    (47) FlowCtrl -> IF ( Exp ) Stmt . ELSE Stmt

  ! shift/reduce conflict for ELSE resolved as shift
    RETURN          reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    PRINT           reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    ;               reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    (               reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    ID              reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    NUMBER          reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    DECIMAL         reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    STRINGLITERAL   reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    !               reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    {               reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    IF              reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    WHILE           reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    *               reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    &               reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    -               reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    +               reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    PLUSSLF         reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    SUBSLF          reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    }               reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .)
    ELSE            shift and go to state 173

  ! ELSE            [ reduce using rule 46 (FlowCtrl -> IF ( Exp ) Stmt .) ]


state 169

    (48) FlowCtrl -> WHILE ( Exp ) Stmt .

    RETURN          reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    PRINT           reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    ;               reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    (               reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    ID              reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    NUMBER          reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    DECIMAL         reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    STRINGLITERAL   reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    !               reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    {               reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    IF              reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    WHILE           reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    *               reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    &               reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    -               reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    +               reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    PLUSSLF         reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    SUBSLF          reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    }               reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)
    ELSE            reduce using rule 48 (FlowCtrl -> WHILE ( Exp ) Stmt .)


state 170

    (66) SubTypeSpecifier -> SubTypeSpecifier [ NUMBER ] .

    [               reduce using rule 66 (SubTypeSpecifier -> SubTypeSpecifier [ NUMBER ] .)
    (               reduce using rule 66 (SubTypeSpecifier -> SubTypeSpecifier [ NUMBER ] .)
    )               reduce using rule 66 (SubTypeSpecifier -> SubTypeSpecifier [ NUMBER ] .)
    ,               reduce using rule 66 (SubTypeSpecifier -> SubTypeSpecifier [ NUMBER ] .)


state 171

    (67) SubTypeSpecifier -> SubTypeSpecifier ( TypeList ) .

    [               reduce using rule 67 (SubTypeSpecifier -> SubTypeSpecifier ( TypeList ) .)
    (               reduce using rule 67 (SubTypeSpecifier -> SubTypeSpecifier ( TypeList ) .)
    )               reduce using rule 67 (SubTypeSpecifier -> SubTypeSpecifier ( TypeList ) .)
    ,               reduce using rule 67 (SubTypeSpecifier -> SubTypeSpecifier ( TypeList ) .)


state 172

    (71) TypeList -> TypeList , . TypeSpecifier
    (69) TypeSpecifier -> . TYPE SubTypeSpecifier
    (8) TYPE -> . INT
    (9) TYPE -> . SHORT
    (10) TYPE -> . CHAR
    (11) TYPE -> . LONG
    (12) TYPE -> . FLOAT
    (13) TYPE -> . DOUBLE

    INT             shift and go to state 11
    SHORT           shift and go to state 12
    CHAR            shift and go to state 13
    LONG            shift and go to state 14
    FLOAT           shift and go to state 15
    DOUBLE          shift and go to state 16

    TypeSpecifier                  shift and go to state 174
    TYPE                           shift and go to state 110

state 173

    (47) FlowCtrl -> IF ( Exp ) Stmt ELSE . Stmt
    (44) Stmt -> . RETURN Exp ;
    (45) Stmt -> . PRINT ( Exp ) ;
    (49) Stmt -> . Exp ;
    (50) Stmt -> . CompSt
    (51) Stmt -> . ;
    (52) Stmt -> . FlowCtrl
    (77) Exp -> . ( Exp )
    (78) Exp -> . ID
    (79) Exp -> . NUMBER
    (80) Exp -> . DECIMAL
    (81) Exp -> . STRINGLITERAL
    (82) Exp -> . Exp = Exp
    (83) Exp -> . Exp + Exp
    (84) Exp -> . Exp - Exp
    (85) Exp -> . Exp * Exp
    (86) Exp -> . Exp / Exp
    (87) Exp -> . FuncCall
    (88) Exp -> . PrefixedExp
    (89) Exp -> . Exp BOOLAND Exp
    (90) Exp -> . Exp BOOLOR Exp
    (91) Exp -> . ! Exp
    (92) Exp -> . Exp RELOP Exp
    (93) Exp -> . Exp [ Exp ]
    (94) Exp -> . Exp . ID
    (41) CompSt -> . { DefList StmtList }
    (46) FlowCtrl -> . IF ( Exp ) Stmt
    (47) FlowCtrl -> . IF ( Exp ) Stmt ELSE Stmt
    (48) FlowCtrl -> . WHILE ( Exp ) Stmt
    (95) FuncCall -> . ID ( Args )
    (96) FuncCall -> . ID ( )
    (61) PrefixedExp -> . * Exp
    (62) PrefixedExp -> . & Exp
    (72) PrefixedExp -> . - Exp
    (73) PrefixedExp -> . + Exp
    (74) PrefixedExp -> . PLUSSLF Exp
    (75) PrefixedExp -> . SUBSLF Exp
    (76) PrefixedExp -> . ( TypeSpecifier ) Exp

    RETURN          shift and go to state 56
    PRINT           shift and go to state 59
    ;               shift and go to state 58
    (               shift and go to state 60
    ID              shift and go to state 63
    NUMBER          shift and go to state 64
    DECIMAL         shift and go to state 65
    STRINGLITERAL   shift and go to state 66
    !               shift and go to state 72
    {               shift and go to state 28
    IF              shift and go to state 73
    WHILE           shift and go to state 74
    *               shift and go to state 69
    &               shift and go to state 75
    -               shift and go to state 68
    +               shift and go to state 67
    PLUSSLF         shift and go to state 76
    SUBSLF          shift and go to state 77

    Exp                            shift and go to state 57
    Stmt                           shift and go to state 175
    CompSt                         shift and go to state 61
    FlowCtrl                       shift and go to state 62
    FuncCall                       shift and go to state 70
    PrefixedExp                    shift and go to state 71

state 174

    (71) TypeList -> TypeList , TypeSpecifier .

    )               reduce using rule 71 (TypeList -> TypeList , TypeSpecifier .)
    ,               reduce using rule 71 (TypeList -> TypeList , TypeSpecifier .)


state 175

    (47) FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .

    RETURN          reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    PRINT           reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    ;               reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    (               reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    ID              reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    NUMBER          reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    DECIMAL         reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    STRINGLITERAL   reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    !               reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    {               reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    IF              reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    WHILE           reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    *               reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    &               reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    -               reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    +               reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    PLUSSLF         reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    SUBSLF          reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    }               reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)
    ELSE            reduce using rule 47 (FlowCtrl -> IF ( Exp ) Stmt ELSE Stmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ( in state 110 resolved as shift
WARNING: shift/reduce conflict for = in state 115 resolved as shift
WARNING: shift/reduce conflict for + in state 115 resolved as shift
WARNING: shift/reduce conflict for - in state 115 resolved as shift
WARNING: shift/reduce conflict for * in state 115 resolved as shift
WARNING: shift/reduce conflict for / in state 115 resolved as shift
WARNING: shift/reduce conflict for BOOLAND in state 115 resolved as shift
WARNING: shift/reduce conflict for BOOLOR in state 115 resolved as shift
WARNING: shift/reduce conflict for [ in state 115 resolved as shift
WARNING: shift/reduce conflict for . in state 115 resolved as shift
WARNING: shift/reduce conflict for > in state 115 resolved as shift
WARNING: shift/reduce conflict for < in state 115 resolved as shift
WARNING: shift/reduce conflict for GRTREQL in state 115 resolved as shift
WARNING: shift/reduce conflict for LESSEQL in state 115 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for = in state 132 resolved as shift
WARNING: shift/reduce conflict for + in state 132 resolved as shift
WARNING: shift/reduce conflict for - in state 132 resolved as shift
WARNING: shift/reduce conflict for * in state 132 resolved as shift
WARNING: shift/reduce conflict for / in state 132 resolved as shift
WARNING: shift/reduce conflict for BOOLAND in state 132 resolved as shift
WARNING: shift/reduce conflict for BOOLOR in state 132 resolved as shift
WARNING: shift/reduce conflict for [ in state 132 resolved as shift
WARNING: shift/reduce conflict for . in state 132 resolved as shift
WARNING: shift/reduce conflict for > in state 132 resolved as shift
WARNING: shift/reduce conflict for < in state 132 resolved as shift
WARNING: shift/reduce conflict for GRTREQL in state 132 resolved as shift
WARNING: shift/reduce conflict for LESSEQL in state 132 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 132 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 132 resolved as shift
WARNING: shift/reduce conflict for = in state 133 resolved as shift
WARNING: shift/reduce conflict for + in state 133 resolved as shift
WARNING: shift/reduce conflict for - in state 133 resolved as shift
WARNING: shift/reduce conflict for * in state 133 resolved as shift
WARNING: shift/reduce conflict for / in state 133 resolved as shift
WARNING: shift/reduce conflict for BOOLAND in state 133 resolved as shift
WARNING: shift/reduce conflict for BOOLOR in state 133 resolved as shift
WARNING: shift/reduce conflict for [ in state 133 resolved as shift
WARNING: shift/reduce conflict for . in state 133 resolved as shift
WARNING: shift/reduce conflict for > in state 133 resolved as shift
WARNING: shift/reduce conflict for < in state 133 resolved as shift
WARNING: shift/reduce conflict for GRTREQL in state 133 resolved as shift
WARNING: shift/reduce conflict for LESSEQL in state 133 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 133 resolved as shift
WARNING: shift/reduce conflict for = in state 134 resolved as shift
WARNING: shift/reduce conflict for + in state 134 resolved as shift
WARNING: shift/reduce conflict for - in state 134 resolved as shift
WARNING: shift/reduce conflict for * in state 134 resolved as shift
WARNING: shift/reduce conflict for / in state 134 resolved as shift
WARNING: shift/reduce conflict for BOOLAND in state 134 resolved as shift
WARNING: shift/reduce conflict for BOOLOR in state 134 resolved as shift
WARNING: shift/reduce conflict for [ in state 134 resolved as shift
WARNING: shift/reduce conflict for . in state 134 resolved as shift
WARNING: shift/reduce conflict for > in state 134 resolved as shift
WARNING: shift/reduce conflict for < in state 134 resolved as shift
WARNING: shift/reduce conflict for GRTREQL in state 134 resolved as shift
WARNING: shift/reduce conflict for LESSEQL in state 134 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 134 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 134 resolved as shift
WARNING: shift/reduce conflict for ( in state 142 resolved as shift
WARNING: shift/reduce conflict for ( in state 143 resolved as shift
WARNING: shift/reduce conflict for = in state 152 resolved as shift
WARNING: shift/reduce conflict for + in state 152 resolved as shift
WARNING: shift/reduce conflict for - in state 152 resolved as shift
WARNING: shift/reduce conflict for * in state 152 resolved as shift
WARNING: shift/reduce conflict for / in state 152 resolved as shift
WARNING: shift/reduce conflict for BOOLAND in state 152 resolved as shift
WARNING: shift/reduce conflict for BOOLOR in state 152 resolved as shift
WARNING: shift/reduce conflict for [ in state 152 resolved as shift
WARNING: shift/reduce conflict for . in state 152 resolved as shift
WARNING: shift/reduce conflict for > in state 152 resolved as shift
WARNING: shift/reduce conflict for < in state 152 resolved as shift
WARNING: shift/reduce conflict for GRTREQL in state 152 resolved as shift
WARNING: shift/reduce conflict for LESSEQL in state 152 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 152 resolved as shift
WARNING: shift/reduce conflict for NEQUAL in state 152 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 168 resolved as shift
